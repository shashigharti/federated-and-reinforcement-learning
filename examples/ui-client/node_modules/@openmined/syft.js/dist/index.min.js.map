{"version":3,"file":"index.min.js","sources":["../src/_constants.js","../node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/@babel/runtime/helpers/createClass.js","../src/events.js","../src/logger.js","../node_modules/@babel/runtime/helpers/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/nonIterableRest.js","../node_modules/@babel/runtime/helpers/slicedToArray.js","../node_modules/regenerator-runtime/runtime.js","../node_modules/@babel/runtime/regenerator/index.js","../node_modules/@babel/runtime/helpers/asyncToGenerator.js","../src/utils/random-buffer.js","../src/speed-test.js","../node_modules/@babel/runtime/helpers/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/inherits.js","../node_modules/@babel/runtime/helpers/typeof.js","../node_modules/@babel/runtime/helpers/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/isNativeFunction.js","../node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js","../node_modules/@babel/runtime/helpers/construct.js","../node_modules/@babel/runtime/helpers/wrapNativeSuper.js","../src/_errors.js","../node_modules/base64-arraybuffer/lib/base64-arraybuffer.js","../src/utils/base64.js","../src/grid-api-client.js","../node_modules/@babel/runtime/helpers/defineProperty.js","../node_modules/@protobufjs/aspromise/index.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/utf8/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/protobufjs/src/util/longbits.js","../node_modules/protobufjs/src/util/minimal.js","../node_modules/protobufjs/src/writer.js","../node_modules/protobufjs/src/writer_buffer.js","../node_modules/protobufjs/src/reader.js","../node_modules/protobufjs/src/reader_buffer.js","../node_modules/protobufjs/src/rpc/service.js","../node_modules/protobufjs/src/rpc.js","../node_modules/protobufjs/src/roots.js","../node_modules/protobufjs/src/index-minimal.js","../node_modules/protobufjs/minimal.js","../node_modules/syft-proto/js/protobuf.js","../node_modules/syft-proto/js/index.js","../src/types/protocol.js","../src/types/plan.js","../src/object-registry.js","../src/types/role.js","../src/types/state.js","../src/types/message.js","../src/types/torch.js","../src/types/placeholder.js","../node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/iterableToArray.js","../node_modules/@babel/runtime/helpers/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/toConsumableArray.js","../src/types/pointer-tensor.js","../src/types/computation-action.js","../src/protobuf/mapping.js","../node_modules/long/src/long.js","../src/protobuf/index.js","../src/syft-model.js","../src/data/transform/core/index.js","../node_modules/@babel/runtime/helpers/toArray.js","../src/data/transform/tfjs/index.js","../src/data/dataset.js","../src/data/sampler.js","../src/data/fetch.js","../src/data/collate.js","../src/data/data-loader.js","../src/plan-trainer.js","../src/job.js","../src/syft.js"],"sourcesContent":["// Sockets\nexport const SOCKET_STATUS = 'socket-status';\nexport const SOCKET_PING = 'socket-ping';\n\n// Grid\nexport const GET_PROTOCOL = 'get-protocol';\nexport const CYCLE_STATUS_ACCEPTED = 'accepted';\nexport const CYCLE_STATUS_REJECTED = 'rejected';\n\n// WebRTC\nexport const WEBRTC_JOIN_ROOM = 'webrtc: join-room';\nexport const WEBRTC_INTERNAL_MESSAGE = 'webrtc: internal-message';\nexport const WEBRTC_PEER_LEFT = 'webrtc: peer-left';\n\n// WebRTC: Data Channel\nexport const WEBRTC_DATACHANNEL_CHUNK_SIZE = 64 * 1024;\nexport const WEBRTC_DATACHANNEL_MAX_BUFFER = 4 * 1024 * 1024;\nexport const WEBRTC_DATACHANNEL_BUFFER_TIMEOUT = 2000;\nexport const WEBRTC_DATACHANNEL_MAX_BUFFER_TIMEOUTS = 5;\n\nexport const WEBRTC_PEER_CONFIG = {\n  iceServers: [\n    {\n      urls: [\n        'stun:stun.l.google.com:19302',\n        'stun:stun1.l.google.com:19302',\n        'stun:stun2.l.google.com:19302', // FF says too many stuns are bad, don't send more than this\n      ],\n    },\n  ],\n};\n\nexport const WEBRTC_PEER_OPTIONS = {\n  optional: [\n    { DtlsSrtpKeyAgreement: true }, // Required for connection between Chrome and Firefox\n    // FF works w/o this option, but Chrome fails with it\n    // { RtpDataChannels: true } // Required in Firefox to use the DataChannels API\n  ],\n};\n","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","/**\n * Event Observer that subscribes, unsubscribes and broadcasts events.\n *\n * @property {Object.<string, Function>} observers - Event dictionary.\n */\nexport default class EventObserver {\n  constructor() {\n    this.observers = [];\n  }\n\n  /**\n   * Subscribes an event and its handler to the event dictionary.\n   *\n   * @param {string} type - Event type.\n   * @param {Function} func - Event handler.\n   * @param {number|boolean} [expires] - Expire subscription after N invocations.\n   */\n  subscribe(type, func, expires = false) {\n    this.observers.push({ type, func, expires });\n  }\n\n  /**\n   * Unsubscribes an event from the event dictionary.\n   *\n   * @param {string} eventType - Event type.\n   * @param {Function} [func] - Event handler.\n   */\n  unsubscribe(eventType, func) {\n    this.observers = this.observers.filter((i) => {\n      return eventType !== i.type && func !== i.func;\n    });\n  }\n\n  /**\n   * Broadcasts a specific event type.\n   *\n   * @param {string} eventType - Event type.\n   * @param {Object} data - Data to be broadcasted.\n   */\n  broadcast(eventType, data) {\n    this.observers.forEach((observer) => {\n      if (\n        eventType === observer.type &&\n        (observer.expires === false || observer.expires > 0)\n      ) {\n        if (typeof observer.expires === 'number') {\n          observer.expires--;\n        }\n        observer.func(data);\n      }\n    });\n\n    // Remove expired subscriptions\n    this.observers = this.observers.filter((i) => {\n      return i.expires > 0 || i.expires === false;\n    });\n  }\n}\n","// A simple logging function\nexport default class Logger {\n  constructor(system, verbose) {\n    if (!Logger.instance) {\n      this.system = system;\n      this.verbose = verbose;\n      Logger.instance = this;\n    }\n    return Logger.instance;\n  }\n\n  log(message, data) {\n    // Only log if verbose is turned on\n    if (this.verbose) {\n      const output = `${Date.now()}: ${this.system} - ${message}`;\n\n      // Have the passed additional data?\n      if (data) {\n        console.log(output, data);\n      } else {\n        console.log(output);\n      }\n    }\n  }\n}\n","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableRest;","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  function ensureDefaultToStringTag(object, defaultValue) {\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1644581#c6\n    return toStringTagSymbol in object\n      ? object[toStringTagSymbol]\n      : object[toStringTagSymbol] = defaultValue;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = ensureDefaultToStringTag(\n    GeneratorFunctionPrototype,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      ensureDefaultToStringTag(genFun, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  ensureDefaultToStringTag(Gp, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","/**\n * Creates ArrayBuffer with given size populated with random values\n * @param size {number} - Buffer size in bytes\n * @returns {ArrayBuffer}\n */\nexport const createRandomBuffer = async (size) => {\n  return new Promise((resolve) => {\n    // Uint32Array is faster, 4 times less Math.random() calls\n    const int32BuffSize = Math.ceil(size / 4);\n    const buff = new Uint32Array(int32BuffSize);\n    const int32Max = Math.pow(2, 32);\n    const randomInt32 = () => Math.random() * int32Max;\n\n    // Don't block event loop too much, break every 1mb\n    const int32ChunkSize = (1024 * 1024) / 4;\n    const fillNextChunk = (offset = 0) => {\n      const stop = Math.min(offset + int32ChunkSize, int32BuffSize);\n      for (let i = offset; i < stop; i++) {\n        buff[i] = randomInt32();\n      }\n      if (stop !== int32BuffSize) {\n        setTimeout(fillNextChunk, 0, offset + int32ChunkSize);\n      } else {\n        resolve(buff.buffer);\n      }\n    };\n    setTimeout(fillNextChunk, 0);\n  });\n};\n","import { createRandomBuffer } from './utils/random-buffer';\n\n/**\n * SpeedTest is a class that contains the necessary components\n * to measure download/upload speed, and ping.\n */\nexport class SpeedTest {\n  /**\n   * @param {string} downloadUrl\n   * @param {string} uploadUrl\n   * @param {string} pingUrl\n   * @param {number} maxUploadSizeMb\n   * @param {number} maxTestTimeSec\n   */\n  constructor({\n    downloadUrl,\n    uploadUrl,\n    pingUrl,\n    maxUploadSizeMb = 64,\n    maxTestTimeSec = 10,\n  }) {\n    this.downloadUrl = downloadUrl;\n    this.uploadUrl = uploadUrl;\n    this.pingUrl = pingUrl;\n    this.maxUploadSizeMb = maxUploadSizeMb;\n    this.maxTestTimeSec = maxTestTimeSec;\n\n    // Various settings to tune.\n    this.bwAvgWindow = 5;\n    this.bwLowJitterThreshold = 0.05;\n    this.bwMaxLowJitterConsecutiveMeasures = 5;\n  }\n\n  /**\n   * Measures the time taken to make an XMLHttpRequest (xhr).\n   * Gets called before the request is sent, to set up values and tools to measure time.\n   * Returns a promise that gets updated when the request is sent and a response is received with no errors.\n   *  If the request is successful, then the value of the promise is the time that the request took (in seconds)\n   *  Else, the value is an Error\n   * @param {XMLHttpRequest} xhr - XMLHttpRequest\n   * @param {boolean} isUpload\n   */\n  async meterXhr(xhr, isUpload = false) {\n    return new Promise((resolve, reject) => {\n      // Set up the initial values to measure time\n      let timeoutHandler = null,\n        prevTime = 0,\n        prevSize = 0,\n        avgCollector = new AvgCollector({\n          avgWindow: this.bwAvgWindow,\n          lowJitterThreshold: this.bwLowJitterThreshold,\n          maxLowJitterConsecutiveMeasures: this\n            .bwMaxLowJitterConsecutiveMeasures,\n        });\n\n      const req = isUpload ? xhr.upload : xhr;\n\n      // Update the value of the promise when the request is finished\n      const finish = (error = null) => {\n        if (timeoutHandler) {\n          clearTimeout(timeoutHandler);\n        }\n\n        // Clean up\n        req.onprogress = null;\n        req.onload = null;\n        req.onerror = null;\n        xhr.abort();\n\n        // Return result\n        if (!error) {\n          resolve(avgCollector.getAvg());\n        } else {\n          reject(new Error(error));\n        }\n      };\n\n      req.onreadystatechange = () => {\n        if (xhr.readyState === 1) {\n          // As soon as connection is opened, set speed test timeout\n          timeoutHandler = setTimeout(finish, this.maxTestTimeSec * 1000);\n          // Set initial time/size values\n          if (!prevTime) {\n            prevTime = Date.now() / 1000;\n            prevSize = 0;\n          }\n        }\n      };\n\n      req.onprogress = (e) => {\n        const // mbit\n          size = (8 * e.loaded) / 1048576,\n          // seconds\n          time = Date.now() / 1000;\n\n        if (!prevTime) {\n          prevTime = time;\n          prevSize = size;\n          return;\n        }\n\n        // Update change in time and size as the request i in progress\n        let deltaSize = size - prevSize,\n          deltaTime = time - prevTime,\n          speed = deltaSize / deltaTime;\n\n        if (deltaTime === 0 || !Number.isFinite(speed)) {\n          // Cap to 1Gbps\n          speed = 1000;\n        }\n\n        const canStop = avgCollector.collect(speed);\n        if (canStop) {\n          finish();\n        }\n\n        prevSize = size;\n        prevTime = time;\n      };\n\n      req.onload = () => {\n        finish();\n      };\n      req.onerror = (e) => {\n        finish(e);\n      };\n    });\n  }\n\n  async getDownloadSpeed() {\n    let xhr = new XMLHttpRequest();\n    const result = this.meterXhr(xhr);\n\n    xhr.open('GET', this.downloadUrl + '?' + Math.random(), true);\n    xhr.send();\n\n    return result;\n  }\n\n  async getUploadSpeed() {\n    const xhr = new XMLHttpRequest();\n    const result = this.meterXhr(xhr, true);\n    const buff = await createRandomBuffer(this.maxUploadSizeMb * 1024 * 1024);\n\n    xhr.open('POST', this.uploadUrl, true);\n    xhr.send(buff);\n\n    return result;\n  }\n\n  async getPing() {\n    return new Promise((resolve, reject) => {\n      // Set up values to measure ping\n      const avgCollector = new AvgCollector({});\n      let currXhr;\n      let timeoutHandler;\n\n      // Update value of promise once test is finished\n      const finish = (xhr, error = null) => {\n        if (timeoutHandler) {\n          clearTimeout(timeoutHandler);\n        }\n\n        // Clean up\n        xhr.onprogress = null;\n        xhr.onload = null;\n        xhr.onerror = null;\n        xhr.abort();\n\n        // Return result\n        if (!error) {\n          resolve(avgCollector.getAvg());\n        } else {\n          reject(new Error(error));\n        }\n      };\n\n      const runPing = () => {\n        const xhr = new XMLHttpRequest();\n        currXhr = xhr;\n        let startTime = Date.now();\n\n        xhr.onload = () => {\n          const ping = Date.now() - startTime;\n          const canStop = avgCollector.collect(ping);\n          if (canStop) {\n            finish(xhr);\n          } else {\n            setTimeout(runPing, 0);\n          }\n        };\n\n        xhr.onerror = (e) => {\n          finish(xhr, e);\n        };\n\n        xhr.open('GET', this.pingUrl + '?' + Math.random(), true);\n        xhr.send();\n      };\n\n      timeoutHandler = setTimeout(() => {\n        finish(currXhr);\n      }, this.maxTestTimeSec * 1000);\n      runPing();\n    });\n  }\n}\n\n/**\n * Helper to average series of values.\n *\n * @private\n * @param options {Object}\n * @param options.avgWindow {number} Window to average (last N measurements)\n * @param options.lowJitterThreshold {number} Change of avg considered stable\n * @param maxLowJitterConsecutiveMeasures {number} Number of measures\n *  when avg stays stable to stop collecting more samples\n */\nclass AvgCollector {\n  constructor({\n    avgWindow = 5,\n    lowJitterThreshold = 0.05,\n    maxLowJitterConsecutiveMeasures = 5,\n  }) {\n    this.measuresCount = 0;\n    this.prevAvg = 0;\n    this.avg = 0;\n    this.lowJitterConsecutiveMeasures = 0;\n\n    this.avgWindow = avgWindow;\n    this.lowJitterThreshold = lowJitterThreshold;\n    this.maxLowJitterConsecutiveMeasures = maxLowJitterConsecutiveMeasures;\n    this.name = name;\n  }\n\n  /**\n   * Collects one sample for averaging.\n   * @param value {number} Reported speed\n   * @returns {boolean} Can stop collecting due to average value stability\n   */\n  collect(value) {\n    this.prevAvg = this.avg;\n    const avgWindow = Math.min(this.measuresCount, this.avgWindow);\n    this.avg = (this.avg * avgWindow + value) / (avgWindow + 1);\n    this.measuresCount++;\n\n    // Return true if measurements are stable.\n    if (\n      this.prevAvg > 0 &&\n      this.avg < this.prevAvg * (1 + this.lowJitterThreshold) &&\n      this.avg > this.prevAvg * (1 - this.lowJitterThreshold)\n    ) {\n      this.lowJitterConsecutiveMeasures++;\n    } else {\n      this.lowJitterConsecutiveMeasures = 0;\n    }\n\n    return (\n      this.lowJitterConsecutiveMeasures >= this.maxLowJitterConsecutiveMeasures\n    );\n  }\n\n  getAvg() {\n    return this.avg;\n  }\n}\n","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","var _typeof = require(\"../helpers/typeof\");\n\nvar assertThisInitialized = require(\"./assertThisInitialized\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;","function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nmodule.exports = _isNativeFunction;","function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nmodule.exports = _isNativeReflectConstruct;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nvar isNativeReflectConstruct = require(\"./isNativeReflectConstruct\");\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    module.exports = _construct = Reflect.construct;\n  } else {\n    module.exports = _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nmodule.exports = _construct;","var getPrototypeOf = require(\"./getPrototypeOf\");\n\nvar setPrototypeOf = require(\"./setPrototypeOf\");\n\nvar isNativeFunction = require(\"./isNativeFunction\");\n\nvar construct = require(\"./construct\");\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nmodule.exports = _wrapNativeSuper;","export class NoDetailerError extends Error {\n  constructor(d) {\n    super(\n      `Serialized object contains type that may exist in PySyft, but is not currently supported in syft.js. Please file a feature request (https://github.com/OpenMined/syft.js/issues) for type ${d}.`\n    );\n    this.name = 'NoDetailerError';\n  }\n}\n\nexport class NotEnoughArgsError extends Error {\n  constructor(passed, expected) {\n    super(\n      `You have passed ${passed} argument(s) when the plan requires ${expected} argument(s).`\n    );\n    this.name = 'NotEnoughArgsError';\n  }\n}\n\nexport class MissingVariableError extends Error {\n  constructor() {\n    super(`Command requires variable that is missing.`);\n    this.name = 'MissingVariableError';\n  }\n}\n\nexport class NoPlanError extends Error {\n  constructor() {\n    super(\n      `The operation you're attempting to run requires a plan before being called.`\n    );\n    this.name = 'NoPlanError';\n  }\n}\n\nexport class PlanAlreadyCompletedError extends Error {\n  constructor(name, id) {\n    super(\n      `You have already executed the plan named \"${name}\" with id \"${id}\".`\n    );\n    this.name = 'PlanAlreadyCompletedError';\n  }\n}\n\nexport class CannotFindCommandError extends Error {\n  constructor(command) {\n    super(`Command ${command} not found in in TensorFlow.js.`);\n    this.name = 'CannotFindCommandError';\n  }\n}\n\nexport class GridUnknownCycleStatusError extends Error {\n  constructor(status) {\n    super(`Unknown cycle status: ${status}`);\n    this.name = 'GridUnknownCycleStatusError';\n  }\n}\n\nexport class GridError extends Error {\n  constructor(status) {\n    super(`Grid error: ${status}`);\n    this.name = 'GridError';\n  }\n}\n\nexport class ModelLoadFailedError extends Error {\n  constructor(status) {\n    super(`Failed to load Model: ${status}`);\n    this.name = 'ModelLoadFailedError';\n  }\n}\n\nexport class PlanLoadFailedError extends Error {\n  constructor(planName, status) {\n    super(`Failed to load '${planName}' Plan: ${status}`);\n    this.name = 'PlanLoadFailedError';\n  }\n}\n\nexport class ProtobufUnserializeFailedError extends Error {\n  constructor(pbType, status) {\n    super(\n      `Failed to unserialize binary protobuf data into ${pbType}: ${status}`\n    );\n    this.name = 'ProtobufUnserializeFailedError';\n  }\n}\n","/*\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n(function(){\n  \"use strict\";\n\n  var chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n  // Use a lookup table to find the index.\n  var lookup = new Uint8Array(256);\n  for (var i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n  }\n\n  exports.encode = function(arraybuffer) {\n    var bytes = new Uint8Array(arraybuffer),\n    i, len = bytes.length, base64 = \"\";\n\n    for (i = 0; i < len; i+=3) {\n      base64 += chars[bytes[i] >> 2];\n      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n      base64 += chars[bytes[i + 2] & 63];\n    }\n\n    if ((len % 3) === 2) {\n      base64 = base64.substring(0, base64.length - 1) + \"=\";\n    } else if (len % 3 === 1) {\n      base64 = base64.substring(0, base64.length - 2) + \"==\";\n    }\n\n    return base64;\n  };\n\n  exports.decode =  function(base64) {\n    var bufferLength = base64.length * 0.75,\n    len = base64.length, i, p = 0,\n    encoded1, encoded2, encoded3, encoded4;\n\n    if (base64[base64.length - 1] === \"=\") {\n      bufferLength--;\n      if (base64[base64.length - 2] === \"=\") {\n        bufferLength--;\n      }\n    }\n\n    var arraybuffer = new ArrayBuffer(bufferLength),\n    bytes = new Uint8Array(arraybuffer);\n\n    for (i = 0; i < len; i+=4) {\n      encoded1 = lookup[base64.charCodeAt(i)];\n      encoded2 = lookup[base64.charCodeAt(i+1)];\n      encoded3 = lookup[base64.charCodeAt(i+2)];\n      encoded4 = lookup[base64.charCodeAt(i+3)];\n\n      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n\n    return arraybuffer;\n  };\n})();\n","import { decode, encode } from 'base64-arraybuffer';\n\n/**\n * Decodes base64-encoded string to ArrayBuffer\n * @param {string} str\n * @returns {Uint8Array}\n */\nexport const base64Decode = (str) => {\n  return new Uint8Array(decode(str));\n};\n\n/**\n * Encodes ArrayBuffer to base64 string\n * @param {ArrayBuffer} array\n * @returns {string}\n */\nexport const base64Encode = (array) => {\n  return encode(array);\n};\n","import Logger from './logger';\nimport { SpeedTest } from './speed-test';\nimport { GridError } from './_errors';\nimport EventObserver from './events';\nimport { createRandomBuffer } from './utils/random-buffer';\nimport { base64Encode } from './utils/base64';\n\n// Define the type of request (GET, POST) associated with each possible call\nconst HTTP_PATH_VERB = {\n  'model-centric/get-plan': 'GET',\n  'model-centric/get-model': 'GET',\n  'model-centric/get-protocol': 'GET',\n  'model-centric/cycle-request': 'POST',\n  'model-centric/report': 'POST',\n  'model-centric/authenticate': 'POST',\n};\n\n/**\n * GridAPIClient defines the possible API calls that can be made to PyGrid from a client perspective\n * Operations include get-plan, get-model, get-protocol, cycle-request, report and authenticate\n */\nexport default class GridAPIClient {\n  constructor({ url, allowInsecureUrl = false }) {\n    // Choose between web socket or http protocol\n    this.transport = url.match(/^ws/i) ? 'ws' : 'http';\n    if (this.transport === 'ws') {\n      this.wsUrl = url;\n      this.httpUrl = url.replace(/^ws(s)?/i, 'http$1');\n    } else {\n      this.httpUrl = url;\n      this.wsUrl = url.replace(/^http(s)?/i, 'ws$1');\n    }\n    if (!allowInsecureUrl) {\n      this.wsUrl = this.wsUrl.replace('ws', 'wss');\n      this.httpUrl = this.httpUrl.replace('http', 'https');\n    }\n\n    // Define all necessary components for both web socket and http\n    this.ws = null;\n    this.observer = new EventObserver();\n    this.wsMessages = {};\n    this.logger = new Logger('grid', true);\n    this.responseTimeout = 10000;\n\n    this._handleWsMessage = this._handleWsMessage.bind(this);\n    this._handleWsError = this._handleWsError.bind(this);\n    this._handleWsClose = this._handleWsClose.bind(this);\n  }\n\n  /**\n   * Authenticates a connection to the grid\n   * using a particular token associated with a model name and version\n   * @param {string} modelName\n   * @param {string} modelVersion\n   * @param {string} authToken\n   */\n  async authenticate(modelName, modelVersion, authToken) {\n    this.logger.log(\n      `Authenticating against ${modelName} ${modelVersion} with ${authToken}...`\n    );\n\n    const response = await this._send('model-centric/authenticate', {\n      model_name: modelName,\n      model_version: modelVersion,\n      auth_token: authToken,\n    });\n\n    return response;\n  }\n\n  /**\n   * Requests to join an active federated learning cycle in PyGrid\n   * @param {string} workerId\n   * @param {string} modelName\n   * @param {string} modelVersion\n   * @param {number} ping\n   * @param {number} download\n   * @param {number} upload\n   */\n  requestCycle(workerId, modelName, modelVersion, ping, download, upload) {\n    this.logger.log(\n      `[WID: ${workerId}] Requesting cycle for model ${modelName} v.${modelVersion} [${ping}, ${download}, ${upload}]...`\n    );\n\n    const response = this._send('model-centric/cycle-request', {\n      worker_id: workerId,\n      model: modelName,\n      version: modelVersion,\n      ping: ping,\n      download: download,\n      upload: upload,\n    });\n\n    return response;\n  }\n\n  async getModel(workerId, requestKey, modelId) {\n    this.logger.log(\n      `[WID: ${workerId}, KEY: ${requestKey}] Requesting model ${modelId}...`\n    );\n\n    const response = await this._sendHttp(\n      'model-centric/get-model',\n      {\n        worker_id: workerId,\n        request_key: requestKey,\n        model_id: modelId,\n      },\n      'arrayBuffer'\n    );\n    return response;\n  }\n\n  async getPlan(workerId, requestKey, planId) {\n    this.logger.log(\n      `[WID: ${workerId}, KEY: ${requestKey}] Requesting plan ${planId}...`\n    );\n\n    const response = await this._sendHttp(\n      'model-centric/get-plan',\n      {\n        worker_id: workerId,\n        request_key: requestKey,\n        plan_id: planId,\n        receive_operations_as: 'tfjs',\n      },\n      'arrayBuffer'\n    );\n\n    return response;\n  }\n\n  getProtocol(workerId, requestKey, protocolId) {\n    this.logger.log(\n      `[WID: ${workerId}, KEY: ${requestKey}] Requesting protocol ${protocolId}...`\n    );\n    return Promise.resolve(\n      'CgYIjcivoCUqEwoGCIHIr6AlEgkSB3dvcmtlcjEqEwoGCIXIr6AlEgkSB3dvcmtlcjIqEwoGCInIr6AlEgkSB3dvcmtlcjM='\n    );\n  }\n\n  /**\n   * Submits a report indicating the difference between the model parameters from workerID and original PyGrid parameters\n   * @param {string} workerId\n   * @param {string} requestKey\n   * @param {string} diff - a base64 encoded string difference between current and original model parameters in PyGrid\n   */\n  async submitReport(workerId, requestKey, diff) {\n    this.logger.log(\n      `[WID: ${workerId}, KEY: ${requestKey}] Submitting report...`\n    );\n\n    const response = await this._send('model-centric/report', {\n      worker_id: workerId,\n      request_key: requestKey,\n      diff,\n    });\n\n    return response;\n  }\n\n  async getConnectionSpeed(workerId) {\n    const speedTest = new SpeedTest({\n      downloadUrl:\n        this.httpUrl +\n        '/model-centric/speed-test?worker_id=' +\n        encodeURIComponent(workerId) +\n        '&random=' +\n        Math.random(),\n      uploadUrl:\n        this.httpUrl +\n        '/model-centric/speed-test?worker_id=' +\n        encodeURIComponent(workerId) +\n        '&random=' +\n        Math.random(),\n      pingUrl:\n        this.httpUrl +\n        '/model-centric/speed-test?is_ping=1&worker_id=' +\n        encodeURIComponent(workerId) +\n        '&random=' +\n        Math.random(),\n    });\n\n    const ping = await speedTest.getPing();\n    // Start tests altogether\n    const [download, upload] = await Promise.all([\n      speedTest.getDownloadSpeed(),\n      speedTest.getUploadSpeed(),\n    ]);\n\n    return {\n      ping,\n      download,\n      upload,\n    };\n  }\n\n  async _send(path, data) {\n    const response =\n      this.transport === 'ws'\n        ? await this._sendWs(path, data)\n        : await this._sendHttp(path, data);\n\n    if (response.error) {\n      throw new Error(response.error);\n    }\n\n    return response;\n  }\n\n  async _sendHttp(path, data, type = 'json') {\n    const method = HTTP_PATH_VERB[path] || 'GET';\n    let response;\n\n    if (method === 'GET') {\n      const query = Object.keys(data)\n        .map((k) => encodeURIComponent(k) + '=' + encodeURIComponent(data[k]))\n        .join('&');\n      response = await fetch(this.httpUrl + '/' + path + '?' + query, {\n        method: 'GET',\n        mode: 'cors',\n      });\n    } else {\n      response = await fetch(this.httpUrl + '/' + path, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n    }\n\n    if (!response.ok) {\n      let error = `${response.status} ${response.statusText}`;\n      try {\n        let res = await response.json();\n        if (res.error) {\n          error = res.error;\n        }\n      } catch (e) {\n        // not JSON\n      }\n      throw new GridError(error);\n    }\n\n    return response[type]();\n  }\n\n  async _sendWs(type, data) {\n    if (!this.ws) {\n      await this._initWs();\n    }\n    const request_id = base64Encode(await createRandomBuffer(32));\n    const message = { request_id, type, data };\n    this.logger.log('Sending WS message', request_id, type);\n\n    return new Promise((resolve, reject) => {\n      this.ws.send(JSON.stringify(message));\n\n      const cleanUp = () => {\n        // Remove all handlers related to message.\n        delete this.wsMessages[request_id];\n        this.observer.unsubscribe('ws-error', onError);\n        this.observer.unsubscribe('ws-close', onClose);\n        clearTimeout(timeoutHandler);\n      };\n\n      const timeoutHandler = setTimeout(() => {\n        cleanUp();\n        reject(new Error('Response timeout'));\n      }, this.responseTimeout);\n\n      const onMessage = (data) => {\n        cleanUp();\n        resolve(data.data);\n      };\n\n      const onError = (event) => {\n        cleanUp();\n        reject(new Error(event));\n      };\n\n      const onClose = () => {\n        cleanUp();\n        reject(new Error('WS connection closed'));\n      };\n\n      // Save response handler under specific request_id.\n      // We expect same request_id in the response.\n      this.wsMessages[request_id] = onMessage;\n\n      // Other events while waiting for response.\n      this.observer.subscribe('ws-error', onError);\n      this.observer.subscribe('ws-close', onClose);\n    });\n  }\n\n  async _initWs() {\n    return new Promise((resolve, reject) => {\n      const ws = new WebSocket(this.wsUrl);\n      ws.onopen = () => {\n        // setup handlers\n        ws.onerror = this._handleWsError;\n        ws.onclose = this._handleWsClose;\n        ws.onmessage = this._handleWsMessage;\n        this.ws = ws;\n        resolve();\n      };\n      ws.onerror = (event) => {\n        // Couldn't connect and error is returned\n        this._handleWsError(event);\n        reject(new Error(event));\n      };\n      ws.onclose = (event) => {\n        // Couldn't connect and connection closed\n        this._handleWsClose(event);\n        reject(new Error('WS connection closed during connect'));\n      };\n    });\n  }\n\n  _handleWsMessage(event) {\n    this.logger.log('Received message', event.data);\n    let data;\n    try {\n      data = JSON.parse(event.data);\n    } catch (e) {\n      this.logger.log('Message is not valid JSON!');\n    }\n\n    // Call response handler, it should be stored under request_id.\n    const request_id = data.request_id;\n    if (request_id && Object.hasOwnProperty.call(this.wsMessages, request_id)) {\n      const handler = this.wsMessages[request_id];\n      handler(data);\n    } else {\n      this.logger.log('Message with unknown request_id');\n    }\n  }\n\n  _handleWsError(event) {\n    this.logger.log('WS connection error', event);\n    this.observer.broadcast('ws-error', event);\n    this.ws = null;\n  }\n\n  _handleWsClose(event) {\n    this.logger.log('WS connection closed', event);\n    this.observer.broadcast('ws-close', event);\n    this.ws = null;\n  }\n}\n","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n// global object reference\nutil.global = typeof window !== \"undefined\" && window\n           || typeof global !== \"undefined\" && global\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n * @const\n */\nutil.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = util.Buffer\n    ? function create_buffer_setup() {\n        return (Writer.create = function create_buffer() {\n            return new BufferWriter();\n        })();\n    }\n    /* istanbul ignore next */\n    : function create_array() {\n        return new Writer();\n    };\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\nvar Buffer = util.Buffer;\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Buffer} Buffer\n */\nBufferWriter.alloc = function alloc_buffer(size) {\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\n};\n\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\n    ? function writeBytesBuffer_set(val, buf, pos) {\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n                           // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytesBuffer_copy(val, buf, pos) {\n        if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n        else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n    };\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else\n        buf.utf8Write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = util.Buffer\n    ? function create_buffer_setup(buffer) {\n        return (Reader.create = function create_buffer(buffer) {\n            return util.Buffer.isBuffer(buffer)\n                ? new BufferReader(buffer)\n                /* istanbul ignore next */\n                : create_array(buffer);\n        })(buffer);\n    }\n    /* istanbul ignore next */\n    : create_array;\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\n/* istanbul ignore else */\nif (util.Buffer)\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.Reader._configure(protobuf.BufferReader);\n    protobuf.util._configure();\n}\n\n// Set up buffer utility according to the environment\nprotobuf.Writer._configure(protobuf.BufferWriter);\nconfigure();\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.syft_proto = (function() {\n\n    /**\n     * Namespace syft_proto.\n     * @exports syft_proto\n     * @namespace\n     */\n    var syft_proto = {};\n\n    syft_proto.execution = (function() {\n\n        /**\n         * Namespace execution.\n         * @memberof syft_proto\n         * @namespace\n         */\n        var execution = {};\n\n        execution.v1 = (function() {\n\n            /**\n             * Namespace v1.\n             * @memberof syft_proto.execution\n             * @namespace\n             */\n            var v1 = {};\n\n            v1.CommunicationAction = (function() {\n\n                /**\n                 * Properties of a CommunicationAction.\n                 * @memberof syft_proto.execution.v1\n                 * @interface ICommunicationAction\n                 * @property {string|null} [command] CommunicationAction command\n                 * @property {syft_proto.types.syft.v1.IId|null} [target_id] CommunicationAction target_id\n                 * @property {syft_proto.generic.pointers.v1.IPointerTensor|null} [target_pointer] CommunicationAction target_pointer\n                 * @property {syft_proto.execution.v1.IPlaceholderId|null} [target_placeholder_id] CommunicationAction target_placeholder_id\n                 * @property {syft_proto.types.torch.v1.ITorchTensor|null} [target_tensor] CommunicationAction target_tensor\n                 * @property {Array.<syft_proto.types.syft.v1.IArg>|null} [args] CommunicationAction args\n                 * @property {Object.<string,syft_proto.types.syft.v1.IArg>|null} [kwargs] CommunicationAction kwargs\n                 * @property {Array.<syft_proto.types.syft.v1.IId>|null} [return_ids] CommunicationAction return_ids\n                 * @property {Array.<syft_proto.execution.v1.IPlaceholderId>|null} [return_placeholder_ids] CommunicationAction return_placeholder_ids\n                 */\n\n                /**\n                 * Constructs a new CommunicationAction.\n                 * @memberof syft_proto.execution.v1\n                 * @classdesc Represents a CommunicationAction.\n                 * @implements ICommunicationAction\n                 * @constructor\n                 * @param {syft_proto.execution.v1.ICommunicationAction=} [properties] Properties to set\n                 */\n                function CommunicationAction(properties) {\n                    this.args = [];\n                    this.kwargs = {};\n                    this.return_ids = [];\n                    this.return_placeholder_ids = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * CommunicationAction command.\n                 * @member {string} command\n                 * @memberof syft_proto.execution.v1.CommunicationAction\n                 * @instance\n                 */\n                CommunicationAction.prototype.command = \"\";\n\n                /**\n                 * CommunicationAction target_id.\n                 * @member {syft_proto.types.syft.v1.IId|null|undefined} target_id\n                 * @memberof syft_proto.execution.v1.CommunicationAction\n                 * @instance\n                 */\n                CommunicationAction.prototype.target_id = null;\n\n                /**\n                 * CommunicationAction target_pointer.\n                 * @member {syft_proto.generic.pointers.v1.IPointerTensor|null|undefined} target_pointer\n                 * @memberof syft_proto.execution.v1.CommunicationAction\n                 * @instance\n                 */\n                CommunicationAction.prototype.target_pointer = null;\n\n                /**\n                 * CommunicationAction target_placeholder_id.\n                 * @member {syft_proto.execution.v1.IPlaceholderId|null|undefined} target_placeholder_id\n                 * @memberof syft_proto.execution.v1.CommunicationAction\n                 * @instance\n                 */\n                CommunicationAction.prototype.target_placeholder_id = null;\n\n                /**\n                 * CommunicationAction target_tensor.\n                 * @member {syft_proto.types.torch.v1.ITorchTensor|null|undefined} target_tensor\n                 * @memberof syft_proto.execution.v1.CommunicationAction\n                 * @instance\n                 */\n                CommunicationAction.prototype.target_tensor = null;\n\n                /**\n                 * CommunicationAction args.\n                 * @member {Array.<syft_proto.types.syft.v1.IArg>} args\n                 * @memberof syft_proto.execution.v1.CommunicationAction\n                 * @instance\n                 */\n                CommunicationAction.prototype.args = $util.emptyArray;\n\n                /**\n                 * CommunicationAction kwargs.\n                 * @member {Object.<string,syft_proto.types.syft.v1.IArg>} kwargs\n                 * @memberof syft_proto.execution.v1.CommunicationAction\n                 * @instance\n                 */\n                CommunicationAction.prototype.kwargs = $util.emptyObject;\n\n                /**\n                 * CommunicationAction return_ids.\n                 * @member {Array.<syft_proto.types.syft.v1.IId>} return_ids\n                 * @memberof syft_proto.execution.v1.CommunicationAction\n                 * @instance\n                 */\n                CommunicationAction.prototype.return_ids = $util.emptyArray;\n\n                /**\n                 * CommunicationAction return_placeholder_ids.\n                 * @member {Array.<syft_proto.execution.v1.IPlaceholderId>} return_placeholder_ids\n                 * @memberof syft_proto.execution.v1.CommunicationAction\n                 * @instance\n                 */\n                CommunicationAction.prototype.return_placeholder_ids = $util.emptyArray;\n\n                // OneOf field names bound to virtual getters and setters\n                var $oneOfFields;\n\n                /**\n                 * CommunicationAction target.\n                 * @member {\"target_id\"|\"target_pointer\"|\"target_placeholder_id\"|\"target_tensor\"|undefined} target\n                 * @memberof syft_proto.execution.v1.CommunicationAction\n                 * @instance\n                 */\n                Object.defineProperty(CommunicationAction.prototype, \"target\", {\n                    get: $util.oneOfGetter($oneOfFields = [\"target_id\", \"target_pointer\", \"target_placeholder_id\", \"target_tensor\"]),\n                    set: $util.oneOfSetter($oneOfFields)\n                });\n\n                /**\n                 * Creates a new CommunicationAction instance using the specified properties.\n                 * @function create\n                 * @memberof syft_proto.execution.v1.CommunicationAction\n                 * @static\n                 * @param {syft_proto.execution.v1.ICommunicationAction=} [properties] Properties to set\n                 * @returns {syft_proto.execution.v1.CommunicationAction} CommunicationAction instance\n                 */\n                CommunicationAction.create = function create(properties) {\n                    return new CommunicationAction(properties);\n                };\n\n                /**\n                 * Encodes the specified CommunicationAction message. Does not implicitly {@link syft_proto.execution.v1.CommunicationAction.verify|verify} messages.\n                 * @function encode\n                 * @memberof syft_proto.execution.v1.CommunicationAction\n                 * @static\n                 * @param {syft_proto.execution.v1.ICommunicationAction} message CommunicationAction message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommunicationAction.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.command != null && message.hasOwnProperty(\"command\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.command);\n                    if (message.target_pointer != null && message.hasOwnProperty(\"target_pointer\"))\n                        $root.syft_proto.generic.pointers.v1.PointerTensor.encode(message.target_pointer, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    if (message.target_placeholder_id != null && message.hasOwnProperty(\"target_placeholder_id\"))\n                        $root.syft_proto.execution.v1.PlaceholderId.encode(message.target_placeholder_id, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                    if (message.target_tensor != null && message.hasOwnProperty(\"target_tensor\"))\n                        $root.syft_proto.types.torch.v1.TorchTensor.encode(message.target_tensor, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                    if (message.args != null && message.args.length)\n                        for (var i = 0; i < message.args.length; ++i)\n                            $root.syft_proto.types.syft.v1.Arg.encode(message.args[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                    if (message.kwargs != null && message.hasOwnProperty(\"kwargs\"))\n                        for (var keys = Object.keys(message.kwargs), i = 0; i < keys.length; ++i) {\n                            writer.uint32(/* id 6, wireType 2 =*/50).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                            $root.syft_proto.types.syft.v1.Arg.encode(message.kwargs[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n                        }\n                    if (message.return_ids != null && message.return_ids.length)\n                        for (var i = 0; i < message.return_ids.length; ++i)\n                            $root.syft_proto.types.syft.v1.Id.encode(message.return_ids[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                    if (message.return_placeholder_ids != null && message.return_placeholder_ids.length)\n                        for (var i = 0; i < message.return_placeholder_ids.length; ++i)\n                            $root.syft_proto.execution.v1.PlaceholderId.encode(message.return_placeholder_ids[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n                    if (message.target_id != null && message.hasOwnProperty(\"target_id\"))\n                        $root.syft_proto.types.syft.v1.Id.encode(message.target_id, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified CommunicationAction message, length delimited. Does not implicitly {@link syft_proto.execution.v1.CommunicationAction.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof syft_proto.execution.v1.CommunicationAction\n                 * @static\n                 * @param {syft_proto.execution.v1.ICommunicationAction} message CommunicationAction message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                CommunicationAction.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a CommunicationAction message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof syft_proto.execution.v1.CommunicationAction\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {syft_proto.execution.v1.CommunicationAction} CommunicationAction\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommunicationAction.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.execution.v1.CommunicationAction(), key;\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.command = reader.string();\n                            break;\n                        case 9:\n                            message.target_id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.target_pointer = $root.syft_proto.generic.pointers.v1.PointerTensor.decode(reader, reader.uint32());\n                            break;\n                        case 3:\n                            message.target_placeholder_id = $root.syft_proto.execution.v1.PlaceholderId.decode(reader, reader.uint32());\n                            break;\n                        case 4:\n                            message.target_tensor = $root.syft_proto.types.torch.v1.TorchTensor.decode(reader, reader.uint32());\n                            break;\n                        case 5:\n                            if (!(message.args && message.args.length))\n                                message.args = [];\n                            message.args.push($root.syft_proto.types.syft.v1.Arg.decode(reader, reader.uint32()));\n                            break;\n                        case 6:\n                            reader.skip().pos++;\n                            if (message.kwargs === $util.emptyObject)\n                                message.kwargs = {};\n                            key = reader.string();\n                            reader.pos++;\n                            message.kwargs[key] = $root.syft_proto.types.syft.v1.Arg.decode(reader, reader.uint32());\n                            break;\n                        case 7:\n                            if (!(message.return_ids && message.return_ids.length))\n                                message.return_ids = [];\n                            message.return_ids.push($root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32()));\n                            break;\n                        case 8:\n                            if (!(message.return_placeholder_ids && message.return_placeholder_ids.length))\n                                message.return_placeholder_ids = [];\n                            message.return_placeholder_ids.push($root.syft_proto.execution.v1.PlaceholderId.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a CommunicationAction message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof syft_proto.execution.v1.CommunicationAction\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {syft_proto.execution.v1.CommunicationAction} CommunicationAction\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                CommunicationAction.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a CommunicationAction message.\n                 * @function verify\n                 * @memberof syft_proto.execution.v1.CommunicationAction\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                CommunicationAction.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    var properties = {};\n                    if (message.command != null && message.hasOwnProperty(\"command\"))\n                        if (!$util.isString(message.command))\n                            return \"command: string expected\";\n                    if (message.target_id != null && message.hasOwnProperty(\"target_id\")) {\n                        properties.target = 1;\n                        {\n                            var error = $root.syft_proto.types.syft.v1.Id.verify(message.target_id);\n                            if (error)\n                                return \"target_id.\" + error;\n                        }\n                    }\n                    if (message.target_pointer != null && message.hasOwnProperty(\"target_pointer\")) {\n                        if (properties.target === 1)\n                            return \"target: multiple values\";\n                        properties.target = 1;\n                        {\n                            var error = $root.syft_proto.generic.pointers.v1.PointerTensor.verify(message.target_pointer);\n                            if (error)\n                                return \"target_pointer.\" + error;\n                        }\n                    }\n                    if (message.target_placeholder_id != null && message.hasOwnProperty(\"target_placeholder_id\")) {\n                        if (properties.target === 1)\n                            return \"target: multiple values\";\n                        properties.target = 1;\n                        {\n                            var error = $root.syft_proto.execution.v1.PlaceholderId.verify(message.target_placeholder_id);\n                            if (error)\n                                return \"target_placeholder_id.\" + error;\n                        }\n                    }\n                    if (message.target_tensor != null && message.hasOwnProperty(\"target_tensor\")) {\n                        if (properties.target === 1)\n                            return \"target: multiple values\";\n                        properties.target = 1;\n                        {\n                            var error = $root.syft_proto.types.torch.v1.TorchTensor.verify(message.target_tensor);\n                            if (error)\n                                return \"target_tensor.\" + error;\n                        }\n                    }\n                    if (message.args != null && message.hasOwnProperty(\"args\")) {\n                        if (!Array.isArray(message.args))\n                            return \"args: array expected\";\n                        for (var i = 0; i < message.args.length; ++i) {\n                            var error = $root.syft_proto.types.syft.v1.Arg.verify(message.args[i]);\n                            if (error)\n                                return \"args.\" + error;\n                        }\n                    }\n                    if (message.kwargs != null && message.hasOwnProperty(\"kwargs\")) {\n                        if (!$util.isObject(message.kwargs))\n                            return \"kwargs: object expected\";\n                        var key = Object.keys(message.kwargs);\n                        for (var i = 0; i < key.length; ++i) {\n                            var error = $root.syft_proto.types.syft.v1.Arg.verify(message.kwargs[key[i]]);\n                            if (error)\n                                return \"kwargs.\" + error;\n                        }\n                    }\n                    if (message.return_ids != null && message.hasOwnProperty(\"return_ids\")) {\n                        if (!Array.isArray(message.return_ids))\n                            return \"return_ids: array expected\";\n                        for (var i = 0; i < message.return_ids.length; ++i) {\n                            var error = $root.syft_proto.types.syft.v1.Id.verify(message.return_ids[i]);\n                            if (error)\n                                return \"return_ids.\" + error;\n                        }\n                    }\n                    if (message.return_placeholder_ids != null && message.hasOwnProperty(\"return_placeholder_ids\")) {\n                        if (!Array.isArray(message.return_placeholder_ids))\n                            return \"return_placeholder_ids: array expected\";\n                        for (var i = 0; i < message.return_placeholder_ids.length; ++i) {\n                            var error = $root.syft_proto.execution.v1.PlaceholderId.verify(message.return_placeholder_ids[i]);\n                            if (error)\n                                return \"return_placeholder_ids.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a CommunicationAction message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof syft_proto.execution.v1.CommunicationAction\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {syft_proto.execution.v1.CommunicationAction} CommunicationAction\n                 */\n                CommunicationAction.fromObject = function fromObject(object) {\n                    if (object instanceof $root.syft_proto.execution.v1.CommunicationAction)\n                        return object;\n                    var message = new $root.syft_proto.execution.v1.CommunicationAction();\n                    if (object.command != null)\n                        message.command = String(object.command);\n                    if (object.target_id != null) {\n                        if (typeof object.target_id !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.CommunicationAction.target_id: object expected\");\n                        message.target_id = $root.syft_proto.types.syft.v1.Id.fromObject(object.target_id);\n                    }\n                    if (object.target_pointer != null) {\n                        if (typeof object.target_pointer !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.CommunicationAction.target_pointer: object expected\");\n                        message.target_pointer = $root.syft_proto.generic.pointers.v1.PointerTensor.fromObject(object.target_pointer);\n                    }\n                    if (object.target_placeholder_id != null) {\n                        if (typeof object.target_placeholder_id !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.CommunicationAction.target_placeholder_id: object expected\");\n                        message.target_placeholder_id = $root.syft_proto.execution.v1.PlaceholderId.fromObject(object.target_placeholder_id);\n                    }\n                    if (object.target_tensor != null) {\n                        if (typeof object.target_tensor !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.CommunicationAction.target_tensor: object expected\");\n                        message.target_tensor = $root.syft_proto.types.torch.v1.TorchTensor.fromObject(object.target_tensor);\n                    }\n                    if (object.args) {\n                        if (!Array.isArray(object.args))\n                            throw TypeError(\".syft_proto.execution.v1.CommunicationAction.args: array expected\");\n                        message.args = [];\n                        for (var i = 0; i < object.args.length; ++i) {\n                            if (typeof object.args[i] !== \"object\")\n                                throw TypeError(\".syft_proto.execution.v1.CommunicationAction.args: object expected\");\n                            message.args[i] = $root.syft_proto.types.syft.v1.Arg.fromObject(object.args[i]);\n                        }\n                    }\n                    if (object.kwargs) {\n                        if (typeof object.kwargs !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.CommunicationAction.kwargs: object expected\");\n                        message.kwargs = {};\n                        for (var keys = Object.keys(object.kwargs), i = 0; i < keys.length; ++i) {\n                            if (typeof object.kwargs[keys[i]] !== \"object\")\n                                throw TypeError(\".syft_proto.execution.v1.CommunicationAction.kwargs: object expected\");\n                            message.kwargs[keys[i]] = $root.syft_proto.types.syft.v1.Arg.fromObject(object.kwargs[keys[i]]);\n                        }\n                    }\n                    if (object.return_ids) {\n                        if (!Array.isArray(object.return_ids))\n                            throw TypeError(\".syft_proto.execution.v1.CommunicationAction.return_ids: array expected\");\n                        message.return_ids = [];\n                        for (var i = 0; i < object.return_ids.length; ++i) {\n                            if (typeof object.return_ids[i] !== \"object\")\n                                throw TypeError(\".syft_proto.execution.v1.CommunicationAction.return_ids: object expected\");\n                            message.return_ids[i] = $root.syft_proto.types.syft.v1.Id.fromObject(object.return_ids[i]);\n                        }\n                    }\n                    if (object.return_placeholder_ids) {\n                        if (!Array.isArray(object.return_placeholder_ids))\n                            throw TypeError(\".syft_proto.execution.v1.CommunicationAction.return_placeholder_ids: array expected\");\n                        message.return_placeholder_ids = [];\n                        for (var i = 0; i < object.return_placeholder_ids.length; ++i) {\n                            if (typeof object.return_placeholder_ids[i] !== \"object\")\n                                throw TypeError(\".syft_proto.execution.v1.CommunicationAction.return_placeholder_ids: object expected\");\n                            message.return_placeholder_ids[i] = $root.syft_proto.execution.v1.PlaceholderId.fromObject(object.return_placeholder_ids[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a CommunicationAction message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof syft_proto.execution.v1.CommunicationAction\n                 * @static\n                 * @param {syft_proto.execution.v1.CommunicationAction} message CommunicationAction\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                CommunicationAction.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults) {\n                        object.args = [];\n                        object.return_ids = [];\n                        object.return_placeholder_ids = [];\n                    }\n                    if (options.objects || options.defaults)\n                        object.kwargs = {};\n                    if (options.defaults)\n                        object.command = \"\";\n                    if (message.command != null && message.hasOwnProperty(\"command\"))\n                        object.command = message.command;\n                    if (message.target_pointer != null && message.hasOwnProperty(\"target_pointer\")) {\n                        object.target_pointer = $root.syft_proto.generic.pointers.v1.PointerTensor.toObject(message.target_pointer, options);\n                        if (options.oneofs)\n                            object.target = \"target_pointer\";\n                    }\n                    if (message.target_placeholder_id != null && message.hasOwnProperty(\"target_placeholder_id\")) {\n                        object.target_placeholder_id = $root.syft_proto.execution.v1.PlaceholderId.toObject(message.target_placeholder_id, options);\n                        if (options.oneofs)\n                            object.target = \"target_placeholder_id\";\n                    }\n                    if (message.target_tensor != null && message.hasOwnProperty(\"target_tensor\")) {\n                        object.target_tensor = $root.syft_proto.types.torch.v1.TorchTensor.toObject(message.target_tensor, options);\n                        if (options.oneofs)\n                            object.target = \"target_tensor\";\n                    }\n                    if (message.args && message.args.length) {\n                        object.args = [];\n                        for (var j = 0; j < message.args.length; ++j)\n                            object.args[j] = $root.syft_proto.types.syft.v1.Arg.toObject(message.args[j], options);\n                    }\n                    var keys2;\n                    if (message.kwargs && (keys2 = Object.keys(message.kwargs)).length) {\n                        object.kwargs = {};\n                        for (var j = 0; j < keys2.length; ++j)\n                            object.kwargs[keys2[j]] = $root.syft_proto.types.syft.v1.Arg.toObject(message.kwargs[keys2[j]], options);\n                    }\n                    if (message.return_ids && message.return_ids.length) {\n                        object.return_ids = [];\n                        for (var j = 0; j < message.return_ids.length; ++j)\n                            object.return_ids[j] = $root.syft_proto.types.syft.v1.Id.toObject(message.return_ids[j], options);\n                    }\n                    if (message.return_placeholder_ids && message.return_placeholder_ids.length) {\n                        object.return_placeholder_ids = [];\n                        for (var j = 0; j < message.return_placeholder_ids.length; ++j)\n                            object.return_placeholder_ids[j] = $root.syft_proto.execution.v1.PlaceholderId.toObject(message.return_placeholder_ids[j], options);\n                    }\n                    if (message.target_id != null && message.hasOwnProperty(\"target_id\")) {\n                        object.target_id = $root.syft_proto.types.syft.v1.Id.toObject(message.target_id, options);\n                        if (options.oneofs)\n                            object.target = \"target_id\";\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this CommunicationAction to JSON.\n                 * @function toJSON\n                 * @memberof syft_proto.execution.v1.CommunicationAction\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                CommunicationAction.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return CommunicationAction;\n            })();\n\n            v1.PlaceholderId = (function() {\n\n                /**\n                 * Properties of a PlaceholderId.\n                 * @memberof syft_proto.execution.v1\n                 * @interface IPlaceholderId\n                 * @property {syft_proto.types.syft.v1.IId|null} [id] PlaceholderId id\n                 */\n\n                /**\n                 * Constructs a new PlaceholderId.\n                 * @memberof syft_proto.execution.v1\n                 * @classdesc Represents a PlaceholderId.\n                 * @implements IPlaceholderId\n                 * @constructor\n                 * @param {syft_proto.execution.v1.IPlaceholderId=} [properties] Properties to set\n                 */\n                function PlaceholderId(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * PlaceholderId id.\n                 * @member {syft_proto.types.syft.v1.IId|null|undefined} id\n                 * @memberof syft_proto.execution.v1.PlaceholderId\n                 * @instance\n                 */\n                PlaceholderId.prototype.id = null;\n\n                /**\n                 * Creates a new PlaceholderId instance using the specified properties.\n                 * @function create\n                 * @memberof syft_proto.execution.v1.PlaceholderId\n                 * @static\n                 * @param {syft_proto.execution.v1.IPlaceholderId=} [properties] Properties to set\n                 * @returns {syft_proto.execution.v1.PlaceholderId} PlaceholderId instance\n                 */\n                PlaceholderId.create = function create(properties) {\n                    return new PlaceholderId(properties);\n                };\n\n                /**\n                 * Encodes the specified PlaceholderId message. Does not implicitly {@link syft_proto.execution.v1.PlaceholderId.verify|verify} messages.\n                 * @function encode\n                 * @memberof syft_proto.execution.v1.PlaceholderId\n                 * @static\n                 * @param {syft_proto.execution.v1.IPlaceholderId} message PlaceholderId message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PlaceholderId.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        $root.syft_proto.types.syft.v1.Id.encode(message.id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified PlaceholderId message, length delimited. Does not implicitly {@link syft_proto.execution.v1.PlaceholderId.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof syft_proto.execution.v1.PlaceholderId\n                 * @static\n                 * @param {syft_proto.execution.v1.IPlaceholderId} message PlaceholderId message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PlaceholderId.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a PlaceholderId message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof syft_proto.execution.v1.PlaceholderId\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {syft_proto.execution.v1.PlaceholderId} PlaceholderId\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PlaceholderId.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.execution.v1.PlaceholderId();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a PlaceholderId message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof syft_proto.execution.v1.PlaceholderId\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {syft_proto.execution.v1.PlaceholderId} PlaceholderId\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PlaceholderId.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a PlaceholderId message.\n                 * @function verify\n                 * @memberof syft_proto.execution.v1.PlaceholderId\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                PlaceholderId.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.id != null && message.hasOwnProperty(\"id\")) {\n                        var error = $root.syft_proto.types.syft.v1.Id.verify(message.id);\n                        if (error)\n                            return \"id.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a PlaceholderId message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof syft_proto.execution.v1.PlaceholderId\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {syft_proto.execution.v1.PlaceholderId} PlaceholderId\n                 */\n                PlaceholderId.fromObject = function fromObject(object) {\n                    if (object instanceof $root.syft_proto.execution.v1.PlaceholderId)\n                        return object;\n                    var message = new $root.syft_proto.execution.v1.PlaceholderId();\n                    if (object.id != null) {\n                        if (typeof object.id !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.PlaceholderId.id: object expected\");\n                        message.id = $root.syft_proto.types.syft.v1.Id.fromObject(object.id);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a PlaceholderId message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof syft_proto.execution.v1.PlaceholderId\n                 * @static\n                 * @param {syft_proto.execution.v1.PlaceholderId} message PlaceholderId\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                PlaceholderId.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.id = null;\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        object.id = $root.syft_proto.types.syft.v1.Id.toObject(message.id, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this PlaceholderId to JSON.\n                 * @function toJSON\n                 * @memberof syft_proto.execution.v1.PlaceholderId\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                PlaceholderId.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return PlaceholderId;\n            })();\n\n            v1.Placeholder = (function() {\n\n                /**\n                 * Properties of a Placeholder.\n                 * @memberof syft_proto.execution.v1\n                 * @interface IPlaceholder\n                 * @property {syft_proto.types.torch.v1.ITorchTensor|null} [child_tensor] Placeholder child_tensor\n                 * @property {syft_proto.types.torch.v1.IParameter|null} [child_parameter] Placeholder child_parameter\n                 * @property {syft_proto.types.syft.v1.IId|null} [id] Placeholder id\n                 * @property {Array.<string>|null} [tags] Placeholder tags\n                 * @property {string|null} [description] Placeholder description\n                 * @property {syft_proto.types.syft.v1.IShape|null} [expected_shape] Placeholder expected_shape\n                 */\n\n                /**\n                 * Constructs a new Placeholder.\n                 * @memberof syft_proto.execution.v1\n                 * @classdesc Represents a Placeholder.\n                 * @implements IPlaceholder\n                 * @constructor\n                 * @param {syft_proto.execution.v1.IPlaceholder=} [properties] Properties to set\n                 */\n                function Placeholder(properties) {\n                    this.tags = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * Placeholder child_tensor.\n                 * @member {syft_proto.types.torch.v1.ITorchTensor|null|undefined} child_tensor\n                 * @memberof syft_proto.execution.v1.Placeholder\n                 * @instance\n                 */\n                Placeholder.prototype.child_tensor = null;\n\n                /**\n                 * Placeholder child_parameter.\n                 * @member {syft_proto.types.torch.v1.IParameter|null|undefined} child_parameter\n                 * @memberof syft_proto.execution.v1.Placeholder\n                 * @instance\n                 */\n                Placeholder.prototype.child_parameter = null;\n\n                /**\n                 * Placeholder id.\n                 * @member {syft_proto.types.syft.v1.IId|null|undefined} id\n                 * @memberof syft_proto.execution.v1.Placeholder\n                 * @instance\n                 */\n                Placeholder.prototype.id = null;\n\n                /**\n                 * Placeholder tags.\n                 * @member {Array.<string>} tags\n                 * @memberof syft_proto.execution.v1.Placeholder\n                 * @instance\n                 */\n                Placeholder.prototype.tags = $util.emptyArray;\n\n                /**\n                 * Placeholder description.\n                 * @member {string} description\n                 * @memberof syft_proto.execution.v1.Placeholder\n                 * @instance\n                 */\n                Placeholder.prototype.description = \"\";\n\n                /**\n                 * Placeholder expected_shape.\n                 * @member {syft_proto.types.syft.v1.IShape|null|undefined} expected_shape\n                 * @memberof syft_proto.execution.v1.Placeholder\n                 * @instance\n                 */\n                Placeholder.prototype.expected_shape = null;\n\n                // OneOf field names bound to virtual getters and setters\n                var $oneOfFields;\n\n                /**\n                 * Placeholder child.\n                 * @member {\"child_tensor\"|\"child_parameter\"|undefined} child\n                 * @memberof syft_proto.execution.v1.Placeholder\n                 * @instance\n                 */\n                Object.defineProperty(Placeholder.prototype, \"child\", {\n                    get: $util.oneOfGetter($oneOfFields = [\"child_tensor\", \"child_parameter\"]),\n                    set: $util.oneOfSetter($oneOfFields)\n                });\n\n                /**\n                 * Creates a new Placeholder instance using the specified properties.\n                 * @function create\n                 * @memberof syft_proto.execution.v1.Placeholder\n                 * @static\n                 * @param {syft_proto.execution.v1.IPlaceholder=} [properties] Properties to set\n                 * @returns {syft_proto.execution.v1.Placeholder} Placeholder instance\n                 */\n                Placeholder.create = function create(properties) {\n                    return new Placeholder(properties);\n                };\n\n                /**\n                 * Encodes the specified Placeholder message. Does not implicitly {@link syft_proto.execution.v1.Placeholder.verify|verify} messages.\n                 * @function encode\n                 * @memberof syft_proto.execution.v1.Placeholder\n                 * @static\n                 * @param {syft_proto.execution.v1.IPlaceholder} message Placeholder message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Placeholder.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.child_tensor != null && message.hasOwnProperty(\"child_tensor\"))\n                        $root.syft_proto.types.torch.v1.TorchTensor.encode(message.child_tensor, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.child_parameter != null && message.hasOwnProperty(\"child_parameter\"))\n                        $root.syft_proto.types.torch.v1.Parameter.encode(message.child_parameter, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        $root.syft_proto.types.syft.v1.Id.encode(message.id, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                    if (message.tags != null && message.tags.length)\n                        for (var i = 0; i < message.tags.length; ++i)\n                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.tags[i]);\n                    if (message.description != null && message.hasOwnProperty(\"description\"))\n                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.description);\n                    if (message.expected_shape != null && message.hasOwnProperty(\"expected_shape\"))\n                        $root.syft_proto.types.syft.v1.Shape.encode(message.expected_shape, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified Placeholder message, length delimited. Does not implicitly {@link syft_proto.execution.v1.Placeholder.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof syft_proto.execution.v1.Placeholder\n                 * @static\n                 * @param {syft_proto.execution.v1.IPlaceholder} message Placeholder message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Placeholder.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a Placeholder message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof syft_proto.execution.v1.Placeholder\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {syft_proto.execution.v1.Placeholder} Placeholder\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Placeholder.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.execution.v1.Placeholder();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.child_tensor = $root.syft_proto.types.torch.v1.TorchTensor.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.child_parameter = $root.syft_proto.types.torch.v1.Parameter.decode(reader, reader.uint32());\n                            break;\n                        case 3:\n                            message.id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                            break;\n                        case 4:\n                            if (!(message.tags && message.tags.length))\n                                message.tags = [];\n                            message.tags.push(reader.string());\n                            break;\n                        case 5:\n                            message.description = reader.string();\n                            break;\n                        case 6:\n                            message.expected_shape = $root.syft_proto.types.syft.v1.Shape.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a Placeholder message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof syft_proto.execution.v1.Placeholder\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {syft_proto.execution.v1.Placeholder} Placeholder\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Placeholder.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a Placeholder message.\n                 * @function verify\n                 * @memberof syft_proto.execution.v1.Placeholder\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                Placeholder.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    var properties = {};\n                    if (message.child_tensor != null && message.hasOwnProperty(\"child_tensor\")) {\n                        properties.child = 1;\n                        {\n                            var error = $root.syft_proto.types.torch.v1.TorchTensor.verify(message.child_tensor);\n                            if (error)\n                                return \"child_tensor.\" + error;\n                        }\n                    }\n                    if (message.child_parameter != null && message.hasOwnProperty(\"child_parameter\")) {\n                        if (properties.child === 1)\n                            return \"child: multiple values\";\n                        properties.child = 1;\n                        {\n                            var error = $root.syft_proto.types.torch.v1.Parameter.verify(message.child_parameter);\n                            if (error)\n                                return \"child_parameter.\" + error;\n                        }\n                    }\n                    if (message.id != null && message.hasOwnProperty(\"id\")) {\n                        var error = $root.syft_proto.types.syft.v1.Id.verify(message.id);\n                        if (error)\n                            return \"id.\" + error;\n                    }\n                    if (message.tags != null && message.hasOwnProperty(\"tags\")) {\n                        if (!Array.isArray(message.tags))\n                            return \"tags: array expected\";\n                        for (var i = 0; i < message.tags.length; ++i)\n                            if (!$util.isString(message.tags[i]))\n                                return \"tags: string[] expected\";\n                    }\n                    if (message.description != null && message.hasOwnProperty(\"description\"))\n                        if (!$util.isString(message.description))\n                            return \"description: string expected\";\n                    if (message.expected_shape != null && message.hasOwnProperty(\"expected_shape\")) {\n                        var error = $root.syft_proto.types.syft.v1.Shape.verify(message.expected_shape);\n                        if (error)\n                            return \"expected_shape.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a Placeholder message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof syft_proto.execution.v1.Placeholder\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {syft_proto.execution.v1.Placeholder} Placeholder\n                 */\n                Placeholder.fromObject = function fromObject(object) {\n                    if (object instanceof $root.syft_proto.execution.v1.Placeholder)\n                        return object;\n                    var message = new $root.syft_proto.execution.v1.Placeholder();\n                    if (object.child_tensor != null) {\n                        if (typeof object.child_tensor !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.Placeholder.child_tensor: object expected\");\n                        message.child_tensor = $root.syft_proto.types.torch.v1.TorchTensor.fromObject(object.child_tensor);\n                    }\n                    if (object.child_parameter != null) {\n                        if (typeof object.child_parameter !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.Placeholder.child_parameter: object expected\");\n                        message.child_parameter = $root.syft_proto.types.torch.v1.Parameter.fromObject(object.child_parameter);\n                    }\n                    if (object.id != null) {\n                        if (typeof object.id !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.Placeholder.id: object expected\");\n                        message.id = $root.syft_proto.types.syft.v1.Id.fromObject(object.id);\n                    }\n                    if (object.tags) {\n                        if (!Array.isArray(object.tags))\n                            throw TypeError(\".syft_proto.execution.v1.Placeholder.tags: array expected\");\n                        message.tags = [];\n                        for (var i = 0; i < object.tags.length; ++i)\n                            message.tags[i] = String(object.tags[i]);\n                    }\n                    if (object.description != null)\n                        message.description = String(object.description);\n                    if (object.expected_shape != null) {\n                        if (typeof object.expected_shape !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.Placeholder.expected_shape: object expected\");\n                        message.expected_shape = $root.syft_proto.types.syft.v1.Shape.fromObject(object.expected_shape);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a Placeholder message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof syft_proto.execution.v1.Placeholder\n                 * @static\n                 * @param {syft_proto.execution.v1.Placeholder} message Placeholder\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                Placeholder.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.tags = [];\n                    if (options.defaults) {\n                        object.id = null;\n                        object.description = \"\";\n                        object.expected_shape = null;\n                    }\n                    if (message.child_tensor != null && message.hasOwnProperty(\"child_tensor\")) {\n                        object.child_tensor = $root.syft_proto.types.torch.v1.TorchTensor.toObject(message.child_tensor, options);\n                        if (options.oneofs)\n                            object.child = \"child_tensor\";\n                    }\n                    if (message.child_parameter != null && message.hasOwnProperty(\"child_parameter\")) {\n                        object.child_parameter = $root.syft_proto.types.torch.v1.Parameter.toObject(message.child_parameter, options);\n                        if (options.oneofs)\n                            object.child = \"child_parameter\";\n                    }\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        object.id = $root.syft_proto.types.syft.v1.Id.toObject(message.id, options);\n                    if (message.tags && message.tags.length) {\n                        object.tags = [];\n                        for (var j = 0; j < message.tags.length; ++j)\n                            object.tags[j] = message.tags[j];\n                    }\n                    if (message.description != null && message.hasOwnProperty(\"description\"))\n                        object.description = message.description;\n                    if (message.expected_shape != null && message.hasOwnProperty(\"expected_shape\"))\n                        object.expected_shape = $root.syft_proto.types.syft.v1.Shape.toObject(message.expected_shape, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this Placeholder to JSON.\n                 * @function toJSON\n                 * @memberof syft_proto.execution.v1.Placeholder\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                Placeholder.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return Placeholder;\n            })();\n\n            v1.ComputationAction = (function() {\n\n                /**\n                 * Properties of a ComputationAction.\n                 * @memberof syft_proto.execution.v1\n                 * @interface IComputationAction\n                 * @property {string|null} [command] ComputationAction command\n                 * @property {syft_proto.types.syft.v1.IId|null} [target_id] ComputationAction target_id\n                 * @property {syft_proto.generic.pointers.v1.IPointerTensor|null} [target_pointer] ComputationAction target_pointer\n                 * @property {syft_proto.execution.v1.IPlaceholderId|null} [target_placeholder_id] ComputationAction target_placeholder_id\n                 * @property {syft_proto.types.torch.v1.ITorchTensor|null} [target_tensor] ComputationAction target_tensor\n                 * @property {Array.<syft_proto.types.syft.v1.IArg>|null} [args] ComputationAction args\n                 * @property {Object.<string,syft_proto.types.syft.v1.IArg>|null} [kwargs] ComputationAction kwargs\n                 * @property {Array.<syft_proto.types.syft.v1.IId>|null} [return_ids] ComputationAction return_ids\n                 * @property {Array.<syft_proto.execution.v1.IPlaceholderId>|null} [return_placeholder_ids] ComputationAction return_placeholder_ids\n                 */\n\n                /**\n                 * Constructs a new ComputationAction.\n                 * @memberof syft_proto.execution.v1\n                 * @classdesc Represents a ComputationAction.\n                 * @implements IComputationAction\n                 * @constructor\n                 * @param {syft_proto.execution.v1.IComputationAction=} [properties] Properties to set\n                 */\n                function ComputationAction(properties) {\n                    this.args = [];\n                    this.kwargs = {};\n                    this.return_ids = [];\n                    this.return_placeholder_ids = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * ComputationAction command.\n                 * @member {string} command\n                 * @memberof syft_proto.execution.v1.ComputationAction\n                 * @instance\n                 */\n                ComputationAction.prototype.command = \"\";\n\n                /**\n                 * ComputationAction target_id.\n                 * @member {syft_proto.types.syft.v1.IId|null|undefined} target_id\n                 * @memberof syft_proto.execution.v1.ComputationAction\n                 * @instance\n                 */\n                ComputationAction.prototype.target_id = null;\n\n                /**\n                 * ComputationAction target_pointer.\n                 * @member {syft_proto.generic.pointers.v1.IPointerTensor|null|undefined} target_pointer\n                 * @memberof syft_proto.execution.v1.ComputationAction\n                 * @instance\n                 */\n                ComputationAction.prototype.target_pointer = null;\n\n                /**\n                 * ComputationAction target_placeholder_id.\n                 * @member {syft_proto.execution.v1.IPlaceholderId|null|undefined} target_placeholder_id\n                 * @memberof syft_proto.execution.v1.ComputationAction\n                 * @instance\n                 */\n                ComputationAction.prototype.target_placeholder_id = null;\n\n                /**\n                 * ComputationAction target_tensor.\n                 * @member {syft_proto.types.torch.v1.ITorchTensor|null|undefined} target_tensor\n                 * @memberof syft_proto.execution.v1.ComputationAction\n                 * @instance\n                 */\n                ComputationAction.prototype.target_tensor = null;\n\n                /**\n                 * ComputationAction args.\n                 * @member {Array.<syft_proto.types.syft.v1.IArg>} args\n                 * @memberof syft_proto.execution.v1.ComputationAction\n                 * @instance\n                 */\n                ComputationAction.prototype.args = $util.emptyArray;\n\n                /**\n                 * ComputationAction kwargs.\n                 * @member {Object.<string,syft_proto.types.syft.v1.IArg>} kwargs\n                 * @memberof syft_proto.execution.v1.ComputationAction\n                 * @instance\n                 */\n                ComputationAction.prototype.kwargs = $util.emptyObject;\n\n                /**\n                 * ComputationAction return_ids.\n                 * @member {Array.<syft_proto.types.syft.v1.IId>} return_ids\n                 * @memberof syft_proto.execution.v1.ComputationAction\n                 * @instance\n                 */\n                ComputationAction.prototype.return_ids = $util.emptyArray;\n\n                /**\n                 * ComputationAction return_placeholder_ids.\n                 * @member {Array.<syft_proto.execution.v1.IPlaceholderId>} return_placeholder_ids\n                 * @memberof syft_proto.execution.v1.ComputationAction\n                 * @instance\n                 */\n                ComputationAction.prototype.return_placeholder_ids = $util.emptyArray;\n\n                // OneOf field names bound to virtual getters and setters\n                var $oneOfFields;\n\n                /**\n                 * ComputationAction target.\n                 * @member {\"target_id\"|\"target_pointer\"|\"target_placeholder_id\"|\"target_tensor\"|undefined} target\n                 * @memberof syft_proto.execution.v1.ComputationAction\n                 * @instance\n                 */\n                Object.defineProperty(ComputationAction.prototype, \"target\", {\n                    get: $util.oneOfGetter($oneOfFields = [\"target_id\", \"target_pointer\", \"target_placeholder_id\", \"target_tensor\"]),\n                    set: $util.oneOfSetter($oneOfFields)\n                });\n\n                /**\n                 * Creates a new ComputationAction instance using the specified properties.\n                 * @function create\n                 * @memberof syft_proto.execution.v1.ComputationAction\n                 * @static\n                 * @param {syft_proto.execution.v1.IComputationAction=} [properties] Properties to set\n                 * @returns {syft_proto.execution.v1.ComputationAction} ComputationAction instance\n                 */\n                ComputationAction.create = function create(properties) {\n                    return new ComputationAction(properties);\n                };\n\n                /**\n                 * Encodes the specified ComputationAction message. Does not implicitly {@link syft_proto.execution.v1.ComputationAction.verify|verify} messages.\n                 * @function encode\n                 * @memberof syft_proto.execution.v1.ComputationAction\n                 * @static\n                 * @param {syft_proto.execution.v1.IComputationAction} message ComputationAction message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ComputationAction.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.command != null && message.hasOwnProperty(\"command\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.command);\n                    if (message.target_pointer != null && message.hasOwnProperty(\"target_pointer\"))\n                        $root.syft_proto.generic.pointers.v1.PointerTensor.encode(message.target_pointer, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    if (message.target_placeholder_id != null && message.hasOwnProperty(\"target_placeholder_id\"))\n                        $root.syft_proto.execution.v1.PlaceholderId.encode(message.target_placeholder_id, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                    if (message.target_tensor != null && message.hasOwnProperty(\"target_tensor\"))\n                        $root.syft_proto.types.torch.v1.TorchTensor.encode(message.target_tensor, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                    if (message.args != null && message.args.length)\n                        for (var i = 0; i < message.args.length; ++i)\n                            $root.syft_proto.types.syft.v1.Arg.encode(message.args[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                    if (message.kwargs != null && message.hasOwnProperty(\"kwargs\"))\n                        for (var keys = Object.keys(message.kwargs), i = 0; i < keys.length; ++i) {\n                            writer.uint32(/* id 6, wireType 2 =*/50).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                            $root.syft_proto.types.syft.v1.Arg.encode(message.kwargs[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n                        }\n                    if (message.return_ids != null && message.return_ids.length)\n                        for (var i = 0; i < message.return_ids.length; ++i)\n                            $root.syft_proto.types.syft.v1.Id.encode(message.return_ids[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                    if (message.return_placeholder_ids != null && message.return_placeholder_ids.length)\n                        for (var i = 0; i < message.return_placeholder_ids.length; ++i)\n                            $root.syft_proto.execution.v1.PlaceholderId.encode(message.return_placeholder_ids[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n                    if (message.target_id != null && message.hasOwnProperty(\"target_id\"))\n                        $root.syft_proto.types.syft.v1.Id.encode(message.target_id, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified ComputationAction message, length delimited. Does not implicitly {@link syft_proto.execution.v1.ComputationAction.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof syft_proto.execution.v1.ComputationAction\n                 * @static\n                 * @param {syft_proto.execution.v1.IComputationAction} message ComputationAction message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ComputationAction.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a ComputationAction message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof syft_proto.execution.v1.ComputationAction\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {syft_proto.execution.v1.ComputationAction} ComputationAction\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ComputationAction.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.execution.v1.ComputationAction(), key;\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.command = reader.string();\n                            break;\n                        case 9:\n                            message.target_id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.target_pointer = $root.syft_proto.generic.pointers.v1.PointerTensor.decode(reader, reader.uint32());\n                            break;\n                        case 3:\n                            message.target_placeholder_id = $root.syft_proto.execution.v1.PlaceholderId.decode(reader, reader.uint32());\n                            break;\n                        case 4:\n                            message.target_tensor = $root.syft_proto.types.torch.v1.TorchTensor.decode(reader, reader.uint32());\n                            break;\n                        case 5:\n                            if (!(message.args && message.args.length))\n                                message.args = [];\n                            message.args.push($root.syft_proto.types.syft.v1.Arg.decode(reader, reader.uint32()));\n                            break;\n                        case 6:\n                            reader.skip().pos++;\n                            if (message.kwargs === $util.emptyObject)\n                                message.kwargs = {};\n                            key = reader.string();\n                            reader.pos++;\n                            message.kwargs[key] = $root.syft_proto.types.syft.v1.Arg.decode(reader, reader.uint32());\n                            break;\n                        case 7:\n                            if (!(message.return_ids && message.return_ids.length))\n                                message.return_ids = [];\n                            message.return_ids.push($root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32()));\n                            break;\n                        case 8:\n                            if (!(message.return_placeholder_ids && message.return_placeholder_ids.length))\n                                message.return_placeholder_ids = [];\n                            message.return_placeholder_ids.push($root.syft_proto.execution.v1.PlaceholderId.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a ComputationAction message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof syft_proto.execution.v1.ComputationAction\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {syft_proto.execution.v1.ComputationAction} ComputationAction\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ComputationAction.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a ComputationAction message.\n                 * @function verify\n                 * @memberof syft_proto.execution.v1.ComputationAction\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                ComputationAction.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    var properties = {};\n                    if (message.command != null && message.hasOwnProperty(\"command\"))\n                        if (!$util.isString(message.command))\n                            return \"command: string expected\";\n                    if (message.target_id != null && message.hasOwnProperty(\"target_id\")) {\n                        properties.target = 1;\n                        {\n                            var error = $root.syft_proto.types.syft.v1.Id.verify(message.target_id);\n                            if (error)\n                                return \"target_id.\" + error;\n                        }\n                    }\n                    if (message.target_pointer != null && message.hasOwnProperty(\"target_pointer\")) {\n                        if (properties.target === 1)\n                            return \"target: multiple values\";\n                        properties.target = 1;\n                        {\n                            var error = $root.syft_proto.generic.pointers.v1.PointerTensor.verify(message.target_pointer);\n                            if (error)\n                                return \"target_pointer.\" + error;\n                        }\n                    }\n                    if (message.target_placeholder_id != null && message.hasOwnProperty(\"target_placeholder_id\")) {\n                        if (properties.target === 1)\n                            return \"target: multiple values\";\n                        properties.target = 1;\n                        {\n                            var error = $root.syft_proto.execution.v1.PlaceholderId.verify(message.target_placeholder_id);\n                            if (error)\n                                return \"target_placeholder_id.\" + error;\n                        }\n                    }\n                    if (message.target_tensor != null && message.hasOwnProperty(\"target_tensor\")) {\n                        if (properties.target === 1)\n                            return \"target: multiple values\";\n                        properties.target = 1;\n                        {\n                            var error = $root.syft_proto.types.torch.v1.TorchTensor.verify(message.target_tensor);\n                            if (error)\n                                return \"target_tensor.\" + error;\n                        }\n                    }\n                    if (message.args != null && message.hasOwnProperty(\"args\")) {\n                        if (!Array.isArray(message.args))\n                            return \"args: array expected\";\n                        for (var i = 0; i < message.args.length; ++i) {\n                            var error = $root.syft_proto.types.syft.v1.Arg.verify(message.args[i]);\n                            if (error)\n                                return \"args.\" + error;\n                        }\n                    }\n                    if (message.kwargs != null && message.hasOwnProperty(\"kwargs\")) {\n                        if (!$util.isObject(message.kwargs))\n                            return \"kwargs: object expected\";\n                        var key = Object.keys(message.kwargs);\n                        for (var i = 0; i < key.length; ++i) {\n                            var error = $root.syft_proto.types.syft.v1.Arg.verify(message.kwargs[key[i]]);\n                            if (error)\n                                return \"kwargs.\" + error;\n                        }\n                    }\n                    if (message.return_ids != null && message.hasOwnProperty(\"return_ids\")) {\n                        if (!Array.isArray(message.return_ids))\n                            return \"return_ids: array expected\";\n                        for (var i = 0; i < message.return_ids.length; ++i) {\n                            var error = $root.syft_proto.types.syft.v1.Id.verify(message.return_ids[i]);\n                            if (error)\n                                return \"return_ids.\" + error;\n                        }\n                    }\n                    if (message.return_placeholder_ids != null && message.hasOwnProperty(\"return_placeholder_ids\")) {\n                        if (!Array.isArray(message.return_placeholder_ids))\n                            return \"return_placeholder_ids: array expected\";\n                        for (var i = 0; i < message.return_placeholder_ids.length; ++i) {\n                            var error = $root.syft_proto.execution.v1.PlaceholderId.verify(message.return_placeholder_ids[i]);\n                            if (error)\n                                return \"return_placeholder_ids.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a ComputationAction message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof syft_proto.execution.v1.ComputationAction\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {syft_proto.execution.v1.ComputationAction} ComputationAction\n                 */\n                ComputationAction.fromObject = function fromObject(object) {\n                    if (object instanceof $root.syft_proto.execution.v1.ComputationAction)\n                        return object;\n                    var message = new $root.syft_proto.execution.v1.ComputationAction();\n                    if (object.command != null)\n                        message.command = String(object.command);\n                    if (object.target_id != null) {\n                        if (typeof object.target_id !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.ComputationAction.target_id: object expected\");\n                        message.target_id = $root.syft_proto.types.syft.v1.Id.fromObject(object.target_id);\n                    }\n                    if (object.target_pointer != null) {\n                        if (typeof object.target_pointer !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.ComputationAction.target_pointer: object expected\");\n                        message.target_pointer = $root.syft_proto.generic.pointers.v1.PointerTensor.fromObject(object.target_pointer);\n                    }\n                    if (object.target_placeholder_id != null) {\n                        if (typeof object.target_placeholder_id !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.ComputationAction.target_placeholder_id: object expected\");\n                        message.target_placeholder_id = $root.syft_proto.execution.v1.PlaceholderId.fromObject(object.target_placeholder_id);\n                    }\n                    if (object.target_tensor != null) {\n                        if (typeof object.target_tensor !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.ComputationAction.target_tensor: object expected\");\n                        message.target_tensor = $root.syft_proto.types.torch.v1.TorchTensor.fromObject(object.target_tensor);\n                    }\n                    if (object.args) {\n                        if (!Array.isArray(object.args))\n                            throw TypeError(\".syft_proto.execution.v1.ComputationAction.args: array expected\");\n                        message.args = [];\n                        for (var i = 0; i < object.args.length; ++i) {\n                            if (typeof object.args[i] !== \"object\")\n                                throw TypeError(\".syft_proto.execution.v1.ComputationAction.args: object expected\");\n                            message.args[i] = $root.syft_proto.types.syft.v1.Arg.fromObject(object.args[i]);\n                        }\n                    }\n                    if (object.kwargs) {\n                        if (typeof object.kwargs !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.ComputationAction.kwargs: object expected\");\n                        message.kwargs = {};\n                        for (var keys = Object.keys(object.kwargs), i = 0; i < keys.length; ++i) {\n                            if (typeof object.kwargs[keys[i]] !== \"object\")\n                                throw TypeError(\".syft_proto.execution.v1.ComputationAction.kwargs: object expected\");\n                            message.kwargs[keys[i]] = $root.syft_proto.types.syft.v1.Arg.fromObject(object.kwargs[keys[i]]);\n                        }\n                    }\n                    if (object.return_ids) {\n                        if (!Array.isArray(object.return_ids))\n                            throw TypeError(\".syft_proto.execution.v1.ComputationAction.return_ids: array expected\");\n                        message.return_ids = [];\n                        for (var i = 0; i < object.return_ids.length; ++i) {\n                            if (typeof object.return_ids[i] !== \"object\")\n                                throw TypeError(\".syft_proto.execution.v1.ComputationAction.return_ids: object expected\");\n                            message.return_ids[i] = $root.syft_proto.types.syft.v1.Id.fromObject(object.return_ids[i]);\n                        }\n                    }\n                    if (object.return_placeholder_ids) {\n                        if (!Array.isArray(object.return_placeholder_ids))\n                            throw TypeError(\".syft_proto.execution.v1.ComputationAction.return_placeholder_ids: array expected\");\n                        message.return_placeholder_ids = [];\n                        for (var i = 0; i < object.return_placeholder_ids.length; ++i) {\n                            if (typeof object.return_placeholder_ids[i] !== \"object\")\n                                throw TypeError(\".syft_proto.execution.v1.ComputationAction.return_placeholder_ids: object expected\");\n                            message.return_placeholder_ids[i] = $root.syft_proto.execution.v1.PlaceholderId.fromObject(object.return_placeholder_ids[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a ComputationAction message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof syft_proto.execution.v1.ComputationAction\n                 * @static\n                 * @param {syft_proto.execution.v1.ComputationAction} message ComputationAction\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                ComputationAction.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults) {\n                        object.args = [];\n                        object.return_ids = [];\n                        object.return_placeholder_ids = [];\n                    }\n                    if (options.objects || options.defaults)\n                        object.kwargs = {};\n                    if (options.defaults)\n                        object.command = \"\";\n                    if (message.command != null && message.hasOwnProperty(\"command\"))\n                        object.command = message.command;\n                    if (message.target_pointer != null && message.hasOwnProperty(\"target_pointer\")) {\n                        object.target_pointer = $root.syft_proto.generic.pointers.v1.PointerTensor.toObject(message.target_pointer, options);\n                        if (options.oneofs)\n                            object.target = \"target_pointer\";\n                    }\n                    if (message.target_placeholder_id != null && message.hasOwnProperty(\"target_placeholder_id\")) {\n                        object.target_placeholder_id = $root.syft_proto.execution.v1.PlaceholderId.toObject(message.target_placeholder_id, options);\n                        if (options.oneofs)\n                            object.target = \"target_placeholder_id\";\n                    }\n                    if (message.target_tensor != null && message.hasOwnProperty(\"target_tensor\")) {\n                        object.target_tensor = $root.syft_proto.types.torch.v1.TorchTensor.toObject(message.target_tensor, options);\n                        if (options.oneofs)\n                            object.target = \"target_tensor\";\n                    }\n                    if (message.args && message.args.length) {\n                        object.args = [];\n                        for (var j = 0; j < message.args.length; ++j)\n                            object.args[j] = $root.syft_proto.types.syft.v1.Arg.toObject(message.args[j], options);\n                    }\n                    var keys2;\n                    if (message.kwargs && (keys2 = Object.keys(message.kwargs)).length) {\n                        object.kwargs = {};\n                        for (var j = 0; j < keys2.length; ++j)\n                            object.kwargs[keys2[j]] = $root.syft_proto.types.syft.v1.Arg.toObject(message.kwargs[keys2[j]], options);\n                    }\n                    if (message.return_ids && message.return_ids.length) {\n                        object.return_ids = [];\n                        for (var j = 0; j < message.return_ids.length; ++j)\n                            object.return_ids[j] = $root.syft_proto.types.syft.v1.Id.toObject(message.return_ids[j], options);\n                    }\n                    if (message.return_placeholder_ids && message.return_placeholder_ids.length) {\n                        object.return_placeholder_ids = [];\n                        for (var j = 0; j < message.return_placeholder_ids.length; ++j)\n                            object.return_placeholder_ids[j] = $root.syft_proto.execution.v1.PlaceholderId.toObject(message.return_placeholder_ids[j], options);\n                    }\n                    if (message.target_id != null && message.hasOwnProperty(\"target_id\")) {\n                        object.target_id = $root.syft_proto.types.syft.v1.Id.toObject(message.target_id, options);\n                        if (options.oneofs)\n                            object.target = \"target_id\";\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this ComputationAction to JSON.\n                 * @function toJSON\n                 * @memberof syft_proto.execution.v1.ComputationAction\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                ComputationAction.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return ComputationAction;\n            })();\n\n            v1.Plan = (function() {\n\n                /**\n                 * Properties of a Plan.\n                 * @memberof syft_proto.execution.v1\n                 * @interface IPlan\n                 * @property {syft_proto.types.syft.v1.IId|null} [id] Plan id\n                 * @property {syft_proto.execution.v1.IRole|null} [role] Plan role\n                 * @property {boolean|null} [include_state] Plan include_state\n                 * @property {string|null} [name] Plan name\n                 * @property {Array.<string>|null} [tags] Plan tags\n                 * @property {string|null} [description] Plan description\n                 * @property {Uint8Array|null} [torchscript] Plan torchscript\n                 * @property {syft_proto.execution.v1.INestedTypeWrapper|null} [input_types] Plan input_types\n                 * @property {string|null} [base_framework] Plan base_framework\n                 * @property {Object.<string,syft_proto.execution.v1.IRole>|null} [roles] Plan roles\n                 */\n\n                /**\n                 * Constructs a new Plan.\n                 * @memberof syft_proto.execution.v1\n                 * @classdesc Represents a Plan.\n                 * @implements IPlan\n                 * @constructor\n                 * @param {syft_proto.execution.v1.IPlan=} [properties] Properties to set\n                 */\n                function Plan(properties) {\n                    this.tags = [];\n                    this.roles = {};\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * Plan id.\n                 * @member {syft_proto.types.syft.v1.IId|null|undefined} id\n                 * @memberof syft_proto.execution.v1.Plan\n                 * @instance\n                 */\n                Plan.prototype.id = null;\n\n                /**\n                 * Plan role.\n                 * @member {syft_proto.execution.v1.IRole|null|undefined} role\n                 * @memberof syft_proto.execution.v1.Plan\n                 * @instance\n                 */\n                Plan.prototype.role = null;\n\n                /**\n                 * Plan include_state.\n                 * @member {boolean} include_state\n                 * @memberof syft_proto.execution.v1.Plan\n                 * @instance\n                 */\n                Plan.prototype.include_state = false;\n\n                /**\n                 * Plan name.\n                 * @member {string} name\n                 * @memberof syft_proto.execution.v1.Plan\n                 * @instance\n                 */\n                Plan.prototype.name = \"\";\n\n                /**\n                 * Plan tags.\n                 * @member {Array.<string>} tags\n                 * @memberof syft_proto.execution.v1.Plan\n                 * @instance\n                 */\n                Plan.prototype.tags = $util.emptyArray;\n\n                /**\n                 * Plan description.\n                 * @member {string} description\n                 * @memberof syft_proto.execution.v1.Plan\n                 * @instance\n                 */\n                Plan.prototype.description = \"\";\n\n                /**\n                 * Plan torchscript.\n                 * @member {Uint8Array} torchscript\n                 * @memberof syft_proto.execution.v1.Plan\n                 * @instance\n                 */\n                Plan.prototype.torchscript = $util.newBuffer([]);\n\n                /**\n                 * Plan input_types.\n                 * @member {syft_proto.execution.v1.INestedTypeWrapper|null|undefined} input_types\n                 * @memberof syft_proto.execution.v1.Plan\n                 * @instance\n                 */\n                Plan.prototype.input_types = null;\n\n                /**\n                 * Plan base_framework.\n                 * @member {string} base_framework\n                 * @memberof syft_proto.execution.v1.Plan\n                 * @instance\n                 */\n                Plan.prototype.base_framework = \"\";\n\n                /**\n                 * Plan roles.\n                 * @member {Object.<string,syft_proto.execution.v1.IRole>} roles\n                 * @memberof syft_proto.execution.v1.Plan\n                 * @instance\n                 */\n                Plan.prototype.roles = $util.emptyObject;\n\n                /**\n                 * Creates a new Plan instance using the specified properties.\n                 * @function create\n                 * @memberof syft_proto.execution.v1.Plan\n                 * @static\n                 * @param {syft_proto.execution.v1.IPlan=} [properties] Properties to set\n                 * @returns {syft_proto.execution.v1.Plan} Plan instance\n                 */\n                Plan.create = function create(properties) {\n                    return new Plan(properties);\n                };\n\n                /**\n                 * Encodes the specified Plan message. Does not implicitly {@link syft_proto.execution.v1.Plan.verify|verify} messages.\n                 * @function encode\n                 * @memberof syft_proto.execution.v1.Plan\n                 * @static\n                 * @param {syft_proto.execution.v1.IPlan} message Plan message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Plan.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        $root.syft_proto.types.syft.v1.Id.encode(message.id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.role != null && message.hasOwnProperty(\"role\"))\n                        $root.syft_proto.execution.v1.Role.encode(message.role, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    if (message.include_state != null && message.hasOwnProperty(\"include_state\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.include_state);\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);\n                    if (message.tags != null && message.tags.length)\n                        for (var i = 0; i < message.tags.length; ++i)\n                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.tags[i]);\n                    if (message.description != null && message.hasOwnProperty(\"description\"))\n                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.description);\n                    if (message.torchscript != null && message.hasOwnProperty(\"torchscript\"))\n                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.torchscript);\n                    if (message.input_types != null && message.hasOwnProperty(\"input_types\"))\n                        $root.syft_proto.execution.v1.NestedTypeWrapper.encode(message.input_types, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n                    if (message.base_framework != null && message.hasOwnProperty(\"base_framework\"))\n                        writer.uint32(/* id 9, wireType 2 =*/74).string(message.base_framework);\n                    if (message.roles != null && message.hasOwnProperty(\"roles\"))\n                        for (var keys = Object.keys(message.roles), i = 0; i < keys.length; ++i) {\n                            writer.uint32(/* id 10, wireType 2 =*/82).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                            $root.syft_proto.execution.v1.Role.encode(message.roles[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n                        }\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified Plan message, length delimited. Does not implicitly {@link syft_proto.execution.v1.Plan.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof syft_proto.execution.v1.Plan\n                 * @static\n                 * @param {syft_proto.execution.v1.IPlan} message Plan message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Plan.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a Plan message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof syft_proto.execution.v1.Plan\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {syft_proto.execution.v1.Plan} Plan\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Plan.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.execution.v1.Plan(), key;\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.role = $root.syft_proto.execution.v1.Role.decode(reader, reader.uint32());\n                            break;\n                        case 3:\n                            message.include_state = reader.bool();\n                            break;\n                        case 4:\n                            message.name = reader.string();\n                            break;\n                        case 5:\n                            if (!(message.tags && message.tags.length))\n                                message.tags = [];\n                            message.tags.push(reader.string());\n                            break;\n                        case 6:\n                            message.description = reader.string();\n                            break;\n                        case 7:\n                            message.torchscript = reader.bytes();\n                            break;\n                        case 8:\n                            message.input_types = $root.syft_proto.execution.v1.NestedTypeWrapper.decode(reader, reader.uint32());\n                            break;\n                        case 9:\n                            message.base_framework = reader.string();\n                            break;\n                        case 10:\n                            reader.skip().pos++;\n                            if (message.roles === $util.emptyObject)\n                                message.roles = {};\n                            key = reader.string();\n                            reader.pos++;\n                            message.roles[key] = $root.syft_proto.execution.v1.Role.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a Plan message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof syft_proto.execution.v1.Plan\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {syft_proto.execution.v1.Plan} Plan\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Plan.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a Plan message.\n                 * @function verify\n                 * @memberof syft_proto.execution.v1.Plan\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                Plan.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.id != null && message.hasOwnProperty(\"id\")) {\n                        var error = $root.syft_proto.types.syft.v1.Id.verify(message.id);\n                        if (error)\n                            return \"id.\" + error;\n                    }\n                    if (message.role != null && message.hasOwnProperty(\"role\")) {\n                        var error = $root.syft_proto.execution.v1.Role.verify(message.role);\n                        if (error)\n                            return \"role.\" + error;\n                    }\n                    if (message.include_state != null && message.hasOwnProperty(\"include_state\"))\n                        if (typeof message.include_state !== \"boolean\")\n                            return \"include_state: boolean expected\";\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        if (!$util.isString(message.name))\n                            return \"name: string expected\";\n                    if (message.tags != null && message.hasOwnProperty(\"tags\")) {\n                        if (!Array.isArray(message.tags))\n                            return \"tags: array expected\";\n                        for (var i = 0; i < message.tags.length; ++i)\n                            if (!$util.isString(message.tags[i]))\n                                return \"tags: string[] expected\";\n                    }\n                    if (message.description != null && message.hasOwnProperty(\"description\"))\n                        if (!$util.isString(message.description))\n                            return \"description: string expected\";\n                    if (message.torchscript != null && message.hasOwnProperty(\"torchscript\"))\n                        if (!(message.torchscript && typeof message.torchscript.length === \"number\" || $util.isString(message.torchscript)))\n                            return \"torchscript: buffer expected\";\n                    if (message.input_types != null && message.hasOwnProperty(\"input_types\")) {\n                        var error = $root.syft_proto.execution.v1.NestedTypeWrapper.verify(message.input_types);\n                        if (error)\n                            return \"input_types.\" + error;\n                    }\n                    if (message.base_framework != null && message.hasOwnProperty(\"base_framework\"))\n                        if (!$util.isString(message.base_framework))\n                            return \"base_framework: string expected\";\n                    if (message.roles != null && message.hasOwnProperty(\"roles\")) {\n                        if (!$util.isObject(message.roles))\n                            return \"roles: object expected\";\n                        var key = Object.keys(message.roles);\n                        for (var i = 0; i < key.length; ++i) {\n                            var error = $root.syft_proto.execution.v1.Role.verify(message.roles[key[i]]);\n                            if (error)\n                                return \"roles.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a Plan message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof syft_proto.execution.v1.Plan\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {syft_proto.execution.v1.Plan} Plan\n                 */\n                Plan.fromObject = function fromObject(object) {\n                    if (object instanceof $root.syft_proto.execution.v1.Plan)\n                        return object;\n                    var message = new $root.syft_proto.execution.v1.Plan();\n                    if (object.id != null) {\n                        if (typeof object.id !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.Plan.id: object expected\");\n                        message.id = $root.syft_proto.types.syft.v1.Id.fromObject(object.id);\n                    }\n                    if (object.role != null) {\n                        if (typeof object.role !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.Plan.role: object expected\");\n                        message.role = $root.syft_proto.execution.v1.Role.fromObject(object.role);\n                    }\n                    if (object.include_state != null)\n                        message.include_state = Boolean(object.include_state);\n                    if (object.name != null)\n                        message.name = String(object.name);\n                    if (object.tags) {\n                        if (!Array.isArray(object.tags))\n                            throw TypeError(\".syft_proto.execution.v1.Plan.tags: array expected\");\n                        message.tags = [];\n                        for (var i = 0; i < object.tags.length; ++i)\n                            message.tags[i] = String(object.tags[i]);\n                    }\n                    if (object.description != null)\n                        message.description = String(object.description);\n                    if (object.torchscript != null)\n                        if (typeof object.torchscript === \"string\")\n                            $util.base64.decode(object.torchscript, message.torchscript = $util.newBuffer($util.base64.length(object.torchscript)), 0);\n                        else if (object.torchscript.length)\n                            message.torchscript = object.torchscript;\n                    if (object.input_types != null) {\n                        if (typeof object.input_types !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.Plan.input_types: object expected\");\n                        message.input_types = $root.syft_proto.execution.v1.NestedTypeWrapper.fromObject(object.input_types);\n                    }\n                    if (object.base_framework != null)\n                        message.base_framework = String(object.base_framework);\n                    if (object.roles) {\n                        if (typeof object.roles !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.Plan.roles: object expected\");\n                        message.roles = {};\n                        for (var keys = Object.keys(object.roles), i = 0; i < keys.length; ++i) {\n                            if (typeof object.roles[keys[i]] !== \"object\")\n                                throw TypeError(\".syft_proto.execution.v1.Plan.roles: object expected\");\n                            message.roles[keys[i]] = $root.syft_proto.execution.v1.Role.fromObject(object.roles[keys[i]]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a Plan message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof syft_proto.execution.v1.Plan\n                 * @static\n                 * @param {syft_proto.execution.v1.Plan} message Plan\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                Plan.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.tags = [];\n                    if (options.objects || options.defaults)\n                        object.roles = {};\n                    if (options.defaults) {\n                        object.id = null;\n                        object.role = null;\n                        object.include_state = false;\n                        object.name = \"\";\n                        object.description = \"\";\n                        if (options.bytes === String)\n                            object.torchscript = \"\";\n                        else {\n                            object.torchscript = [];\n                            if (options.bytes !== Array)\n                                object.torchscript = $util.newBuffer(object.torchscript);\n                        }\n                        object.input_types = null;\n                        object.base_framework = \"\";\n                    }\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        object.id = $root.syft_proto.types.syft.v1.Id.toObject(message.id, options);\n                    if (message.role != null && message.hasOwnProperty(\"role\"))\n                        object.role = $root.syft_proto.execution.v1.Role.toObject(message.role, options);\n                    if (message.include_state != null && message.hasOwnProperty(\"include_state\"))\n                        object.include_state = message.include_state;\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        object.name = message.name;\n                    if (message.tags && message.tags.length) {\n                        object.tags = [];\n                        for (var j = 0; j < message.tags.length; ++j)\n                            object.tags[j] = message.tags[j];\n                    }\n                    if (message.description != null && message.hasOwnProperty(\"description\"))\n                        object.description = message.description;\n                    if (message.torchscript != null && message.hasOwnProperty(\"torchscript\"))\n                        object.torchscript = options.bytes === String ? $util.base64.encode(message.torchscript, 0, message.torchscript.length) : options.bytes === Array ? Array.prototype.slice.call(message.torchscript) : message.torchscript;\n                    if (message.input_types != null && message.hasOwnProperty(\"input_types\"))\n                        object.input_types = $root.syft_proto.execution.v1.NestedTypeWrapper.toObject(message.input_types, options);\n                    if (message.base_framework != null && message.hasOwnProperty(\"base_framework\"))\n                        object.base_framework = message.base_framework;\n                    var keys2;\n                    if (message.roles && (keys2 = Object.keys(message.roles)).length) {\n                        object.roles = {};\n                        for (var j = 0; j < keys2.length; ++j)\n                            object.roles[keys2[j]] = $root.syft_proto.execution.v1.Role.toObject(message.roles[keys2[j]], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this Plan to JSON.\n                 * @function toJSON\n                 * @memberof syft_proto.execution.v1.Plan\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                Plan.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return Plan;\n            })();\n\n            v1.Role = (function() {\n\n                /**\n                 * Properties of a Role.\n                 * @memberof syft_proto.execution.v1\n                 * @interface IRole\n                 * @property {syft_proto.types.syft.v1.IId|null} [id] Role id\n                 * @property {Array.<syft_proto.execution.v1.IComputationAction>|null} [actions] Role actions\n                 * @property {syft_proto.execution.v1.IState|null} [state] Role state\n                 * @property {Array.<syft_proto.execution.v1.IPlaceholder>|null} [placeholders] Role placeholders\n                 * @property {Array.<syft_proto.types.syft.v1.IId>|null} [input_placeholder_ids] Role input_placeholder_ids\n                 * @property {Array.<syft_proto.types.syft.v1.IId>|null} [output_placeholder_ids] Role output_placeholder_ids\n                 * @property {Array.<string>|null} [tags] Role tags\n                 * @property {string|null} [description] Role description\n                 */\n\n                /**\n                 * Constructs a new Role.\n                 * @memberof syft_proto.execution.v1\n                 * @classdesc Represents a Role.\n                 * @implements IRole\n                 * @constructor\n                 * @param {syft_proto.execution.v1.IRole=} [properties] Properties to set\n                 */\n                function Role(properties) {\n                    this.actions = [];\n                    this.placeholders = [];\n                    this.input_placeholder_ids = [];\n                    this.output_placeholder_ids = [];\n                    this.tags = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * Role id.\n                 * @member {syft_proto.types.syft.v1.IId|null|undefined} id\n                 * @memberof syft_proto.execution.v1.Role\n                 * @instance\n                 */\n                Role.prototype.id = null;\n\n                /**\n                 * Role actions.\n                 * @member {Array.<syft_proto.execution.v1.IComputationAction>} actions\n                 * @memberof syft_proto.execution.v1.Role\n                 * @instance\n                 */\n                Role.prototype.actions = $util.emptyArray;\n\n                /**\n                 * Role state.\n                 * @member {syft_proto.execution.v1.IState|null|undefined} state\n                 * @memberof syft_proto.execution.v1.Role\n                 * @instance\n                 */\n                Role.prototype.state = null;\n\n                /**\n                 * Role placeholders.\n                 * @member {Array.<syft_proto.execution.v1.IPlaceholder>} placeholders\n                 * @memberof syft_proto.execution.v1.Role\n                 * @instance\n                 */\n                Role.prototype.placeholders = $util.emptyArray;\n\n                /**\n                 * Role input_placeholder_ids.\n                 * @member {Array.<syft_proto.types.syft.v1.IId>} input_placeholder_ids\n                 * @memberof syft_proto.execution.v1.Role\n                 * @instance\n                 */\n                Role.prototype.input_placeholder_ids = $util.emptyArray;\n\n                /**\n                 * Role output_placeholder_ids.\n                 * @member {Array.<syft_proto.types.syft.v1.IId>} output_placeholder_ids\n                 * @memberof syft_proto.execution.v1.Role\n                 * @instance\n                 */\n                Role.prototype.output_placeholder_ids = $util.emptyArray;\n\n                /**\n                 * Role tags.\n                 * @member {Array.<string>} tags\n                 * @memberof syft_proto.execution.v1.Role\n                 * @instance\n                 */\n                Role.prototype.tags = $util.emptyArray;\n\n                /**\n                 * Role description.\n                 * @member {string} description\n                 * @memberof syft_proto.execution.v1.Role\n                 * @instance\n                 */\n                Role.prototype.description = \"\";\n\n                /**\n                 * Creates a new Role instance using the specified properties.\n                 * @function create\n                 * @memberof syft_proto.execution.v1.Role\n                 * @static\n                 * @param {syft_proto.execution.v1.IRole=} [properties] Properties to set\n                 * @returns {syft_proto.execution.v1.Role} Role instance\n                 */\n                Role.create = function create(properties) {\n                    return new Role(properties);\n                };\n\n                /**\n                 * Encodes the specified Role message. Does not implicitly {@link syft_proto.execution.v1.Role.verify|verify} messages.\n                 * @function encode\n                 * @memberof syft_proto.execution.v1.Role\n                 * @static\n                 * @param {syft_proto.execution.v1.IRole} message Role message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Role.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        $root.syft_proto.types.syft.v1.Id.encode(message.id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.actions != null && message.actions.length)\n                        for (var i = 0; i < message.actions.length; ++i)\n                            $root.syft_proto.execution.v1.ComputationAction.encode(message.actions[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    if (message.state != null && message.hasOwnProperty(\"state\"))\n                        $root.syft_proto.execution.v1.State.encode(message.state, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                    if (message.placeholders != null && message.placeholders.length)\n                        for (var i = 0; i < message.placeholders.length; ++i)\n                            $root.syft_proto.execution.v1.Placeholder.encode(message.placeholders[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                    if (message.input_placeholder_ids != null && message.input_placeholder_ids.length)\n                        for (var i = 0; i < message.input_placeholder_ids.length; ++i)\n                            $root.syft_proto.types.syft.v1.Id.encode(message.input_placeholder_ids[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                    if (message.output_placeholder_ids != null && message.output_placeholder_ids.length)\n                        for (var i = 0; i < message.output_placeholder_ids.length; ++i)\n                            $root.syft_proto.types.syft.v1.Id.encode(message.output_placeholder_ids[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                    if (message.tags != null && message.tags.length)\n                        for (var i = 0; i < message.tags.length; ++i)\n                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.tags[i]);\n                    if (message.description != null && message.hasOwnProperty(\"description\"))\n                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.description);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified Role message, length delimited. Does not implicitly {@link syft_proto.execution.v1.Role.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof syft_proto.execution.v1.Role\n                 * @static\n                 * @param {syft_proto.execution.v1.IRole} message Role message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Role.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a Role message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof syft_proto.execution.v1.Role\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {syft_proto.execution.v1.Role} Role\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Role.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.execution.v1.Role();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            if (!(message.actions && message.actions.length))\n                                message.actions = [];\n                            message.actions.push($root.syft_proto.execution.v1.ComputationAction.decode(reader, reader.uint32()));\n                            break;\n                        case 3:\n                            message.state = $root.syft_proto.execution.v1.State.decode(reader, reader.uint32());\n                            break;\n                        case 4:\n                            if (!(message.placeholders && message.placeholders.length))\n                                message.placeholders = [];\n                            message.placeholders.push($root.syft_proto.execution.v1.Placeholder.decode(reader, reader.uint32()));\n                            break;\n                        case 5:\n                            if (!(message.input_placeholder_ids && message.input_placeholder_ids.length))\n                                message.input_placeholder_ids = [];\n                            message.input_placeholder_ids.push($root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32()));\n                            break;\n                        case 6:\n                            if (!(message.output_placeholder_ids && message.output_placeholder_ids.length))\n                                message.output_placeholder_ids = [];\n                            message.output_placeholder_ids.push($root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32()));\n                            break;\n                        case 7:\n                            if (!(message.tags && message.tags.length))\n                                message.tags = [];\n                            message.tags.push(reader.string());\n                            break;\n                        case 8:\n                            message.description = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a Role message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof syft_proto.execution.v1.Role\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {syft_proto.execution.v1.Role} Role\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Role.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a Role message.\n                 * @function verify\n                 * @memberof syft_proto.execution.v1.Role\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                Role.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.id != null && message.hasOwnProperty(\"id\")) {\n                        var error = $root.syft_proto.types.syft.v1.Id.verify(message.id);\n                        if (error)\n                            return \"id.\" + error;\n                    }\n                    if (message.actions != null && message.hasOwnProperty(\"actions\")) {\n                        if (!Array.isArray(message.actions))\n                            return \"actions: array expected\";\n                        for (var i = 0; i < message.actions.length; ++i) {\n                            var error = $root.syft_proto.execution.v1.ComputationAction.verify(message.actions[i]);\n                            if (error)\n                                return \"actions.\" + error;\n                        }\n                    }\n                    if (message.state != null && message.hasOwnProperty(\"state\")) {\n                        var error = $root.syft_proto.execution.v1.State.verify(message.state);\n                        if (error)\n                            return \"state.\" + error;\n                    }\n                    if (message.placeholders != null && message.hasOwnProperty(\"placeholders\")) {\n                        if (!Array.isArray(message.placeholders))\n                            return \"placeholders: array expected\";\n                        for (var i = 0; i < message.placeholders.length; ++i) {\n                            var error = $root.syft_proto.execution.v1.Placeholder.verify(message.placeholders[i]);\n                            if (error)\n                                return \"placeholders.\" + error;\n                        }\n                    }\n                    if (message.input_placeholder_ids != null && message.hasOwnProperty(\"input_placeholder_ids\")) {\n                        if (!Array.isArray(message.input_placeholder_ids))\n                            return \"input_placeholder_ids: array expected\";\n                        for (var i = 0; i < message.input_placeholder_ids.length; ++i) {\n                            var error = $root.syft_proto.types.syft.v1.Id.verify(message.input_placeholder_ids[i]);\n                            if (error)\n                                return \"input_placeholder_ids.\" + error;\n                        }\n                    }\n                    if (message.output_placeholder_ids != null && message.hasOwnProperty(\"output_placeholder_ids\")) {\n                        if (!Array.isArray(message.output_placeholder_ids))\n                            return \"output_placeholder_ids: array expected\";\n                        for (var i = 0; i < message.output_placeholder_ids.length; ++i) {\n                            var error = $root.syft_proto.types.syft.v1.Id.verify(message.output_placeholder_ids[i]);\n                            if (error)\n                                return \"output_placeholder_ids.\" + error;\n                        }\n                    }\n                    if (message.tags != null && message.hasOwnProperty(\"tags\")) {\n                        if (!Array.isArray(message.tags))\n                            return \"tags: array expected\";\n                        for (var i = 0; i < message.tags.length; ++i)\n                            if (!$util.isString(message.tags[i]))\n                                return \"tags: string[] expected\";\n                    }\n                    if (message.description != null && message.hasOwnProperty(\"description\"))\n                        if (!$util.isString(message.description))\n                            return \"description: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a Role message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof syft_proto.execution.v1.Role\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {syft_proto.execution.v1.Role} Role\n                 */\n                Role.fromObject = function fromObject(object) {\n                    if (object instanceof $root.syft_proto.execution.v1.Role)\n                        return object;\n                    var message = new $root.syft_proto.execution.v1.Role();\n                    if (object.id != null) {\n                        if (typeof object.id !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.Role.id: object expected\");\n                        message.id = $root.syft_proto.types.syft.v1.Id.fromObject(object.id);\n                    }\n                    if (object.actions) {\n                        if (!Array.isArray(object.actions))\n                            throw TypeError(\".syft_proto.execution.v1.Role.actions: array expected\");\n                        message.actions = [];\n                        for (var i = 0; i < object.actions.length; ++i) {\n                            if (typeof object.actions[i] !== \"object\")\n                                throw TypeError(\".syft_proto.execution.v1.Role.actions: object expected\");\n                            message.actions[i] = $root.syft_proto.execution.v1.ComputationAction.fromObject(object.actions[i]);\n                        }\n                    }\n                    if (object.state != null) {\n                        if (typeof object.state !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.Role.state: object expected\");\n                        message.state = $root.syft_proto.execution.v1.State.fromObject(object.state);\n                    }\n                    if (object.placeholders) {\n                        if (!Array.isArray(object.placeholders))\n                            throw TypeError(\".syft_proto.execution.v1.Role.placeholders: array expected\");\n                        message.placeholders = [];\n                        for (var i = 0; i < object.placeholders.length; ++i) {\n                            if (typeof object.placeholders[i] !== \"object\")\n                                throw TypeError(\".syft_proto.execution.v1.Role.placeholders: object expected\");\n                            message.placeholders[i] = $root.syft_proto.execution.v1.Placeholder.fromObject(object.placeholders[i]);\n                        }\n                    }\n                    if (object.input_placeholder_ids) {\n                        if (!Array.isArray(object.input_placeholder_ids))\n                            throw TypeError(\".syft_proto.execution.v1.Role.input_placeholder_ids: array expected\");\n                        message.input_placeholder_ids = [];\n                        for (var i = 0; i < object.input_placeholder_ids.length; ++i) {\n                            if (typeof object.input_placeholder_ids[i] !== \"object\")\n                                throw TypeError(\".syft_proto.execution.v1.Role.input_placeholder_ids: object expected\");\n                            message.input_placeholder_ids[i] = $root.syft_proto.types.syft.v1.Id.fromObject(object.input_placeholder_ids[i]);\n                        }\n                    }\n                    if (object.output_placeholder_ids) {\n                        if (!Array.isArray(object.output_placeholder_ids))\n                            throw TypeError(\".syft_proto.execution.v1.Role.output_placeholder_ids: array expected\");\n                        message.output_placeholder_ids = [];\n                        for (var i = 0; i < object.output_placeholder_ids.length; ++i) {\n                            if (typeof object.output_placeholder_ids[i] !== \"object\")\n                                throw TypeError(\".syft_proto.execution.v1.Role.output_placeholder_ids: object expected\");\n                            message.output_placeholder_ids[i] = $root.syft_proto.types.syft.v1.Id.fromObject(object.output_placeholder_ids[i]);\n                        }\n                    }\n                    if (object.tags) {\n                        if (!Array.isArray(object.tags))\n                            throw TypeError(\".syft_proto.execution.v1.Role.tags: array expected\");\n                        message.tags = [];\n                        for (var i = 0; i < object.tags.length; ++i)\n                            message.tags[i] = String(object.tags[i]);\n                    }\n                    if (object.description != null)\n                        message.description = String(object.description);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a Role message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof syft_proto.execution.v1.Role\n                 * @static\n                 * @param {syft_proto.execution.v1.Role} message Role\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                Role.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults) {\n                        object.actions = [];\n                        object.placeholders = [];\n                        object.input_placeholder_ids = [];\n                        object.output_placeholder_ids = [];\n                        object.tags = [];\n                    }\n                    if (options.defaults) {\n                        object.id = null;\n                        object.state = null;\n                        object.description = \"\";\n                    }\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        object.id = $root.syft_proto.types.syft.v1.Id.toObject(message.id, options);\n                    if (message.actions && message.actions.length) {\n                        object.actions = [];\n                        for (var j = 0; j < message.actions.length; ++j)\n                            object.actions[j] = $root.syft_proto.execution.v1.ComputationAction.toObject(message.actions[j], options);\n                    }\n                    if (message.state != null && message.hasOwnProperty(\"state\"))\n                        object.state = $root.syft_proto.execution.v1.State.toObject(message.state, options);\n                    if (message.placeholders && message.placeholders.length) {\n                        object.placeholders = [];\n                        for (var j = 0; j < message.placeholders.length; ++j)\n                            object.placeholders[j] = $root.syft_proto.execution.v1.Placeholder.toObject(message.placeholders[j], options);\n                    }\n                    if (message.input_placeholder_ids && message.input_placeholder_ids.length) {\n                        object.input_placeholder_ids = [];\n                        for (var j = 0; j < message.input_placeholder_ids.length; ++j)\n                            object.input_placeholder_ids[j] = $root.syft_proto.types.syft.v1.Id.toObject(message.input_placeholder_ids[j], options);\n                    }\n                    if (message.output_placeholder_ids && message.output_placeholder_ids.length) {\n                        object.output_placeholder_ids = [];\n                        for (var j = 0; j < message.output_placeholder_ids.length; ++j)\n                            object.output_placeholder_ids[j] = $root.syft_proto.types.syft.v1.Id.toObject(message.output_placeholder_ids[j], options);\n                    }\n                    if (message.tags && message.tags.length) {\n                        object.tags = [];\n                        for (var j = 0; j < message.tags.length; ++j)\n                            object.tags[j] = message.tags[j];\n                    }\n                    if (message.description != null && message.hasOwnProperty(\"description\"))\n                        object.description = message.description;\n                    return object;\n                };\n\n                /**\n                 * Converts this Role to JSON.\n                 * @function toJSON\n                 * @memberof syft_proto.execution.v1.Role\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                Role.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return Role;\n            })();\n\n            v1.State = (function() {\n\n                /**\n                 * Properties of a State.\n                 * @memberof syft_proto.execution.v1\n                 * @interface IState\n                 * @property {Array.<syft_proto.execution.v1.IPlaceholder>|null} [placeholders] State placeholders\n                 * @property {Array.<syft_proto.execution.v1.IStateTensor>|null} [tensors] State tensors\n                 */\n\n                /**\n                 * Constructs a new State.\n                 * @memberof syft_proto.execution.v1\n                 * @classdesc Represents a State.\n                 * @implements IState\n                 * @constructor\n                 * @param {syft_proto.execution.v1.IState=} [properties] Properties to set\n                 */\n                function State(properties) {\n                    this.placeholders = [];\n                    this.tensors = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * State placeholders.\n                 * @member {Array.<syft_proto.execution.v1.IPlaceholder>} placeholders\n                 * @memberof syft_proto.execution.v1.State\n                 * @instance\n                 */\n                State.prototype.placeholders = $util.emptyArray;\n\n                /**\n                 * State tensors.\n                 * @member {Array.<syft_proto.execution.v1.IStateTensor>} tensors\n                 * @memberof syft_proto.execution.v1.State\n                 * @instance\n                 */\n                State.prototype.tensors = $util.emptyArray;\n\n                /**\n                 * Creates a new State instance using the specified properties.\n                 * @function create\n                 * @memberof syft_proto.execution.v1.State\n                 * @static\n                 * @param {syft_proto.execution.v1.IState=} [properties] Properties to set\n                 * @returns {syft_proto.execution.v1.State} State instance\n                 */\n                State.create = function create(properties) {\n                    return new State(properties);\n                };\n\n                /**\n                 * Encodes the specified State message. Does not implicitly {@link syft_proto.execution.v1.State.verify|verify} messages.\n                 * @function encode\n                 * @memberof syft_proto.execution.v1.State\n                 * @static\n                 * @param {syft_proto.execution.v1.IState} message State message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                State.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.placeholders != null && message.placeholders.length)\n                        for (var i = 0; i < message.placeholders.length; ++i)\n                            $root.syft_proto.execution.v1.Placeholder.encode(message.placeholders[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.tensors != null && message.tensors.length)\n                        for (var i = 0; i < message.tensors.length; ++i)\n                            $root.syft_proto.execution.v1.StateTensor.encode(message.tensors[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified State message, length delimited. Does not implicitly {@link syft_proto.execution.v1.State.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof syft_proto.execution.v1.State\n                 * @static\n                 * @param {syft_proto.execution.v1.IState} message State message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                State.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a State message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof syft_proto.execution.v1.State\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {syft_proto.execution.v1.State} State\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                State.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.execution.v1.State();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.placeholders && message.placeholders.length))\n                                message.placeholders = [];\n                            message.placeholders.push($root.syft_proto.execution.v1.Placeholder.decode(reader, reader.uint32()));\n                            break;\n                        case 2:\n                            if (!(message.tensors && message.tensors.length))\n                                message.tensors = [];\n                            message.tensors.push($root.syft_proto.execution.v1.StateTensor.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a State message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof syft_proto.execution.v1.State\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {syft_proto.execution.v1.State} State\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                State.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a State message.\n                 * @function verify\n                 * @memberof syft_proto.execution.v1.State\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                State.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.placeholders != null && message.hasOwnProperty(\"placeholders\")) {\n                        if (!Array.isArray(message.placeholders))\n                            return \"placeholders: array expected\";\n                        for (var i = 0; i < message.placeholders.length; ++i) {\n                            var error = $root.syft_proto.execution.v1.Placeholder.verify(message.placeholders[i]);\n                            if (error)\n                                return \"placeholders.\" + error;\n                        }\n                    }\n                    if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                        if (!Array.isArray(message.tensors))\n                            return \"tensors: array expected\";\n                        for (var i = 0; i < message.tensors.length; ++i) {\n                            var error = $root.syft_proto.execution.v1.StateTensor.verify(message.tensors[i]);\n                            if (error)\n                                return \"tensors.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a State message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof syft_proto.execution.v1.State\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {syft_proto.execution.v1.State} State\n                 */\n                State.fromObject = function fromObject(object) {\n                    if (object instanceof $root.syft_proto.execution.v1.State)\n                        return object;\n                    var message = new $root.syft_proto.execution.v1.State();\n                    if (object.placeholders) {\n                        if (!Array.isArray(object.placeholders))\n                            throw TypeError(\".syft_proto.execution.v1.State.placeholders: array expected\");\n                        message.placeholders = [];\n                        for (var i = 0; i < object.placeholders.length; ++i) {\n                            if (typeof object.placeholders[i] !== \"object\")\n                                throw TypeError(\".syft_proto.execution.v1.State.placeholders: object expected\");\n                            message.placeholders[i] = $root.syft_proto.execution.v1.Placeholder.fromObject(object.placeholders[i]);\n                        }\n                    }\n                    if (object.tensors) {\n                        if (!Array.isArray(object.tensors))\n                            throw TypeError(\".syft_proto.execution.v1.State.tensors: array expected\");\n                        message.tensors = [];\n                        for (var i = 0; i < object.tensors.length; ++i) {\n                            if (typeof object.tensors[i] !== \"object\")\n                                throw TypeError(\".syft_proto.execution.v1.State.tensors: object expected\");\n                            message.tensors[i] = $root.syft_proto.execution.v1.StateTensor.fromObject(object.tensors[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a State message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof syft_proto.execution.v1.State\n                 * @static\n                 * @param {syft_proto.execution.v1.State} message State\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                State.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults) {\n                        object.placeholders = [];\n                        object.tensors = [];\n                    }\n                    if (message.placeholders && message.placeholders.length) {\n                        object.placeholders = [];\n                        for (var j = 0; j < message.placeholders.length; ++j)\n                            object.placeholders[j] = $root.syft_proto.execution.v1.Placeholder.toObject(message.placeholders[j], options);\n                    }\n                    if (message.tensors && message.tensors.length) {\n                        object.tensors = [];\n                        for (var j = 0; j < message.tensors.length; ++j)\n                            object.tensors[j] = $root.syft_proto.execution.v1.StateTensor.toObject(message.tensors[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this State to JSON.\n                 * @function toJSON\n                 * @memberof syft_proto.execution.v1.State\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                State.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return State;\n            })();\n\n            v1.StateTensor = (function() {\n\n                /**\n                 * Properties of a StateTensor.\n                 * @memberof syft_proto.execution.v1\n                 * @interface IStateTensor\n                 * @property {syft_proto.types.torch.v1.ITorchTensor|null} [torch_tensor] StateTensor torch_tensor\n                 * @property {syft_proto.types.torch.v1.IParameter|null} [torch_param] StateTensor torch_param\n                 */\n\n                /**\n                 * Constructs a new StateTensor.\n                 * @memberof syft_proto.execution.v1\n                 * @classdesc Represents a StateTensor.\n                 * @implements IStateTensor\n                 * @constructor\n                 * @param {syft_proto.execution.v1.IStateTensor=} [properties] Properties to set\n                 */\n                function StateTensor(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * StateTensor torch_tensor.\n                 * @member {syft_proto.types.torch.v1.ITorchTensor|null|undefined} torch_tensor\n                 * @memberof syft_proto.execution.v1.StateTensor\n                 * @instance\n                 */\n                StateTensor.prototype.torch_tensor = null;\n\n                /**\n                 * StateTensor torch_param.\n                 * @member {syft_proto.types.torch.v1.IParameter|null|undefined} torch_param\n                 * @memberof syft_proto.execution.v1.StateTensor\n                 * @instance\n                 */\n                StateTensor.prototype.torch_param = null;\n\n                // OneOf field names bound to virtual getters and setters\n                var $oneOfFields;\n\n                /**\n                 * StateTensor tensor.\n                 * @member {\"torch_tensor\"|\"torch_param\"|undefined} tensor\n                 * @memberof syft_proto.execution.v1.StateTensor\n                 * @instance\n                 */\n                Object.defineProperty(StateTensor.prototype, \"tensor\", {\n                    get: $util.oneOfGetter($oneOfFields = [\"torch_tensor\", \"torch_param\"]),\n                    set: $util.oneOfSetter($oneOfFields)\n                });\n\n                /**\n                 * Creates a new StateTensor instance using the specified properties.\n                 * @function create\n                 * @memberof syft_proto.execution.v1.StateTensor\n                 * @static\n                 * @param {syft_proto.execution.v1.IStateTensor=} [properties] Properties to set\n                 * @returns {syft_proto.execution.v1.StateTensor} StateTensor instance\n                 */\n                StateTensor.create = function create(properties) {\n                    return new StateTensor(properties);\n                };\n\n                /**\n                 * Encodes the specified StateTensor message. Does not implicitly {@link syft_proto.execution.v1.StateTensor.verify|verify} messages.\n                 * @function encode\n                 * @memberof syft_proto.execution.v1.StateTensor\n                 * @static\n                 * @param {syft_proto.execution.v1.IStateTensor} message StateTensor message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                StateTensor.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.torch_tensor != null && message.hasOwnProperty(\"torch_tensor\"))\n                        $root.syft_proto.types.torch.v1.TorchTensor.encode(message.torch_tensor, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.torch_param != null && message.hasOwnProperty(\"torch_param\"))\n                        $root.syft_proto.types.torch.v1.Parameter.encode(message.torch_param, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified StateTensor message, length delimited. Does not implicitly {@link syft_proto.execution.v1.StateTensor.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof syft_proto.execution.v1.StateTensor\n                 * @static\n                 * @param {syft_proto.execution.v1.IStateTensor} message StateTensor message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                StateTensor.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a StateTensor message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof syft_proto.execution.v1.StateTensor\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {syft_proto.execution.v1.StateTensor} StateTensor\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                StateTensor.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.execution.v1.StateTensor();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.torch_tensor = $root.syft_proto.types.torch.v1.TorchTensor.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.torch_param = $root.syft_proto.types.torch.v1.Parameter.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a StateTensor message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof syft_proto.execution.v1.StateTensor\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {syft_proto.execution.v1.StateTensor} StateTensor\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                StateTensor.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a StateTensor message.\n                 * @function verify\n                 * @memberof syft_proto.execution.v1.StateTensor\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                StateTensor.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    var properties = {};\n                    if (message.torch_tensor != null && message.hasOwnProperty(\"torch_tensor\")) {\n                        properties.tensor = 1;\n                        {\n                            var error = $root.syft_proto.types.torch.v1.TorchTensor.verify(message.torch_tensor);\n                            if (error)\n                                return \"torch_tensor.\" + error;\n                        }\n                    }\n                    if (message.torch_param != null && message.hasOwnProperty(\"torch_param\")) {\n                        if (properties.tensor === 1)\n                            return \"tensor: multiple values\";\n                        properties.tensor = 1;\n                        {\n                            var error = $root.syft_proto.types.torch.v1.Parameter.verify(message.torch_param);\n                            if (error)\n                                return \"torch_param.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a StateTensor message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof syft_proto.execution.v1.StateTensor\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {syft_proto.execution.v1.StateTensor} StateTensor\n                 */\n                StateTensor.fromObject = function fromObject(object) {\n                    if (object instanceof $root.syft_proto.execution.v1.StateTensor)\n                        return object;\n                    var message = new $root.syft_proto.execution.v1.StateTensor();\n                    if (object.torch_tensor != null) {\n                        if (typeof object.torch_tensor !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.StateTensor.torch_tensor: object expected\");\n                        message.torch_tensor = $root.syft_proto.types.torch.v1.TorchTensor.fromObject(object.torch_tensor);\n                    }\n                    if (object.torch_param != null) {\n                        if (typeof object.torch_param !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.StateTensor.torch_param: object expected\");\n                        message.torch_param = $root.syft_proto.types.torch.v1.Parameter.fromObject(object.torch_param);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a StateTensor message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof syft_proto.execution.v1.StateTensor\n                 * @static\n                 * @param {syft_proto.execution.v1.StateTensor} message StateTensor\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                StateTensor.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (message.torch_tensor != null && message.hasOwnProperty(\"torch_tensor\")) {\n                        object.torch_tensor = $root.syft_proto.types.torch.v1.TorchTensor.toObject(message.torch_tensor, options);\n                        if (options.oneofs)\n                            object.tensor = \"torch_tensor\";\n                    }\n                    if (message.torch_param != null && message.hasOwnProperty(\"torch_param\")) {\n                        object.torch_param = $root.syft_proto.types.torch.v1.Parameter.toObject(message.torch_param, options);\n                        if (options.oneofs)\n                            object.tensor = \"torch_param\";\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this StateTensor to JSON.\n                 * @function toJSON\n                 * @memberof syft_proto.execution.v1.StateTensor\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                StateTensor.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return StateTensor;\n            })();\n\n            v1.InputTypeDescriptor = (function() {\n\n                /**\n                 * Properties of an InputTypeDescriptor.\n                 * @memberof syft_proto.execution.v1\n                 * @interface IInputTypeDescriptor\n                 * @property {string|null} [type_name] InputTypeDescriptor type_name\n                 */\n\n                /**\n                 * Constructs a new InputTypeDescriptor.\n                 * @memberof syft_proto.execution.v1\n                 * @classdesc Represents an InputTypeDescriptor.\n                 * @implements IInputTypeDescriptor\n                 * @constructor\n                 * @param {syft_proto.execution.v1.IInputTypeDescriptor=} [properties] Properties to set\n                 */\n                function InputTypeDescriptor(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * InputTypeDescriptor type_name.\n                 * @member {string} type_name\n                 * @memberof syft_proto.execution.v1.InputTypeDescriptor\n                 * @instance\n                 */\n                InputTypeDescriptor.prototype.type_name = \"\";\n\n                /**\n                 * Creates a new InputTypeDescriptor instance using the specified properties.\n                 * @function create\n                 * @memberof syft_proto.execution.v1.InputTypeDescriptor\n                 * @static\n                 * @param {syft_proto.execution.v1.IInputTypeDescriptor=} [properties] Properties to set\n                 * @returns {syft_proto.execution.v1.InputTypeDescriptor} InputTypeDescriptor instance\n                 */\n                InputTypeDescriptor.create = function create(properties) {\n                    return new InputTypeDescriptor(properties);\n                };\n\n                /**\n                 * Encodes the specified InputTypeDescriptor message. Does not implicitly {@link syft_proto.execution.v1.InputTypeDescriptor.verify|verify} messages.\n                 * @function encode\n                 * @memberof syft_proto.execution.v1.InputTypeDescriptor\n                 * @static\n                 * @param {syft_proto.execution.v1.IInputTypeDescriptor} message InputTypeDescriptor message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                InputTypeDescriptor.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.type_name != null && message.hasOwnProperty(\"type_name\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type_name);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified InputTypeDescriptor message, length delimited. Does not implicitly {@link syft_proto.execution.v1.InputTypeDescriptor.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof syft_proto.execution.v1.InputTypeDescriptor\n                 * @static\n                 * @param {syft_proto.execution.v1.IInputTypeDescriptor} message InputTypeDescriptor message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                InputTypeDescriptor.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes an InputTypeDescriptor message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof syft_proto.execution.v1.InputTypeDescriptor\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {syft_proto.execution.v1.InputTypeDescriptor} InputTypeDescriptor\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                InputTypeDescriptor.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.execution.v1.InputTypeDescriptor();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.type_name = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes an InputTypeDescriptor message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof syft_proto.execution.v1.InputTypeDescriptor\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {syft_proto.execution.v1.InputTypeDescriptor} InputTypeDescriptor\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                InputTypeDescriptor.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies an InputTypeDescriptor message.\n                 * @function verify\n                 * @memberof syft_proto.execution.v1.InputTypeDescriptor\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                InputTypeDescriptor.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.type_name != null && message.hasOwnProperty(\"type_name\"))\n                        if (!$util.isString(message.type_name))\n                            return \"type_name: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates an InputTypeDescriptor message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof syft_proto.execution.v1.InputTypeDescriptor\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {syft_proto.execution.v1.InputTypeDescriptor} InputTypeDescriptor\n                 */\n                InputTypeDescriptor.fromObject = function fromObject(object) {\n                    if (object instanceof $root.syft_proto.execution.v1.InputTypeDescriptor)\n                        return object;\n                    var message = new $root.syft_proto.execution.v1.InputTypeDescriptor();\n                    if (object.type_name != null)\n                        message.type_name = String(object.type_name);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from an InputTypeDescriptor message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof syft_proto.execution.v1.InputTypeDescriptor\n                 * @static\n                 * @param {syft_proto.execution.v1.InputTypeDescriptor} message InputTypeDescriptor\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                InputTypeDescriptor.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.type_name = \"\";\n                    if (message.type_name != null && message.hasOwnProperty(\"type_name\"))\n                        object.type_name = message.type_name;\n                    return object;\n                };\n\n                /**\n                 * Converts this InputTypeDescriptor to JSON.\n                 * @function toJSON\n                 * @memberof syft_proto.execution.v1.InputTypeDescriptor\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                InputTypeDescriptor.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return InputTypeDescriptor;\n            })();\n\n            v1.NestedTypeWrapper = (function() {\n\n                /**\n                 * Properties of a NestedTypeWrapper.\n                 * @memberof syft_proto.execution.v1\n                 * @interface INestedTypeWrapper\n                 * @property {syft_proto.execution.v1.NestedTypeWrapper.ITypeContainer|null} [nested_types] NestedTypeWrapper nested_types\n                 */\n\n                /**\n                 * Constructs a new NestedTypeWrapper.\n                 * @memberof syft_proto.execution.v1\n                 * @classdesc Represents a NestedTypeWrapper.\n                 * @implements INestedTypeWrapper\n                 * @constructor\n                 * @param {syft_proto.execution.v1.INestedTypeWrapper=} [properties] Properties to set\n                 */\n                function NestedTypeWrapper(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * NestedTypeWrapper nested_types.\n                 * @member {syft_proto.execution.v1.NestedTypeWrapper.ITypeContainer|null|undefined} nested_types\n                 * @memberof syft_proto.execution.v1.NestedTypeWrapper\n                 * @instance\n                 */\n                NestedTypeWrapper.prototype.nested_types = null;\n\n                /**\n                 * Creates a new NestedTypeWrapper instance using the specified properties.\n                 * @function create\n                 * @memberof syft_proto.execution.v1.NestedTypeWrapper\n                 * @static\n                 * @param {syft_proto.execution.v1.INestedTypeWrapper=} [properties] Properties to set\n                 * @returns {syft_proto.execution.v1.NestedTypeWrapper} NestedTypeWrapper instance\n                 */\n                NestedTypeWrapper.create = function create(properties) {\n                    return new NestedTypeWrapper(properties);\n                };\n\n                /**\n                 * Encodes the specified NestedTypeWrapper message. Does not implicitly {@link syft_proto.execution.v1.NestedTypeWrapper.verify|verify} messages.\n                 * @function encode\n                 * @memberof syft_proto.execution.v1.NestedTypeWrapper\n                 * @static\n                 * @param {syft_proto.execution.v1.INestedTypeWrapper} message NestedTypeWrapper message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                NestedTypeWrapper.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.nested_types != null && message.hasOwnProperty(\"nested_types\"))\n                        $root.syft_proto.execution.v1.NestedTypeWrapper.TypeContainer.encode(message.nested_types, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified NestedTypeWrapper message, length delimited. Does not implicitly {@link syft_proto.execution.v1.NestedTypeWrapper.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof syft_proto.execution.v1.NestedTypeWrapper\n                 * @static\n                 * @param {syft_proto.execution.v1.INestedTypeWrapper} message NestedTypeWrapper message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                NestedTypeWrapper.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a NestedTypeWrapper message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof syft_proto.execution.v1.NestedTypeWrapper\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {syft_proto.execution.v1.NestedTypeWrapper} NestedTypeWrapper\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                NestedTypeWrapper.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.execution.v1.NestedTypeWrapper();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.nested_types = $root.syft_proto.execution.v1.NestedTypeWrapper.TypeContainer.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a NestedTypeWrapper message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof syft_proto.execution.v1.NestedTypeWrapper\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {syft_proto.execution.v1.NestedTypeWrapper} NestedTypeWrapper\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                NestedTypeWrapper.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a NestedTypeWrapper message.\n                 * @function verify\n                 * @memberof syft_proto.execution.v1.NestedTypeWrapper\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                NestedTypeWrapper.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.nested_types != null && message.hasOwnProperty(\"nested_types\")) {\n                        var error = $root.syft_proto.execution.v1.NestedTypeWrapper.TypeContainer.verify(message.nested_types);\n                        if (error)\n                            return \"nested_types.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a NestedTypeWrapper message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof syft_proto.execution.v1.NestedTypeWrapper\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {syft_proto.execution.v1.NestedTypeWrapper} NestedTypeWrapper\n                 */\n                NestedTypeWrapper.fromObject = function fromObject(object) {\n                    if (object instanceof $root.syft_proto.execution.v1.NestedTypeWrapper)\n                        return object;\n                    var message = new $root.syft_proto.execution.v1.NestedTypeWrapper();\n                    if (object.nested_types != null) {\n                        if (typeof object.nested_types !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.NestedTypeWrapper.nested_types: object expected\");\n                        message.nested_types = $root.syft_proto.execution.v1.NestedTypeWrapper.TypeContainer.fromObject(object.nested_types);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a NestedTypeWrapper message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof syft_proto.execution.v1.NestedTypeWrapper\n                 * @static\n                 * @param {syft_proto.execution.v1.NestedTypeWrapper} message NestedTypeWrapper\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                NestedTypeWrapper.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.nested_types = null;\n                    if (message.nested_types != null && message.hasOwnProperty(\"nested_types\"))\n                        object.nested_types = $root.syft_proto.execution.v1.NestedTypeWrapper.TypeContainer.toObject(message.nested_types, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this NestedTypeWrapper to JSON.\n                 * @function toJSON\n                 * @memberof syft_proto.execution.v1.NestedTypeWrapper\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                NestedTypeWrapper.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                NestedTypeWrapper.TypeList = (function() {\n\n                    /**\n                     * Properties of a TypeList.\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper\n                     * @interface ITypeList\n                     * @property {Array.<syft_proto.execution.v1.INestedTypeWrapper>|null} [nested_types] TypeList nested_types\n                     */\n\n                    /**\n                     * Constructs a new TypeList.\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper\n                     * @classdesc Represents a TypeList.\n                     * @implements ITypeList\n                     * @constructor\n                     * @param {syft_proto.execution.v1.NestedTypeWrapper.ITypeList=} [properties] Properties to set\n                     */\n                    function TypeList(properties) {\n                        this.nested_types = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * TypeList nested_types.\n                     * @member {Array.<syft_proto.execution.v1.INestedTypeWrapper>} nested_types\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeList\n                     * @instance\n                     */\n                    TypeList.prototype.nested_types = $util.emptyArray;\n\n                    /**\n                     * Creates a new TypeList instance using the specified properties.\n                     * @function create\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeList\n                     * @static\n                     * @param {syft_proto.execution.v1.NestedTypeWrapper.ITypeList=} [properties] Properties to set\n                     * @returns {syft_proto.execution.v1.NestedTypeWrapper.TypeList} TypeList instance\n                     */\n                    TypeList.create = function create(properties) {\n                        return new TypeList(properties);\n                    };\n\n                    /**\n                     * Encodes the specified TypeList message. Does not implicitly {@link syft_proto.execution.v1.NestedTypeWrapper.TypeList.verify|verify} messages.\n                     * @function encode\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeList\n                     * @static\n                     * @param {syft_proto.execution.v1.NestedTypeWrapper.ITypeList} message TypeList message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TypeList.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.nested_types != null && message.nested_types.length)\n                            for (var i = 0; i < message.nested_types.length; ++i)\n                                $root.syft_proto.execution.v1.NestedTypeWrapper.encode(message.nested_types[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified TypeList message, length delimited. Does not implicitly {@link syft_proto.execution.v1.NestedTypeWrapper.TypeList.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeList\n                     * @static\n                     * @param {syft_proto.execution.v1.NestedTypeWrapper.ITypeList} message TypeList message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TypeList.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a TypeList message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeList\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {syft_proto.execution.v1.NestedTypeWrapper.TypeList} TypeList\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TypeList.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.execution.v1.NestedTypeWrapper.TypeList();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                if (!(message.nested_types && message.nested_types.length))\n                                    message.nested_types = [];\n                                message.nested_types.push($root.syft_proto.execution.v1.NestedTypeWrapper.decode(reader, reader.uint32()));\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a TypeList message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeList\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {syft_proto.execution.v1.NestedTypeWrapper.TypeList} TypeList\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TypeList.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a TypeList message.\n                     * @function verify\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeList\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    TypeList.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.nested_types != null && message.hasOwnProperty(\"nested_types\")) {\n                            if (!Array.isArray(message.nested_types))\n                                return \"nested_types: array expected\";\n                            for (var i = 0; i < message.nested_types.length; ++i) {\n                                var error = $root.syft_proto.execution.v1.NestedTypeWrapper.verify(message.nested_types[i]);\n                                if (error)\n                                    return \"nested_types.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a TypeList message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeList\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {syft_proto.execution.v1.NestedTypeWrapper.TypeList} TypeList\n                     */\n                    TypeList.fromObject = function fromObject(object) {\n                        if (object instanceof $root.syft_proto.execution.v1.NestedTypeWrapper.TypeList)\n                            return object;\n                        var message = new $root.syft_proto.execution.v1.NestedTypeWrapper.TypeList();\n                        if (object.nested_types) {\n                            if (!Array.isArray(object.nested_types))\n                                throw TypeError(\".syft_proto.execution.v1.NestedTypeWrapper.TypeList.nested_types: array expected\");\n                            message.nested_types = [];\n                            for (var i = 0; i < object.nested_types.length; ++i) {\n                                if (typeof object.nested_types[i] !== \"object\")\n                                    throw TypeError(\".syft_proto.execution.v1.NestedTypeWrapper.TypeList.nested_types: object expected\");\n                                message.nested_types[i] = $root.syft_proto.execution.v1.NestedTypeWrapper.fromObject(object.nested_types[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a TypeList message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeList\n                     * @static\n                     * @param {syft_proto.execution.v1.NestedTypeWrapper.TypeList} message TypeList\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    TypeList.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.nested_types = [];\n                        if (message.nested_types && message.nested_types.length) {\n                            object.nested_types = [];\n                            for (var j = 0; j < message.nested_types.length; ++j)\n                                object.nested_types[j] = $root.syft_proto.execution.v1.NestedTypeWrapper.toObject(message.nested_types[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this TypeList to JSON.\n                     * @function toJSON\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeList\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    TypeList.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return TypeList;\n                })();\n\n                NestedTypeWrapper.TypeTuple = (function() {\n\n                    /**\n                     * Properties of a TypeTuple.\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper\n                     * @interface ITypeTuple\n                     * @property {Array.<syft_proto.execution.v1.INestedTypeWrapper>|null} [nested_types] TypeTuple nested_types\n                     */\n\n                    /**\n                     * Constructs a new TypeTuple.\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper\n                     * @classdesc Represents a TypeTuple.\n                     * @implements ITypeTuple\n                     * @constructor\n                     * @param {syft_proto.execution.v1.NestedTypeWrapper.ITypeTuple=} [properties] Properties to set\n                     */\n                    function TypeTuple(properties) {\n                        this.nested_types = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * TypeTuple nested_types.\n                     * @member {Array.<syft_proto.execution.v1.INestedTypeWrapper>} nested_types\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeTuple\n                     * @instance\n                     */\n                    TypeTuple.prototype.nested_types = $util.emptyArray;\n\n                    /**\n                     * Creates a new TypeTuple instance using the specified properties.\n                     * @function create\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeTuple\n                     * @static\n                     * @param {syft_proto.execution.v1.NestedTypeWrapper.ITypeTuple=} [properties] Properties to set\n                     * @returns {syft_proto.execution.v1.NestedTypeWrapper.TypeTuple} TypeTuple instance\n                     */\n                    TypeTuple.create = function create(properties) {\n                        return new TypeTuple(properties);\n                    };\n\n                    /**\n                     * Encodes the specified TypeTuple message. Does not implicitly {@link syft_proto.execution.v1.NestedTypeWrapper.TypeTuple.verify|verify} messages.\n                     * @function encode\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeTuple\n                     * @static\n                     * @param {syft_proto.execution.v1.NestedTypeWrapper.ITypeTuple} message TypeTuple message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TypeTuple.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.nested_types != null && message.nested_types.length)\n                            for (var i = 0; i < message.nested_types.length; ++i)\n                                $root.syft_proto.execution.v1.NestedTypeWrapper.encode(message.nested_types[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified TypeTuple message, length delimited. Does not implicitly {@link syft_proto.execution.v1.NestedTypeWrapper.TypeTuple.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeTuple\n                     * @static\n                     * @param {syft_proto.execution.v1.NestedTypeWrapper.ITypeTuple} message TypeTuple message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TypeTuple.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a TypeTuple message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeTuple\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {syft_proto.execution.v1.NestedTypeWrapper.TypeTuple} TypeTuple\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TypeTuple.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.execution.v1.NestedTypeWrapper.TypeTuple();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                if (!(message.nested_types && message.nested_types.length))\n                                    message.nested_types = [];\n                                message.nested_types.push($root.syft_proto.execution.v1.NestedTypeWrapper.decode(reader, reader.uint32()));\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a TypeTuple message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeTuple\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {syft_proto.execution.v1.NestedTypeWrapper.TypeTuple} TypeTuple\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TypeTuple.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a TypeTuple message.\n                     * @function verify\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeTuple\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    TypeTuple.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.nested_types != null && message.hasOwnProperty(\"nested_types\")) {\n                            if (!Array.isArray(message.nested_types))\n                                return \"nested_types: array expected\";\n                            for (var i = 0; i < message.nested_types.length; ++i) {\n                                var error = $root.syft_proto.execution.v1.NestedTypeWrapper.verify(message.nested_types[i]);\n                                if (error)\n                                    return \"nested_types.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a TypeTuple message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeTuple\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {syft_proto.execution.v1.NestedTypeWrapper.TypeTuple} TypeTuple\n                     */\n                    TypeTuple.fromObject = function fromObject(object) {\n                        if (object instanceof $root.syft_proto.execution.v1.NestedTypeWrapper.TypeTuple)\n                            return object;\n                        var message = new $root.syft_proto.execution.v1.NestedTypeWrapper.TypeTuple();\n                        if (object.nested_types) {\n                            if (!Array.isArray(object.nested_types))\n                                throw TypeError(\".syft_proto.execution.v1.NestedTypeWrapper.TypeTuple.nested_types: array expected\");\n                            message.nested_types = [];\n                            for (var i = 0; i < object.nested_types.length; ++i) {\n                                if (typeof object.nested_types[i] !== \"object\")\n                                    throw TypeError(\".syft_proto.execution.v1.NestedTypeWrapper.TypeTuple.nested_types: object expected\");\n                                message.nested_types[i] = $root.syft_proto.execution.v1.NestedTypeWrapper.fromObject(object.nested_types[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a TypeTuple message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeTuple\n                     * @static\n                     * @param {syft_proto.execution.v1.NestedTypeWrapper.TypeTuple} message TypeTuple\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    TypeTuple.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.nested_types = [];\n                        if (message.nested_types && message.nested_types.length) {\n                            object.nested_types = [];\n                            for (var j = 0; j < message.nested_types.length; ++j)\n                                object.nested_types[j] = $root.syft_proto.execution.v1.NestedTypeWrapper.toObject(message.nested_types[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this TypeTuple to JSON.\n                     * @function toJSON\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeTuple\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    TypeTuple.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return TypeTuple;\n                })();\n\n                NestedTypeWrapper.TypeMap = (function() {\n\n                    /**\n                     * Properties of a TypeMap.\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper\n                     * @interface ITypeMap\n                     * @property {Object.<string,syft_proto.execution.v1.INestedTypeWrapper>|null} [nested_types] TypeMap nested_types\n                     */\n\n                    /**\n                     * Constructs a new TypeMap.\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper\n                     * @classdesc Represents a TypeMap.\n                     * @implements ITypeMap\n                     * @constructor\n                     * @param {syft_proto.execution.v1.NestedTypeWrapper.ITypeMap=} [properties] Properties to set\n                     */\n                    function TypeMap(properties) {\n                        this.nested_types = {};\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * TypeMap nested_types.\n                     * @member {Object.<string,syft_proto.execution.v1.INestedTypeWrapper>} nested_types\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeMap\n                     * @instance\n                     */\n                    TypeMap.prototype.nested_types = $util.emptyObject;\n\n                    /**\n                     * Creates a new TypeMap instance using the specified properties.\n                     * @function create\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeMap\n                     * @static\n                     * @param {syft_proto.execution.v1.NestedTypeWrapper.ITypeMap=} [properties] Properties to set\n                     * @returns {syft_proto.execution.v1.NestedTypeWrapper.TypeMap} TypeMap instance\n                     */\n                    TypeMap.create = function create(properties) {\n                        return new TypeMap(properties);\n                    };\n\n                    /**\n                     * Encodes the specified TypeMap message. Does not implicitly {@link syft_proto.execution.v1.NestedTypeWrapper.TypeMap.verify|verify} messages.\n                     * @function encode\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeMap\n                     * @static\n                     * @param {syft_proto.execution.v1.NestedTypeWrapper.ITypeMap} message TypeMap message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TypeMap.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.nested_types != null && message.hasOwnProperty(\"nested_types\"))\n                            for (var keys = Object.keys(message.nested_types), i = 0; i < keys.length; ++i) {\n                                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                                $root.syft_proto.execution.v1.NestedTypeWrapper.encode(message.nested_types[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n                            }\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified TypeMap message, length delimited. Does not implicitly {@link syft_proto.execution.v1.NestedTypeWrapper.TypeMap.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeMap\n                     * @static\n                     * @param {syft_proto.execution.v1.NestedTypeWrapper.ITypeMap} message TypeMap message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TypeMap.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a TypeMap message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeMap\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {syft_proto.execution.v1.NestedTypeWrapper.TypeMap} TypeMap\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TypeMap.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.execution.v1.NestedTypeWrapper.TypeMap(), key;\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                reader.skip().pos++;\n                                if (message.nested_types === $util.emptyObject)\n                                    message.nested_types = {};\n                                key = reader.string();\n                                reader.pos++;\n                                message.nested_types[key] = $root.syft_proto.execution.v1.NestedTypeWrapper.decode(reader, reader.uint32());\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a TypeMap message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeMap\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {syft_proto.execution.v1.NestedTypeWrapper.TypeMap} TypeMap\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TypeMap.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a TypeMap message.\n                     * @function verify\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeMap\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    TypeMap.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.nested_types != null && message.hasOwnProperty(\"nested_types\")) {\n                            if (!$util.isObject(message.nested_types))\n                                return \"nested_types: object expected\";\n                            var key = Object.keys(message.nested_types);\n                            for (var i = 0; i < key.length; ++i) {\n                                var error = $root.syft_proto.execution.v1.NestedTypeWrapper.verify(message.nested_types[key[i]]);\n                                if (error)\n                                    return \"nested_types.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a TypeMap message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeMap\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {syft_proto.execution.v1.NestedTypeWrapper.TypeMap} TypeMap\n                     */\n                    TypeMap.fromObject = function fromObject(object) {\n                        if (object instanceof $root.syft_proto.execution.v1.NestedTypeWrapper.TypeMap)\n                            return object;\n                        var message = new $root.syft_proto.execution.v1.NestedTypeWrapper.TypeMap();\n                        if (object.nested_types) {\n                            if (typeof object.nested_types !== \"object\")\n                                throw TypeError(\".syft_proto.execution.v1.NestedTypeWrapper.TypeMap.nested_types: object expected\");\n                            message.nested_types = {};\n                            for (var keys = Object.keys(object.nested_types), i = 0; i < keys.length; ++i) {\n                                if (typeof object.nested_types[keys[i]] !== \"object\")\n                                    throw TypeError(\".syft_proto.execution.v1.NestedTypeWrapper.TypeMap.nested_types: object expected\");\n                                message.nested_types[keys[i]] = $root.syft_proto.execution.v1.NestedTypeWrapper.fromObject(object.nested_types[keys[i]]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a TypeMap message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeMap\n                     * @static\n                     * @param {syft_proto.execution.v1.NestedTypeWrapper.TypeMap} message TypeMap\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    TypeMap.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.objects || options.defaults)\n                            object.nested_types = {};\n                        var keys2;\n                        if (message.nested_types && (keys2 = Object.keys(message.nested_types)).length) {\n                            object.nested_types = {};\n                            for (var j = 0; j < keys2.length; ++j)\n                                object.nested_types[keys2[j]] = $root.syft_proto.execution.v1.NestedTypeWrapper.toObject(message.nested_types[keys2[j]], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this TypeMap to JSON.\n                     * @function toJSON\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeMap\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    TypeMap.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return TypeMap;\n                })();\n\n                NestedTypeWrapper.TypeContainer = (function() {\n\n                    /**\n                     * Properties of a TypeContainer.\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper\n                     * @interface ITypeContainer\n                     * @property {syft_proto.execution.v1.IInputTypeDescriptor|null} [nested_type] TypeContainer nested_type\n                     * @property {syft_proto.execution.v1.NestedTypeWrapper.ITypeList|null} [nested_type_list] TypeContainer nested_type_list\n                     * @property {syft_proto.execution.v1.NestedTypeWrapper.ITypeTuple|null} [nested_type_tuple] TypeContainer nested_type_tuple\n                     * @property {syft_proto.execution.v1.NestedTypeWrapper.ITypeMap|null} [nested_type_dict] TypeContainer nested_type_dict\n                     */\n\n                    /**\n                     * Constructs a new TypeContainer.\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper\n                     * @classdesc Represents a TypeContainer.\n                     * @implements ITypeContainer\n                     * @constructor\n                     * @param {syft_proto.execution.v1.NestedTypeWrapper.ITypeContainer=} [properties] Properties to set\n                     */\n                    function TypeContainer(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * TypeContainer nested_type.\n                     * @member {syft_proto.execution.v1.IInputTypeDescriptor|null|undefined} nested_type\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeContainer\n                     * @instance\n                     */\n                    TypeContainer.prototype.nested_type = null;\n\n                    /**\n                     * TypeContainer nested_type_list.\n                     * @member {syft_proto.execution.v1.NestedTypeWrapper.ITypeList|null|undefined} nested_type_list\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeContainer\n                     * @instance\n                     */\n                    TypeContainer.prototype.nested_type_list = null;\n\n                    /**\n                     * TypeContainer nested_type_tuple.\n                     * @member {syft_proto.execution.v1.NestedTypeWrapper.ITypeTuple|null|undefined} nested_type_tuple\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeContainer\n                     * @instance\n                     */\n                    TypeContainer.prototype.nested_type_tuple = null;\n\n                    /**\n                     * TypeContainer nested_type_dict.\n                     * @member {syft_proto.execution.v1.NestedTypeWrapper.ITypeMap|null|undefined} nested_type_dict\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeContainer\n                     * @instance\n                     */\n                    TypeContainer.prototype.nested_type_dict = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * TypeContainer nested_container.\n                     * @member {\"nested_type\"|\"nested_type_list\"|\"nested_type_tuple\"|\"nested_type_dict\"|undefined} nested_container\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeContainer\n                     * @instance\n                     */\n                    Object.defineProperty(TypeContainer.prototype, \"nested_container\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"nested_type\", \"nested_type_list\", \"nested_type_tuple\", \"nested_type_dict\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new TypeContainer instance using the specified properties.\n                     * @function create\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeContainer\n                     * @static\n                     * @param {syft_proto.execution.v1.NestedTypeWrapper.ITypeContainer=} [properties] Properties to set\n                     * @returns {syft_proto.execution.v1.NestedTypeWrapper.TypeContainer} TypeContainer instance\n                     */\n                    TypeContainer.create = function create(properties) {\n                        return new TypeContainer(properties);\n                    };\n\n                    /**\n                     * Encodes the specified TypeContainer message. Does not implicitly {@link syft_proto.execution.v1.NestedTypeWrapper.TypeContainer.verify|verify} messages.\n                     * @function encode\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeContainer\n                     * @static\n                     * @param {syft_proto.execution.v1.NestedTypeWrapper.ITypeContainer} message TypeContainer message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TypeContainer.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.nested_type != null && message.hasOwnProperty(\"nested_type\"))\n                            $root.syft_proto.execution.v1.InputTypeDescriptor.encode(message.nested_type, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.nested_type_list != null && message.hasOwnProperty(\"nested_type_list\"))\n                            $root.syft_proto.execution.v1.NestedTypeWrapper.TypeList.encode(message.nested_type_list, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.nested_type_tuple != null && message.hasOwnProperty(\"nested_type_tuple\"))\n                            $root.syft_proto.execution.v1.NestedTypeWrapper.TypeTuple.encode(message.nested_type_tuple, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                        if (message.nested_type_dict != null && message.hasOwnProperty(\"nested_type_dict\"))\n                            $root.syft_proto.execution.v1.NestedTypeWrapper.TypeMap.encode(message.nested_type_dict, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified TypeContainer message, length delimited. Does not implicitly {@link syft_proto.execution.v1.NestedTypeWrapper.TypeContainer.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeContainer\n                     * @static\n                     * @param {syft_proto.execution.v1.NestedTypeWrapper.ITypeContainer} message TypeContainer message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TypeContainer.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a TypeContainer message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeContainer\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {syft_proto.execution.v1.NestedTypeWrapper.TypeContainer} TypeContainer\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TypeContainer.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.execution.v1.NestedTypeWrapper.TypeContainer();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.nested_type = $root.syft_proto.execution.v1.InputTypeDescriptor.decode(reader, reader.uint32());\n                                break;\n                            case 2:\n                                message.nested_type_list = $root.syft_proto.execution.v1.NestedTypeWrapper.TypeList.decode(reader, reader.uint32());\n                                break;\n                            case 3:\n                                message.nested_type_tuple = $root.syft_proto.execution.v1.NestedTypeWrapper.TypeTuple.decode(reader, reader.uint32());\n                                break;\n                            case 4:\n                                message.nested_type_dict = $root.syft_proto.execution.v1.NestedTypeWrapper.TypeMap.decode(reader, reader.uint32());\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a TypeContainer message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeContainer\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {syft_proto.execution.v1.NestedTypeWrapper.TypeContainer} TypeContainer\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TypeContainer.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a TypeContainer message.\n                     * @function verify\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeContainer\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    TypeContainer.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.nested_type != null && message.hasOwnProperty(\"nested_type\")) {\n                            properties.nested_container = 1;\n                            {\n                                var error = $root.syft_proto.execution.v1.InputTypeDescriptor.verify(message.nested_type);\n                                if (error)\n                                    return \"nested_type.\" + error;\n                            }\n                        }\n                        if (message.nested_type_list != null && message.hasOwnProperty(\"nested_type_list\")) {\n                            if (properties.nested_container === 1)\n                                return \"nested_container: multiple values\";\n                            properties.nested_container = 1;\n                            {\n                                var error = $root.syft_proto.execution.v1.NestedTypeWrapper.TypeList.verify(message.nested_type_list);\n                                if (error)\n                                    return \"nested_type_list.\" + error;\n                            }\n                        }\n                        if (message.nested_type_tuple != null && message.hasOwnProperty(\"nested_type_tuple\")) {\n                            if (properties.nested_container === 1)\n                                return \"nested_container: multiple values\";\n                            properties.nested_container = 1;\n                            {\n                                var error = $root.syft_proto.execution.v1.NestedTypeWrapper.TypeTuple.verify(message.nested_type_tuple);\n                                if (error)\n                                    return \"nested_type_tuple.\" + error;\n                            }\n                        }\n                        if (message.nested_type_dict != null && message.hasOwnProperty(\"nested_type_dict\")) {\n                            if (properties.nested_container === 1)\n                                return \"nested_container: multiple values\";\n                            properties.nested_container = 1;\n                            {\n                                var error = $root.syft_proto.execution.v1.NestedTypeWrapper.TypeMap.verify(message.nested_type_dict);\n                                if (error)\n                                    return \"nested_type_dict.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a TypeContainer message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeContainer\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {syft_proto.execution.v1.NestedTypeWrapper.TypeContainer} TypeContainer\n                     */\n                    TypeContainer.fromObject = function fromObject(object) {\n                        if (object instanceof $root.syft_proto.execution.v1.NestedTypeWrapper.TypeContainer)\n                            return object;\n                        var message = new $root.syft_proto.execution.v1.NestedTypeWrapper.TypeContainer();\n                        if (object.nested_type != null) {\n                            if (typeof object.nested_type !== \"object\")\n                                throw TypeError(\".syft_proto.execution.v1.NestedTypeWrapper.TypeContainer.nested_type: object expected\");\n                            message.nested_type = $root.syft_proto.execution.v1.InputTypeDescriptor.fromObject(object.nested_type);\n                        }\n                        if (object.nested_type_list != null) {\n                            if (typeof object.nested_type_list !== \"object\")\n                                throw TypeError(\".syft_proto.execution.v1.NestedTypeWrapper.TypeContainer.nested_type_list: object expected\");\n                            message.nested_type_list = $root.syft_proto.execution.v1.NestedTypeWrapper.TypeList.fromObject(object.nested_type_list);\n                        }\n                        if (object.nested_type_tuple != null) {\n                            if (typeof object.nested_type_tuple !== \"object\")\n                                throw TypeError(\".syft_proto.execution.v1.NestedTypeWrapper.TypeContainer.nested_type_tuple: object expected\");\n                            message.nested_type_tuple = $root.syft_proto.execution.v1.NestedTypeWrapper.TypeTuple.fromObject(object.nested_type_tuple);\n                        }\n                        if (object.nested_type_dict != null) {\n                            if (typeof object.nested_type_dict !== \"object\")\n                                throw TypeError(\".syft_proto.execution.v1.NestedTypeWrapper.TypeContainer.nested_type_dict: object expected\");\n                            message.nested_type_dict = $root.syft_proto.execution.v1.NestedTypeWrapper.TypeMap.fromObject(object.nested_type_dict);\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a TypeContainer message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeContainer\n                     * @static\n                     * @param {syft_proto.execution.v1.NestedTypeWrapper.TypeContainer} message TypeContainer\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    TypeContainer.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (message.nested_type != null && message.hasOwnProperty(\"nested_type\")) {\n                            object.nested_type = $root.syft_proto.execution.v1.InputTypeDescriptor.toObject(message.nested_type, options);\n                            if (options.oneofs)\n                                object.nested_container = \"nested_type\";\n                        }\n                        if (message.nested_type_list != null && message.hasOwnProperty(\"nested_type_list\")) {\n                            object.nested_type_list = $root.syft_proto.execution.v1.NestedTypeWrapper.TypeList.toObject(message.nested_type_list, options);\n                            if (options.oneofs)\n                                object.nested_container = \"nested_type_list\";\n                        }\n                        if (message.nested_type_tuple != null && message.hasOwnProperty(\"nested_type_tuple\")) {\n                            object.nested_type_tuple = $root.syft_proto.execution.v1.NestedTypeWrapper.TypeTuple.toObject(message.nested_type_tuple, options);\n                            if (options.oneofs)\n                                object.nested_container = \"nested_type_tuple\";\n                        }\n                        if (message.nested_type_dict != null && message.hasOwnProperty(\"nested_type_dict\")) {\n                            object.nested_type_dict = $root.syft_proto.execution.v1.NestedTypeWrapper.TypeMap.toObject(message.nested_type_dict, options);\n                            if (options.oneofs)\n                                object.nested_container = \"nested_type_dict\";\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this TypeContainer to JSON.\n                     * @function toJSON\n                     * @memberof syft_proto.execution.v1.NestedTypeWrapper.TypeContainer\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    TypeContainer.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return TypeContainer;\n                })();\n\n                return NestedTypeWrapper;\n            })();\n\n            v1.Protocol = (function() {\n\n                /**\n                 * Properties of a Protocol.\n                 * @memberof syft_proto.execution.v1\n                 * @interface IProtocol\n                 * @property {syft_proto.types.syft.v1.IId|null} [id] Protocol id\n                 * @property {string|null} [name] Protocol name\n                 * @property {Object.<string,syft_proto.execution.v1.IRole>|null} [roles] Protocol roles\n                 * @property {Array.<string>|null} [tags] Protocol tags\n                 * @property {string|null} [description] Protocol description\n                 */\n\n                /**\n                 * Constructs a new Protocol.\n                 * @memberof syft_proto.execution.v1\n                 * @classdesc Represents a Protocol.\n                 * @implements IProtocol\n                 * @constructor\n                 * @param {syft_proto.execution.v1.IProtocol=} [properties] Properties to set\n                 */\n                function Protocol(properties) {\n                    this.roles = {};\n                    this.tags = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * Protocol id.\n                 * @member {syft_proto.types.syft.v1.IId|null|undefined} id\n                 * @memberof syft_proto.execution.v1.Protocol\n                 * @instance\n                 */\n                Protocol.prototype.id = null;\n\n                /**\n                 * Protocol name.\n                 * @member {string} name\n                 * @memberof syft_proto.execution.v1.Protocol\n                 * @instance\n                 */\n                Protocol.prototype.name = \"\";\n\n                /**\n                 * Protocol roles.\n                 * @member {Object.<string,syft_proto.execution.v1.IRole>} roles\n                 * @memberof syft_proto.execution.v1.Protocol\n                 * @instance\n                 */\n                Protocol.prototype.roles = $util.emptyObject;\n\n                /**\n                 * Protocol tags.\n                 * @member {Array.<string>} tags\n                 * @memberof syft_proto.execution.v1.Protocol\n                 * @instance\n                 */\n                Protocol.prototype.tags = $util.emptyArray;\n\n                /**\n                 * Protocol description.\n                 * @member {string} description\n                 * @memberof syft_proto.execution.v1.Protocol\n                 * @instance\n                 */\n                Protocol.prototype.description = \"\";\n\n                /**\n                 * Creates a new Protocol instance using the specified properties.\n                 * @function create\n                 * @memberof syft_proto.execution.v1.Protocol\n                 * @static\n                 * @param {syft_proto.execution.v1.IProtocol=} [properties] Properties to set\n                 * @returns {syft_proto.execution.v1.Protocol} Protocol instance\n                 */\n                Protocol.create = function create(properties) {\n                    return new Protocol(properties);\n                };\n\n                /**\n                 * Encodes the specified Protocol message. Does not implicitly {@link syft_proto.execution.v1.Protocol.verify|verify} messages.\n                 * @function encode\n                 * @memberof syft_proto.execution.v1.Protocol\n                 * @static\n                 * @param {syft_proto.execution.v1.IProtocol} message Protocol message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Protocol.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        $root.syft_proto.types.syft.v1.Id.encode(message.id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n                    if (message.roles != null && message.hasOwnProperty(\"roles\"))\n                        for (var keys = Object.keys(message.roles), i = 0; i < keys.length; ++i) {\n                            writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                            $root.syft_proto.execution.v1.Role.encode(message.roles[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n                        }\n                    if (message.tags != null && message.tags.length)\n                        for (var i = 0; i < message.tags.length; ++i)\n                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.tags[i]);\n                    if (message.description != null && message.hasOwnProperty(\"description\"))\n                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.description);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified Protocol message, length delimited. Does not implicitly {@link syft_proto.execution.v1.Protocol.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof syft_proto.execution.v1.Protocol\n                 * @static\n                 * @param {syft_proto.execution.v1.IProtocol} message Protocol message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Protocol.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a Protocol message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof syft_proto.execution.v1.Protocol\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {syft_proto.execution.v1.Protocol} Protocol\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Protocol.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.execution.v1.Protocol(), key;\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.name = reader.string();\n                            break;\n                        case 3:\n                            reader.skip().pos++;\n                            if (message.roles === $util.emptyObject)\n                                message.roles = {};\n                            key = reader.string();\n                            reader.pos++;\n                            message.roles[key] = $root.syft_proto.execution.v1.Role.decode(reader, reader.uint32());\n                            break;\n                        case 4:\n                            if (!(message.tags && message.tags.length))\n                                message.tags = [];\n                            message.tags.push(reader.string());\n                            break;\n                        case 5:\n                            message.description = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a Protocol message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof syft_proto.execution.v1.Protocol\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {syft_proto.execution.v1.Protocol} Protocol\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Protocol.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a Protocol message.\n                 * @function verify\n                 * @memberof syft_proto.execution.v1.Protocol\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                Protocol.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.id != null && message.hasOwnProperty(\"id\")) {\n                        var error = $root.syft_proto.types.syft.v1.Id.verify(message.id);\n                        if (error)\n                            return \"id.\" + error;\n                    }\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        if (!$util.isString(message.name))\n                            return \"name: string expected\";\n                    if (message.roles != null && message.hasOwnProperty(\"roles\")) {\n                        if (!$util.isObject(message.roles))\n                            return \"roles: object expected\";\n                        var key = Object.keys(message.roles);\n                        for (var i = 0; i < key.length; ++i) {\n                            var error = $root.syft_proto.execution.v1.Role.verify(message.roles[key[i]]);\n                            if (error)\n                                return \"roles.\" + error;\n                        }\n                    }\n                    if (message.tags != null && message.hasOwnProperty(\"tags\")) {\n                        if (!Array.isArray(message.tags))\n                            return \"tags: array expected\";\n                        for (var i = 0; i < message.tags.length; ++i)\n                            if (!$util.isString(message.tags[i]))\n                                return \"tags: string[] expected\";\n                    }\n                    if (message.description != null && message.hasOwnProperty(\"description\"))\n                        if (!$util.isString(message.description))\n                            return \"description: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a Protocol message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof syft_proto.execution.v1.Protocol\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {syft_proto.execution.v1.Protocol} Protocol\n                 */\n                Protocol.fromObject = function fromObject(object) {\n                    if (object instanceof $root.syft_proto.execution.v1.Protocol)\n                        return object;\n                    var message = new $root.syft_proto.execution.v1.Protocol();\n                    if (object.id != null) {\n                        if (typeof object.id !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.Protocol.id: object expected\");\n                        message.id = $root.syft_proto.types.syft.v1.Id.fromObject(object.id);\n                    }\n                    if (object.name != null)\n                        message.name = String(object.name);\n                    if (object.roles) {\n                        if (typeof object.roles !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.Protocol.roles: object expected\");\n                        message.roles = {};\n                        for (var keys = Object.keys(object.roles), i = 0; i < keys.length; ++i) {\n                            if (typeof object.roles[keys[i]] !== \"object\")\n                                throw TypeError(\".syft_proto.execution.v1.Protocol.roles: object expected\");\n                            message.roles[keys[i]] = $root.syft_proto.execution.v1.Role.fromObject(object.roles[keys[i]]);\n                        }\n                    }\n                    if (object.tags) {\n                        if (!Array.isArray(object.tags))\n                            throw TypeError(\".syft_proto.execution.v1.Protocol.tags: array expected\");\n                        message.tags = [];\n                        for (var i = 0; i < object.tags.length; ++i)\n                            message.tags[i] = String(object.tags[i]);\n                    }\n                    if (object.description != null)\n                        message.description = String(object.description);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a Protocol message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof syft_proto.execution.v1.Protocol\n                 * @static\n                 * @param {syft_proto.execution.v1.Protocol} message Protocol\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                Protocol.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.tags = [];\n                    if (options.objects || options.defaults)\n                        object.roles = {};\n                    if (options.defaults) {\n                        object.id = null;\n                        object.name = \"\";\n                        object.description = \"\";\n                    }\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        object.id = $root.syft_proto.types.syft.v1.Id.toObject(message.id, options);\n                    if (message.name != null && message.hasOwnProperty(\"name\"))\n                        object.name = message.name;\n                    var keys2;\n                    if (message.roles && (keys2 = Object.keys(message.roles)).length) {\n                        object.roles = {};\n                        for (var j = 0; j < keys2.length; ++j)\n                            object.roles[keys2[j]] = $root.syft_proto.execution.v1.Role.toObject(message.roles[keys2[j]], options);\n                    }\n                    if (message.tags && message.tags.length) {\n                        object.tags = [];\n                        for (var j = 0; j < message.tags.length; ++j)\n                            object.tags[j] = message.tags[j];\n                    }\n                    if (message.description != null && message.hasOwnProperty(\"description\"))\n                        object.description = message.description;\n                    return object;\n                };\n\n                /**\n                 * Converts this Protocol to JSON.\n                 * @function toJSON\n                 * @memberof syft_proto.execution.v1.Protocol\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                Protocol.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return Protocol;\n            })();\n\n            v1.StorageAction = (function() {\n\n                /**\n                 * Properties of a StorageAction.\n                 * @memberof syft_proto.execution.v1\n                 * @interface IStorageAction\n                 * @property {string|null} [command] StorageAction command\n                 * @property {syft_proto.types.syft.v1.IId|null} [target_id] StorageAction target_id\n                 * @property {syft_proto.generic.pointers.v1.IPointerTensor|null} [target_pointer] StorageAction target_pointer\n                 * @property {syft_proto.execution.v1.IPlaceholderId|null} [target_placeholder_id] StorageAction target_placeholder_id\n                 * @property {syft_proto.types.torch.v1.ITorchTensor|null} [target_tensor] StorageAction target_tensor\n                 * @property {Array.<syft_proto.types.syft.v1.IArg>|null} [args] StorageAction args\n                 * @property {Object.<string,syft_proto.types.syft.v1.IArg>|null} [kwargs] StorageAction kwargs\n                 * @property {Array.<syft_proto.types.syft.v1.IId>|null} [return_ids] StorageAction return_ids\n                 * @property {Array.<syft_proto.execution.v1.IPlaceholderId>|null} [return_placeholder_ids] StorageAction return_placeholder_ids\n                 */\n\n                /**\n                 * Constructs a new StorageAction.\n                 * @memberof syft_proto.execution.v1\n                 * @classdesc Represents a StorageAction.\n                 * @implements IStorageAction\n                 * @constructor\n                 * @param {syft_proto.execution.v1.IStorageAction=} [properties] Properties to set\n                 */\n                function StorageAction(properties) {\n                    this.args = [];\n                    this.kwargs = {};\n                    this.return_ids = [];\n                    this.return_placeholder_ids = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * StorageAction command.\n                 * @member {string} command\n                 * @memberof syft_proto.execution.v1.StorageAction\n                 * @instance\n                 */\n                StorageAction.prototype.command = \"\";\n\n                /**\n                 * StorageAction target_id.\n                 * @member {syft_proto.types.syft.v1.IId|null|undefined} target_id\n                 * @memberof syft_proto.execution.v1.StorageAction\n                 * @instance\n                 */\n                StorageAction.prototype.target_id = null;\n\n                /**\n                 * StorageAction target_pointer.\n                 * @member {syft_proto.generic.pointers.v1.IPointerTensor|null|undefined} target_pointer\n                 * @memberof syft_proto.execution.v1.StorageAction\n                 * @instance\n                 */\n                StorageAction.prototype.target_pointer = null;\n\n                /**\n                 * StorageAction target_placeholder_id.\n                 * @member {syft_proto.execution.v1.IPlaceholderId|null|undefined} target_placeholder_id\n                 * @memberof syft_proto.execution.v1.StorageAction\n                 * @instance\n                 */\n                StorageAction.prototype.target_placeholder_id = null;\n\n                /**\n                 * StorageAction target_tensor.\n                 * @member {syft_proto.types.torch.v1.ITorchTensor|null|undefined} target_tensor\n                 * @memberof syft_proto.execution.v1.StorageAction\n                 * @instance\n                 */\n                StorageAction.prototype.target_tensor = null;\n\n                /**\n                 * StorageAction args.\n                 * @member {Array.<syft_proto.types.syft.v1.IArg>} args\n                 * @memberof syft_proto.execution.v1.StorageAction\n                 * @instance\n                 */\n                StorageAction.prototype.args = $util.emptyArray;\n\n                /**\n                 * StorageAction kwargs.\n                 * @member {Object.<string,syft_proto.types.syft.v1.IArg>} kwargs\n                 * @memberof syft_proto.execution.v1.StorageAction\n                 * @instance\n                 */\n                StorageAction.prototype.kwargs = $util.emptyObject;\n\n                /**\n                 * StorageAction return_ids.\n                 * @member {Array.<syft_proto.types.syft.v1.IId>} return_ids\n                 * @memberof syft_proto.execution.v1.StorageAction\n                 * @instance\n                 */\n                StorageAction.prototype.return_ids = $util.emptyArray;\n\n                /**\n                 * StorageAction return_placeholder_ids.\n                 * @member {Array.<syft_proto.execution.v1.IPlaceholderId>} return_placeholder_ids\n                 * @memberof syft_proto.execution.v1.StorageAction\n                 * @instance\n                 */\n                StorageAction.prototype.return_placeholder_ids = $util.emptyArray;\n\n                // OneOf field names bound to virtual getters and setters\n                var $oneOfFields;\n\n                /**\n                 * StorageAction target.\n                 * @member {\"target_id\"|\"target_pointer\"|\"target_placeholder_id\"|\"target_tensor\"|undefined} target\n                 * @memberof syft_proto.execution.v1.StorageAction\n                 * @instance\n                 */\n                Object.defineProperty(StorageAction.prototype, \"target\", {\n                    get: $util.oneOfGetter($oneOfFields = [\"target_id\", \"target_pointer\", \"target_placeholder_id\", \"target_tensor\"]),\n                    set: $util.oneOfSetter($oneOfFields)\n                });\n\n                /**\n                 * Creates a new StorageAction instance using the specified properties.\n                 * @function create\n                 * @memberof syft_proto.execution.v1.StorageAction\n                 * @static\n                 * @param {syft_proto.execution.v1.IStorageAction=} [properties] Properties to set\n                 * @returns {syft_proto.execution.v1.StorageAction} StorageAction instance\n                 */\n                StorageAction.create = function create(properties) {\n                    return new StorageAction(properties);\n                };\n\n                /**\n                 * Encodes the specified StorageAction message. Does not implicitly {@link syft_proto.execution.v1.StorageAction.verify|verify} messages.\n                 * @function encode\n                 * @memberof syft_proto.execution.v1.StorageAction\n                 * @static\n                 * @param {syft_proto.execution.v1.IStorageAction} message StorageAction message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                StorageAction.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.command != null && message.hasOwnProperty(\"command\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.command);\n                    if (message.target_pointer != null && message.hasOwnProperty(\"target_pointer\"))\n                        $root.syft_proto.generic.pointers.v1.PointerTensor.encode(message.target_pointer, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    if (message.target_placeholder_id != null && message.hasOwnProperty(\"target_placeholder_id\"))\n                        $root.syft_proto.execution.v1.PlaceholderId.encode(message.target_placeholder_id, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                    if (message.target_tensor != null && message.hasOwnProperty(\"target_tensor\"))\n                        $root.syft_proto.types.torch.v1.TorchTensor.encode(message.target_tensor, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                    if (message.args != null && message.args.length)\n                        for (var i = 0; i < message.args.length; ++i)\n                            $root.syft_proto.types.syft.v1.Arg.encode(message.args[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                    if (message.kwargs != null && message.hasOwnProperty(\"kwargs\"))\n                        for (var keys = Object.keys(message.kwargs), i = 0; i < keys.length; ++i) {\n                            writer.uint32(/* id 6, wireType 2 =*/50).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                            $root.syft_proto.types.syft.v1.Arg.encode(message.kwargs[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n                        }\n                    if (message.return_ids != null && message.return_ids.length)\n                        for (var i = 0; i < message.return_ids.length; ++i)\n                            $root.syft_proto.types.syft.v1.Id.encode(message.return_ids[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                    if (message.return_placeholder_ids != null && message.return_placeholder_ids.length)\n                        for (var i = 0; i < message.return_placeholder_ids.length; ++i)\n                            $root.syft_proto.execution.v1.PlaceholderId.encode(message.return_placeholder_ids[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n                    if (message.target_id != null && message.hasOwnProperty(\"target_id\"))\n                        $root.syft_proto.types.syft.v1.Id.encode(message.target_id, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified StorageAction message, length delimited. Does not implicitly {@link syft_proto.execution.v1.StorageAction.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof syft_proto.execution.v1.StorageAction\n                 * @static\n                 * @param {syft_proto.execution.v1.IStorageAction} message StorageAction message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                StorageAction.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a StorageAction message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof syft_proto.execution.v1.StorageAction\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {syft_proto.execution.v1.StorageAction} StorageAction\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                StorageAction.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.execution.v1.StorageAction(), key;\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.command = reader.string();\n                            break;\n                        case 9:\n                            message.target_id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.target_pointer = $root.syft_proto.generic.pointers.v1.PointerTensor.decode(reader, reader.uint32());\n                            break;\n                        case 3:\n                            message.target_placeholder_id = $root.syft_proto.execution.v1.PlaceholderId.decode(reader, reader.uint32());\n                            break;\n                        case 4:\n                            message.target_tensor = $root.syft_proto.types.torch.v1.TorchTensor.decode(reader, reader.uint32());\n                            break;\n                        case 5:\n                            if (!(message.args && message.args.length))\n                                message.args = [];\n                            message.args.push($root.syft_proto.types.syft.v1.Arg.decode(reader, reader.uint32()));\n                            break;\n                        case 6:\n                            reader.skip().pos++;\n                            if (message.kwargs === $util.emptyObject)\n                                message.kwargs = {};\n                            key = reader.string();\n                            reader.pos++;\n                            message.kwargs[key] = $root.syft_proto.types.syft.v1.Arg.decode(reader, reader.uint32());\n                            break;\n                        case 7:\n                            if (!(message.return_ids && message.return_ids.length))\n                                message.return_ids = [];\n                            message.return_ids.push($root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32()));\n                            break;\n                        case 8:\n                            if (!(message.return_placeholder_ids && message.return_placeholder_ids.length))\n                                message.return_placeholder_ids = [];\n                            message.return_placeholder_ids.push($root.syft_proto.execution.v1.PlaceholderId.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a StorageAction message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof syft_proto.execution.v1.StorageAction\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {syft_proto.execution.v1.StorageAction} StorageAction\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                StorageAction.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a StorageAction message.\n                 * @function verify\n                 * @memberof syft_proto.execution.v1.StorageAction\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                StorageAction.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    var properties = {};\n                    if (message.command != null && message.hasOwnProperty(\"command\"))\n                        if (!$util.isString(message.command))\n                            return \"command: string expected\";\n                    if (message.target_id != null && message.hasOwnProperty(\"target_id\")) {\n                        properties.target = 1;\n                        {\n                            var error = $root.syft_proto.types.syft.v1.Id.verify(message.target_id);\n                            if (error)\n                                return \"target_id.\" + error;\n                        }\n                    }\n                    if (message.target_pointer != null && message.hasOwnProperty(\"target_pointer\")) {\n                        if (properties.target === 1)\n                            return \"target: multiple values\";\n                        properties.target = 1;\n                        {\n                            var error = $root.syft_proto.generic.pointers.v1.PointerTensor.verify(message.target_pointer);\n                            if (error)\n                                return \"target_pointer.\" + error;\n                        }\n                    }\n                    if (message.target_placeholder_id != null && message.hasOwnProperty(\"target_placeholder_id\")) {\n                        if (properties.target === 1)\n                            return \"target: multiple values\";\n                        properties.target = 1;\n                        {\n                            var error = $root.syft_proto.execution.v1.PlaceholderId.verify(message.target_placeholder_id);\n                            if (error)\n                                return \"target_placeholder_id.\" + error;\n                        }\n                    }\n                    if (message.target_tensor != null && message.hasOwnProperty(\"target_tensor\")) {\n                        if (properties.target === 1)\n                            return \"target: multiple values\";\n                        properties.target = 1;\n                        {\n                            var error = $root.syft_proto.types.torch.v1.TorchTensor.verify(message.target_tensor);\n                            if (error)\n                                return \"target_tensor.\" + error;\n                        }\n                    }\n                    if (message.args != null && message.hasOwnProperty(\"args\")) {\n                        if (!Array.isArray(message.args))\n                            return \"args: array expected\";\n                        for (var i = 0; i < message.args.length; ++i) {\n                            var error = $root.syft_proto.types.syft.v1.Arg.verify(message.args[i]);\n                            if (error)\n                                return \"args.\" + error;\n                        }\n                    }\n                    if (message.kwargs != null && message.hasOwnProperty(\"kwargs\")) {\n                        if (!$util.isObject(message.kwargs))\n                            return \"kwargs: object expected\";\n                        var key = Object.keys(message.kwargs);\n                        for (var i = 0; i < key.length; ++i) {\n                            var error = $root.syft_proto.types.syft.v1.Arg.verify(message.kwargs[key[i]]);\n                            if (error)\n                                return \"kwargs.\" + error;\n                        }\n                    }\n                    if (message.return_ids != null && message.hasOwnProperty(\"return_ids\")) {\n                        if (!Array.isArray(message.return_ids))\n                            return \"return_ids: array expected\";\n                        for (var i = 0; i < message.return_ids.length; ++i) {\n                            var error = $root.syft_proto.types.syft.v1.Id.verify(message.return_ids[i]);\n                            if (error)\n                                return \"return_ids.\" + error;\n                        }\n                    }\n                    if (message.return_placeholder_ids != null && message.hasOwnProperty(\"return_placeholder_ids\")) {\n                        if (!Array.isArray(message.return_placeholder_ids))\n                            return \"return_placeholder_ids: array expected\";\n                        for (var i = 0; i < message.return_placeholder_ids.length; ++i) {\n                            var error = $root.syft_proto.execution.v1.PlaceholderId.verify(message.return_placeholder_ids[i]);\n                            if (error)\n                                return \"return_placeholder_ids.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a StorageAction message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof syft_proto.execution.v1.StorageAction\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {syft_proto.execution.v1.StorageAction} StorageAction\n                 */\n                StorageAction.fromObject = function fromObject(object) {\n                    if (object instanceof $root.syft_proto.execution.v1.StorageAction)\n                        return object;\n                    var message = new $root.syft_proto.execution.v1.StorageAction();\n                    if (object.command != null)\n                        message.command = String(object.command);\n                    if (object.target_id != null) {\n                        if (typeof object.target_id !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.StorageAction.target_id: object expected\");\n                        message.target_id = $root.syft_proto.types.syft.v1.Id.fromObject(object.target_id);\n                    }\n                    if (object.target_pointer != null) {\n                        if (typeof object.target_pointer !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.StorageAction.target_pointer: object expected\");\n                        message.target_pointer = $root.syft_proto.generic.pointers.v1.PointerTensor.fromObject(object.target_pointer);\n                    }\n                    if (object.target_placeholder_id != null) {\n                        if (typeof object.target_placeholder_id !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.StorageAction.target_placeholder_id: object expected\");\n                        message.target_placeholder_id = $root.syft_proto.execution.v1.PlaceholderId.fromObject(object.target_placeholder_id);\n                    }\n                    if (object.target_tensor != null) {\n                        if (typeof object.target_tensor !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.StorageAction.target_tensor: object expected\");\n                        message.target_tensor = $root.syft_proto.types.torch.v1.TorchTensor.fromObject(object.target_tensor);\n                    }\n                    if (object.args) {\n                        if (!Array.isArray(object.args))\n                            throw TypeError(\".syft_proto.execution.v1.StorageAction.args: array expected\");\n                        message.args = [];\n                        for (var i = 0; i < object.args.length; ++i) {\n                            if (typeof object.args[i] !== \"object\")\n                                throw TypeError(\".syft_proto.execution.v1.StorageAction.args: object expected\");\n                            message.args[i] = $root.syft_proto.types.syft.v1.Arg.fromObject(object.args[i]);\n                        }\n                    }\n                    if (object.kwargs) {\n                        if (typeof object.kwargs !== \"object\")\n                            throw TypeError(\".syft_proto.execution.v1.StorageAction.kwargs: object expected\");\n                        message.kwargs = {};\n                        for (var keys = Object.keys(object.kwargs), i = 0; i < keys.length; ++i) {\n                            if (typeof object.kwargs[keys[i]] !== \"object\")\n                                throw TypeError(\".syft_proto.execution.v1.StorageAction.kwargs: object expected\");\n                            message.kwargs[keys[i]] = $root.syft_proto.types.syft.v1.Arg.fromObject(object.kwargs[keys[i]]);\n                        }\n                    }\n                    if (object.return_ids) {\n                        if (!Array.isArray(object.return_ids))\n                            throw TypeError(\".syft_proto.execution.v1.StorageAction.return_ids: array expected\");\n                        message.return_ids = [];\n                        for (var i = 0; i < object.return_ids.length; ++i) {\n                            if (typeof object.return_ids[i] !== \"object\")\n                                throw TypeError(\".syft_proto.execution.v1.StorageAction.return_ids: object expected\");\n                            message.return_ids[i] = $root.syft_proto.types.syft.v1.Id.fromObject(object.return_ids[i]);\n                        }\n                    }\n                    if (object.return_placeholder_ids) {\n                        if (!Array.isArray(object.return_placeholder_ids))\n                            throw TypeError(\".syft_proto.execution.v1.StorageAction.return_placeholder_ids: array expected\");\n                        message.return_placeholder_ids = [];\n                        for (var i = 0; i < object.return_placeholder_ids.length; ++i) {\n                            if (typeof object.return_placeholder_ids[i] !== \"object\")\n                                throw TypeError(\".syft_proto.execution.v1.StorageAction.return_placeholder_ids: object expected\");\n                            message.return_placeholder_ids[i] = $root.syft_proto.execution.v1.PlaceholderId.fromObject(object.return_placeholder_ids[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a StorageAction message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof syft_proto.execution.v1.StorageAction\n                 * @static\n                 * @param {syft_proto.execution.v1.StorageAction} message StorageAction\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                StorageAction.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults) {\n                        object.args = [];\n                        object.return_ids = [];\n                        object.return_placeholder_ids = [];\n                    }\n                    if (options.objects || options.defaults)\n                        object.kwargs = {};\n                    if (options.defaults)\n                        object.command = \"\";\n                    if (message.command != null && message.hasOwnProperty(\"command\"))\n                        object.command = message.command;\n                    if (message.target_pointer != null && message.hasOwnProperty(\"target_pointer\")) {\n                        object.target_pointer = $root.syft_proto.generic.pointers.v1.PointerTensor.toObject(message.target_pointer, options);\n                        if (options.oneofs)\n                            object.target = \"target_pointer\";\n                    }\n                    if (message.target_placeholder_id != null && message.hasOwnProperty(\"target_placeholder_id\")) {\n                        object.target_placeholder_id = $root.syft_proto.execution.v1.PlaceholderId.toObject(message.target_placeholder_id, options);\n                        if (options.oneofs)\n                            object.target = \"target_placeholder_id\";\n                    }\n                    if (message.target_tensor != null && message.hasOwnProperty(\"target_tensor\")) {\n                        object.target_tensor = $root.syft_proto.types.torch.v1.TorchTensor.toObject(message.target_tensor, options);\n                        if (options.oneofs)\n                            object.target = \"target_tensor\";\n                    }\n                    if (message.args && message.args.length) {\n                        object.args = [];\n                        for (var j = 0; j < message.args.length; ++j)\n                            object.args[j] = $root.syft_proto.types.syft.v1.Arg.toObject(message.args[j], options);\n                    }\n                    var keys2;\n                    if (message.kwargs && (keys2 = Object.keys(message.kwargs)).length) {\n                        object.kwargs = {};\n                        for (var j = 0; j < keys2.length; ++j)\n                            object.kwargs[keys2[j]] = $root.syft_proto.types.syft.v1.Arg.toObject(message.kwargs[keys2[j]], options);\n                    }\n                    if (message.return_ids && message.return_ids.length) {\n                        object.return_ids = [];\n                        for (var j = 0; j < message.return_ids.length; ++j)\n                            object.return_ids[j] = $root.syft_proto.types.syft.v1.Id.toObject(message.return_ids[j], options);\n                    }\n                    if (message.return_placeholder_ids && message.return_placeholder_ids.length) {\n                        object.return_placeholder_ids = [];\n                        for (var j = 0; j < message.return_placeholder_ids.length; ++j)\n                            object.return_placeholder_ids[j] = $root.syft_proto.execution.v1.PlaceholderId.toObject(message.return_placeholder_ids[j], options);\n                    }\n                    if (message.target_id != null && message.hasOwnProperty(\"target_id\")) {\n                        object.target_id = $root.syft_proto.types.syft.v1.Id.toObject(message.target_id, options);\n                        if (options.oneofs)\n                            object.target = \"target_id\";\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this StorageAction to JSON.\n                 * @function toJSON\n                 * @memberof syft_proto.execution.v1.StorageAction\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                StorageAction.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return StorageAction;\n            })();\n\n            return v1;\n        })();\n\n        return execution;\n    })();\n\n    syft_proto.types = (function() {\n\n        /**\n         * Namespace types.\n         * @memberof syft_proto\n         * @namespace\n         */\n        var types = {};\n\n        types.syft = (function() {\n\n            /**\n             * Namespace syft.\n             * @memberof syft_proto.types\n             * @namespace\n             */\n            var syft = {};\n\n            syft.v1 = (function() {\n\n                /**\n                 * Namespace v1.\n                 * @memberof syft_proto.types.syft\n                 * @namespace\n                 */\n                var v1 = {};\n\n                v1.Id = (function() {\n\n                    /**\n                     * Properties of an Id.\n                     * @memberof syft_proto.types.syft.v1\n                     * @interface IId\n                     * @property {number|Long|null} [id_int] Id id_int\n                     * @property {string|null} [id_str] Id id_str\n                     */\n\n                    /**\n                     * Constructs a new Id.\n                     * @memberof syft_proto.types.syft.v1\n                     * @classdesc Represents an Id.\n                     * @implements IId\n                     * @constructor\n                     * @param {syft_proto.types.syft.v1.IId=} [properties] Properties to set\n                     */\n                    function Id(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Id id_int.\n                     * @member {number|Long} id_int\n                     * @memberof syft_proto.types.syft.v1.Id\n                     * @instance\n                     */\n                    Id.prototype.id_int = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                    /**\n                     * Id id_str.\n                     * @member {string} id_str\n                     * @memberof syft_proto.types.syft.v1.Id\n                     * @instance\n                     */\n                    Id.prototype.id_str = \"\";\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * Id id.\n                     * @member {\"id_int\"|\"id_str\"|undefined} id\n                     * @memberof syft_proto.types.syft.v1.Id\n                     * @instance\n                     */\n                    Object.defineProperty(Id.prototype, \"id\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"id_int\", \"id_str\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new Id instance using the specified properties.\n                     * @function create\n                     * @memberof syft_proto.types.syft.v1.Id\n                     * @static\n                     * @param {syft_proto.types.syft.v1.IId=} [properties] Properties to set\n                     * @returns {syft_proto.types.syft.v1.Id} Id instance\n                     */\n                    Id.create = function create(properties) {\n                        return new Id(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Id message. Does not implicitly {@link syft_proto.types.syft.v1.Id.verify|verify} messages.\n                     * @function encode\n                     * @memberof syft_proto.types.syft.v1.Id\n                     * @static\n                     * @param {syft_proto.types.syft.v1.IId} message Id message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Id.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.id_int != null && message.hasOwnProperty(\"id_int\"))\n                            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.id_int);\n                        if (message.id_str != null && message.hasOwnProperty(\"id_str\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.id_str);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Id message, length delimited. Does not implicitly {@link syft_proto.types.syft.v1.Id.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof syft_proto.types.syft.v1.Id\n                     * @static\n                     * @param {syft_proto.types.syft.v1.IId} message Id message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Id.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an Id message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof syft_proto.types.syft.v1.Id\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {syft_proto.types.syft.v1.Id} Id\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Id.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.types.syft.v1.Id();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.id_int = reader.int64();\n                                break;\n                            case 2:\n                                message.id_str = reader.string();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an Id message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof syft_proto.types.syft.v1.Id\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {syft_proto.types.syft.v1.Id} Id\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Id.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an Id message.\n                     * @function verify\n                     * @memberof syft_proto.types.syft.v1.Id\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Id.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.id_int != null && message.hasOwnProperty(\"id_int\")) {\n                            properties.id = 1;\n                            if (!$util.isInteger(message.id_int) && !(message.id_int && $util.isInteger(message.id_int.low) && $util.isInteger(message.id_int.high)))\n                                return \"id_int: integer|Long expected\";\n                        }\n                        if (message.id_str != null && message.hasOwnProperty(\"id_str\")) {\n                            if (properties.id === 1)\n                                return \"id: multiple values\";\n                            properties.id = 1;\n                            if (!$util.isString(message.id_str))\n                                return \"id_str: string expected\";\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates an Id message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof syft_proto.types.syft.v1.Id\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {syft_proto.types.syft.v1.Id} Id\n                     */\n                    Id.fromObject = function fromObject(object) {\n                        if (object instanceof $root.syft_proto.types.syft.v1.Id)\n                            return object;\n                        var message = new $root.syft_proto.types.syft.v1.Id();\n                        if (object.id_int != null)\n                            if ($util.Long)\n                                (message.id_int = $util.Long.fromValue(object.id_int)).unsigned = false;\n                            else if (typeof object.id_int === \"string\")\n                                message.id_int = parseInt(object.id_int, 10);\n                            else if (typeof object.id_int === \"number\")\n                                message.id_int = object.id_int;\n                            else if (typeof object.id_int === \"object\")\n                                message.id_int = new $util.LongBits(object.id_int.low >>> 0, object.id_int.high >>> 0).toNumber();\n                        if (object.id_str != null)\n                            message.id_str = String(object.id_str);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an Id message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof syft_proto.types.syft.v1.Id\n                     * @static\n                     * @param {syft_proto.types.syft.v1.Id} message Id\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Id.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (message.id_int != null && message.hasOwnProperty(\"id_int\")) {\n                            if (typeof message.id_int === \"number\")\n                                object.id_int = options.longs === String ? String(message.id_int) : message.id_int;\n                            else\n                                object.id_int = options.longs === String ? $util.Long.prototype.toString.call(message.id_int) : options.longs === Number ? new $util.LongBits(message.id_int.low >>> 0, message.id_int.high >>> 0).toNumber() : message.id_int;\n                            if (options.oneofs)\n                                object.id = \"id_int\";\n                        }\n                        if (message.id_str != null && message.hasOwnProperty(\"id_str\")) {\n                            object.id_str = message.id_str;\n                            if (options.oneofs)\n                                object.id = \"id_str\";\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Id to JSON.\n                     * @function toJSON\n                     * @memberof syft_proto.types.syft.v1.Id\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Id.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return Id;\n                })();\n\n                v1.Shape = (function() {\n\n                    /**\n                     * Properties of a Shape.\n                     * @memberof syft_proto.types.syft.v1\n                     * @interface IShape\n                     * @property {Array.<number>|null} [dims] Shape dims\n                     */\n\n                    /**\n                     * Constructs a new Shape.\n                     * @memberof syft_proto.types.syft.v1\n                     * @classdesc Represents a Shape.\n                     * @implements IShape\n                     * @constructor\n                     * @param {syft_proto.types.syft.v1.IShape=} [properties] Properties to set\n                     */\n                    function Shape(properties) {\n                        this.dims = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Shape dims.\n                     * @member {Array.<number>} dims\n                     * @memberof syft_proto.types.syft.v1.Shape\n                     * @instance\n                     */\n                    Shape.prototype.dims = $util.emptyArray;\n\n                    /**\n                     * Creates a new Shape instance using the specified properties.\n                     * @function create\n                     * @memberof syft_proto.types.syft.v1.Shape\n                     * @static\n                     * @param {syft_proto.types.syft.v1.IShape=} [properties] Properties to set\n                     * @returns {syft_proto.types.syft.v1.Shape} Shape instance\n                     */\n                    Shape.create = function create(properties) {\n                        return new Shape(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Shape message. Does not implicitly {@link syft_proto.types.syft.v1.Shape.verify|verify} messages.\n                     * @function encode\n                     * @memberof syft_proto.types.syft.v1.Shape\n                     * @static\n                     * @param {syft_proto.types.syft.v1.IShape} message Shape message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Shape.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dims != null && message.dims.length) {\n                            writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                            for (var i = 0; i < message.dims.length; ++i)\n                                writer.int32(message.dims[i]);\n                            writer.ldelim();\n                        }\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Shape message, length delimited. Does not implicitly {@link syft_proto.types.syft.v1.Shape.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof syft_proto.types.syft.v1.Shape\n                     * @static\n                     * @param {syft_proto.types.syft.v1.IShape} message Shape message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Shape.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Shape message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof syft_proto.types.syft.v1.Shape\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {syft_proto.types.syft.v1.Shape} Shape\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Shape.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.types.syft.v1.Shape();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                if (!(message.dims && message.dims.length))\n                                    message.dims = [];\n                                if ((tag & 7) === 2) {\n                                    var end2 = reader.uint32() + reader.pos;\n                                    while (reader.pos < end2)\n                                        message.dims.push(reader.int32());\n                                } else\n                                    message.dims.push(reader.int32());\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Shape message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof syft_proto.types.syft.v1.Shape\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {syft_proto.types.syft.v1.Shape} Shape\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Shape.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Shape message.\n                     * @function verify\n                     * @memberof syft_proto.types.syft.v1.Shape\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Shape.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                            if (!Array.isArray(message.dims))\n                                return \"dims: array expected\";\n                            for (var i = 0; i < message.dims.length; ++i)\n                                if (!$util.isInteger(message.dims[i]))\n                                    return \"dims: integer[] expected\";\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Shape message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof syft_proto.types.syft.v1.Shape\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {syft_proto.types.syft.v1.Shape} Shape\n                     */\n                    Shape.fromObject = function fromObject(object) {\n                        if (object instanceof $root.syft_proto.types.syft.v1.Shape)\n                            return object;\n                        var message = new $root.syft_proto.types.syft.v1.Shape();\n                        if (object.dims) {\n                            if (!Array.isArray(object.dims))\n                                throw TypeError(\".syft_proto.types.syft.v1.Shape.dims: array expected\");\n                            message.dims = [];\n                            for (var i = 0; i < object.dims.length; ++i)\n                                message.dims[i] = object.dims[i] | 0;\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Shape message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof syft_proto.types.syft.v1.Shape\n                     * @static\n                     * @param {syft_proto.types.syft.v1.Shape} message Shape\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Shape.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dims = [];\n                        if (message.dims && message.dims.length) {\n                            object.dims = [];\n                            for (var j = 0; j < message.dims.length; ++j)\n                                object.dims[j] = message.dims[j];\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Shape to JSON.\n                     * @function toJSON\n                     * @memberof syft_proto.types.syft.v1.Shape\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Shape.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return Shape;\n                })();\n\n                v1.Arg = (function() {\n\n                    /**\n                     * Properties of an Arg.\n                     * @memberof syft_proto.types.syft.v1\n                     * @interface IArg\n                     * @property {boolean|null} [arg_bool] Arg arg_bool\n                     * @property {number|Long|null} [arg_int] Arg arg_int\n                     * @property {number|null} [arg_float] Arg arg_float\n                     * @property {string|null} [arg_str] Arg arg_str\n                     * @property {syft_proto.types.syft.v1.IShape|null} [arg_shape] Arg arg_shape\n                     * @property {syft_proto.types.torch.v1.ITorchTensor|null} [arg_tensor] Arg arg_tensor\n                     * @property {syft_proto.types.torch.v1.IParameter|null} [arg_torch_param] Arg arg_torch_param\n                     * @property {syft_proto.generic.pointers.v1.IPointerTensor|null} [arg_pointer_tensor] Arg arg_pointer_tensor\n                     * @property {syft_proto.execution.v1.IPlaceholder|null} [arg_placeholder] Arg arg_placeholder\n                     * @property {syft_proto.execution.v1.IPlaceholderId|null} [arg_placeholder_id] Arg arg_placeholder_id\n                     * @property {syft_proto.types.syft.v1.IArgList|null} [arg_list] Arg arg_list\n                     */\n\n                    /**\n                     * Constructs a new Arg.\n                     * @memberof syft_proto.types.syft.v1\n                     * @classdesc Represents an Arg.\n                     * @implements IArg\n                     * @constructor\n                     * @param {syft_proto.types.syft.v1.IArg=} [properties] Properties to set\n                     */\n                    function Arg(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Arg arg_bool.\n                     * @member {boolean} arg_bool\n                     * @memberof syft_proto.types.syft.v1.Arg\n                     * @instance\n                     */\n                    Arg.prototype.arg_bool = false;\n\n                    /**\n                     * Arg arg_int.\n                     * @member {number|Long} arg_int\n                     * @memberof syft_proto.types.syft.v1.Arg\n                     * @instance\n                     */\n                    Arg.prototype.arg_int = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                    /**\n                     * Arg arg_float.\n                     * @member {number} arg_float\n                     * @memberof syft_proto.types.syft.v1.Arg\n                     * @instance\n                     */\n                    Arg.prototype.arg_float = 0;\n\n                    /**\n                     * Arg arg_str.\n                     * @member {string} arg_str\n                     * @memberof syft_proto.types.syft.v1.Arg\n                     * @instance\n                     */\n                    Arg.prototype.arg_str = \"\";\n\n                    /**\n                     * Arg arg_shape.\n                     * @member {syft_proto.types.syft.v1.IShape|null|undefined} arg_shape\n                     * @memberof syft_proto.types.syft.v1.Arg\n                     * @instance\n                     */\n                    Arg.prototype.arg_shape = null;\n\n                    /**\n                     * Arg arg_tensor.\n                     * @member {syft_proto.types.torch.v1.ITorchTensor|null|undefined} arg_tensor\n                     * @memberof syft_proto.types.syft.v1.Arg\n                     * @instance\n                     */\n                    Arg.prototype.arg_tensor = null;\n\n                    /**\n                     * Arg arg_torch_param.\n                     * @member {syft_proto.types.torch.v1.IParameter|null|undefined} arg_torch_param\n                     * @memberof syft_proto.types.syft.v1.Arg\n                     * @instance\n                     */\n                    Arg.prototype.arg_torch_param = null;\n\n                    /**\n                     * Arg arg_pointer_tensor.\n                     * @member {syft_proto.generic.pointers.v1.IPointerTensor|null|undefined} arg_pointer_tensor\n                     * @memberof syft_proto.types.syft.v1.Arg\n                     * @instance\n                     */\n                    Arg.prototype.arg_pointer_tensor = null;\n\n                    /**\n                     * Arg arg_placeholder.\n                     * @member {syft_proto.execution.v1.IPlaceholder|null|undefined} arg_placeholder\n                     * @memberof syft_proto.types.syft.v1.Arg\n                     * @instance\n                     */\n                    Arg.prototype.arg_placeholder = null;\n\n                    /**\n                     * Arg arg_placeholder_id.\n                     * @member {syft_proto.execution.v1.IPlaceholderId|null|undefined} arg_placeholder_id\n                     * @memberof syft_proto.types.syft.v1.Arg\n                     * @instance\n                     */\n                    Arg.prototype.arg_placeholder_id = null;\n\n                    /**\n                     * Arg arg_list.\n                     * @member {syft_proto.types.syft.v1.IArgList|null|undefined} arg_list\n                     * @memberof syft_proto.types.syft.v1.Arg\n                     * @instance\n                     */\n                    Arg.prototype.arg_list = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * Arg arg.\n                     * @member {\"arg_bool\"|\"arg_int\"|\"arg_float\"|\"arg_str\"|\"arg_shape\"|\"arg_tensor\"|\"arg_torch_param\"|\"arg_pointer_tensor\"|\"arg_placeholder\"|\"arg_placeholder_id\"|\"arg_list\"|undefined} arg\n                     * @memberof syft_proto.types.syft.v1.Arg\n                     * @instance\n                     */\n                    Object.defineProperty(Arg.prototype, \"arg\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"arg_bool\", \"arg_int\", \"arg_float\", \"arg_str\", \"arg_shape\", \"arg_tensor\", \"arg_torch_param\", \"arg_pointer_tensor\", \"arg_placeholder\", \"arg_placeholder_id\", \"arg_list\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new Arg instance using the specified properties.\n                     * @function create\n                     * @memberof syft_proto.types.syft.v1.Arg\n                     * @static\n                     * @param {syft_proto.types.syft.v1.IArg=} [properties] Properties to set\n                     * @returns {syft_proto.types.syft.v1.Arg} Arg instance\n                     */\n                    Arg.create = function create(properties) {\n                        return new Arg(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Arg message. Does not implicitly {@link syft_proto.types.syft.v1.Arg.verify|verify} messages.\n                     * @function encode\n                     * @memberof syft_proto.types.syft.v1.Arg\n                     * @static\n                     * @param {syft_proto.types.syft.v1.IArg} message Arg message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Arg.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.arg_bool != null && message.hasOwnProperty(\"arg_bool\"))\n                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.arg_bool);\n                        if (message.arg_int != null && message.hasOwnProperty(\"arg_int\"))\n                            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.arg_int);\n                        if (message.arg_float != null && message.hasOwnProperty(\"arg_float\"))\n                            writer.uint32(/* id 3, wireType 5 =*/29).float(message.arg_float);\n                        if (message.arg_str != null && message.hasOwnProperty(\"arg_str\"))\n                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.arg_str);\n                        if (message.arg_shape != null && message.hasOwnProperty(\"arg_shape\"))\n                            $root.syft_proto.types.syft.v1.Shape.encode(message.arg_shape, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                        if (message.arg_tensor != null && message.hasOwnProperty(\"arg_tensor\"))\n                            $root.syft_proto.types.torch.v1.TorchTensor.encode(message.arg_tensor, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                        if (message.arg_torch_param != null && message.hasOwnProperty(\"arg_torch_param\"))\n                            $root.syft_proto.types.torch.v1.Parameter.encode(message.arg_torch_param, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                        if (message.arg_pointer_tensor != null && message.hasOwnProperty(\"arg_pointer_tensor\"))\n                            $root.syft_proto.generic.pointers.v1.PointerTensor.encode(message.arg_pointer_tensor, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n                        if (message.arg_placeholder != null && message.hasOwnProperty(\"arg_placeholder\"))\n                            $root.syft_proto.execution.v1.Placeholder.encode(message.arg_placeholder, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n                        if (message.arg_placeholder_id != null && message.hasOwnProperty(\"arg_placeholder_id\"))\n                            $root.syft_proto.execution.v1.PlaceholderId.encode(message.arg_placeholder_id, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n                        if (message.arg_list != null && message.hasOwnProperty(\"arg_list\"))\n                            $root.syft_proto.types.syft.v1.ArgList.encode(message.arg_list, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Arg message, length delimited. Does not implicitly {@link syft_proto.types.syft.v1.Arg.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof syft_proto.types.syft.v1.Arg\n                     * @static\n                     * @param {syft_proto.types.syft.v1.IArg} message Arg message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Arg.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an Arg message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof syft_proto.types.syft.v1.Arg\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {syft_proto.types.syft.v1.Arg} Arg\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Arg.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.types.syft.v1.Arg();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.arg_bool = reader.bool();\n                                break;\n                            case 2:\n                                message.arg_int = reader.int64();\n                                break;\n                            case 3:\n                                message.arg_float = reader.float();\n                                break;\n                            case 4:\n                                message.arg_str = reader.string();\n                                break;\n                            case 5:\n                                message.arg_shape = $root.syft_proto.types.syft.v1.Shape.decode(reader, reader.uint32());\n                                break;\n                            case 6:\n                                message.arg_tensor = $root.syft_proto.types.torch.v1.TorchTensor.decode(reader, reader.uint32());\n                                break;\n                            case 7:\n                                message.arg_torch_param = $root.syft_proto.types.torch.v1.Parameter.decode(reader, reader.uint32());\n                                break;\n                            case 8:\n                                message.arg_pointer_tensor = $root.syft_proto.generic.pointers.v1.PointerTensor.decode(reader, reader.uint32());\n                                break;\n                            case 9:\n                                message.arg_placeholder = $root.syft_proto.execution.v1.Placeholder.decode(reader, reader.uint32());\n                                break;\n                            case 10:\n                                message.arg_placeholder_id = $root.syft_proto.execution.v1.PlaceholderId.decode(reader, reader.uint32());\n                                break;\n                            case 11:\n                                message.arg_list = $root.syft_proto.types.syft.v1.ArgList.decode(reader, reader.uint32());\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an Arg message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof syft_proto.types.syft.v1.Arg\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {syft_proto.types.syft.v1.Arg} Arg\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Arg.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an Arg message.\n                     * @function verify\n                     * @memberof syft_proto.types.syft.v1.Arg\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Arg.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.arg_bool != null && message.hasOwnProperty(\"arg_bool\")) {\n                            properties.arg = 1;\n                            if (typeof message.arg_bool !== \"boolean\")\n                                return \"arg_bool: boolean expected\";\n                        }\n                        if (message.arg_int != null && message.hasOwnProperty(\"arg_int\")) {\n                            if (properties.arg === 1)\n                                return \"arg: multiple values\";\n                            properties.arg = 1;\n                            if (!$util.isInteger(message.arg_int) && !(message.arg_int && $util.isInteger(message.arg_int.low) && $util.isInteger(message.arg_int.high)))\n                                return \"arg_int: integer|Long expected\";\n                        }\n                        if (message.arg_float != null && message.hasOwnProperty(\"arg_float\")) {\n                            if (properties.arg === 1)\n                                return \"arg: multiple values\";\n                            properties.arg = 1;\n                            if (typeof message.arg_float !== \"number\")\n                                return \"arg_float: number expected\";\n                        }\n                        if (message.arg_str != null && message.hasOwnProperty(\"arg_str\")) {\n                            if (properties.arg === 1)\n                                return \"arg: multiple values\";\n                            properties.arg = 1;\n                            if (!$util.isString(message.arg_str))\n                                return \"arg_str: string expected\";\n                        }\n                        if (message.arg_shape != null && message.hasOwnProperty(\"arg_shape\")) {\n                            if (properties.arg === 1)\n                                return \"arg: multiple values\";\n                            properties.arg = 1;\n                            {\n                                var error = $root.syft_proto.types.syft.v1.Shape.verify(message.arg_shape);\n                                if (error)\n                                    return \"arg_shape.\" + error;\n                            }\n                        }\n                        if (message.arg_tensor != null && message.hasOwnProperty(\"arg_tensor\")) {\n                            if (properties.arg === 1)\n                                return \"arg: multiple values\";\n                            properties.arg = 1;\n                            {\n                                var error = $root.syft_proto.types.torch.v1.TorchTensor.verify(message.arg_tensor);\n                                if (error)\n                                    return \"arg_tensor.\" + error;\n                            }\n                        }\n                        if (message.arg_torch_param != null && message.hasOwnProperty(\"arg_torch_param\")) {\n                            if (properties.arg === 1)\n                                return \"arg: multiple values\";\n                            properties.arg = 1;\n                            {\n                                var error = $root.syft_proto.types.torch.v1.Parameter.verify(message.arg_torch_param);\n                                if (error)\n                                    return \"arg_torch_param.\" + error;\n                            }\n                        }\n                        if (message.arg_pointer_tensor != null && message.hasOwnProperty(\"arg_pointer_tensor\")) {\n                            if (properties.arg === 1)\n                                return \"arg: multiple values\";\n                            properties.arg = 1;\n                            {\n                                var error = $root.syft_proto.generic.pointers.v1.PointerTensor.verify(message.arg_pointer_tensor);\n                                if (error)\n                                    return \"arg_pointer_tensor.\" + error;\n                            }\n                        }\n                        if (message.arg_placeholder != null && message.hasOwnProperty(\"arg_placeholder\")) {\n                            if (properties.arg === 1)\n                                return \"arg: multiple values\";\n                            properties.arg = 1;\n                            {\n                                var error = $root.syft_proto.execution.v1.Placeholder.verify(message.arg_placeholder);\n                                if (error)\n                                    return \"arg_placeholder.\" + error;\n                            }\n                        }\n                        if (message.arg_placeholder_id != null && message.hasOwnProperty(\"arg_placeholder_id\")) {\n                            if (properties.arg === 1)\n                                return \"arg: multiple values\";\n                            properties.arg = 1;\n                            {\n                                var error = $root.syft_proto.execution.v1.PlaceholderId.verify(message.arg_placeholder_id);\n                                if (error)\n                                    return \"arg_placeholder_id.\" + error;\n                            }\n                        }\n                        if (message.arg_list != null && message.hasOwnProperty(\"arg_list\")) {\n                            if (properties.arg === 1)\n                                return \"arg: multiple values\";\n                            properties.arg = 1;\n                            {\n                                var error = $root.syft_proto.types.syft.v1.ArgList.verify(message.arg_list);\n                                if (error)\n                                    return \"arg_list.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates an Arg message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof syft_proto.types.syft.v1.Arg\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {syft_proto.types.syft.v1.Arg} Arg\n                     */\n                    Arg.fromObject = function fromObject(object) {\n                        if (object instanceof $root.syft_proto.types.syft.v1.Arg)\n                            return object;\n                        var message = new $root.syft_proto.types.syft.v1.Arg();\n                        if (object.arg_bool != null)\n                            message.arg_bool = Boolean(object.arg_bool);\n                        if (object.arg_int != null)\n                            if ($util.Long)\n                                (message.arg_int = $util.Long.fromValue(object.arg_int)).unsigned = false;\n                            else if (typeof object.arg_int === \"string\")\n                                message.arg_int = parseInt(object.arg_int, 10);\n                            else if (typeof object.arg_int === \"number\")\n                                message.arg_int = object.arg_int;\n                            else if (typeof object.arg_int === \"object\")\n                                message.arg_int = new $util.LongBits(object.arg_int.low >>> 0, object.arg_int.high >>> 0).toNumber();\n                        if (object.arg_float != null)\n                            message.arg_float = Number(object.arg_float);\n                        if (object.arg_str != null)\n                            message.arg_str = String(object.arg_str);\n                        if (object.arg_shape != null) {\n                            if (typeof object.arg_shape !== \"object\")\n                                throw TypeError(\".syft_proto.types.syft.v1.Arg.arg_shape: object expected\");\n                            message.arg_shape = $root.syft_proto.types.syft.v1.Shape.fromObject(object.arg_shape);\n                        }\n                        if (object.arg_tensor != null) {\n                            if (typeof object.arg_tensor !== \"object\")\n                                throw TypeError(\".syft_proto.types.syft.v1.Arg.arg_tensor: object expected\");\n                            message.arg_tensor = $root.syft_proto.types.torch.v1.TorchTensor.fromObject(object.arg_tensor);\n                        }\n                        if (object.arg_torch_param != null) {\n                            if (typeof object.arg_torch_param !== \"object\")\n                                throw TypeError(\".syft_proto.types.syft.v1.Arg.arg_torch_param: object expected\");\n                            message.arg_torch_param = $root.syft_proto.types.torch.v1.Parameter.fromObject(object.arg_torch_param);\n                        }\n                        if (object.arg_pointer_tensor != null) {\n                            if (typeof object.arg_pointer_tensor !== \"object\")\n                                throw TypeError(\".syft_proto.types.syft.v1.Arg.arg_pointer_tensor: object expected\");\n                            message.arg_pointer_tensor = $root.syft_proto.generic.pointers.v1.PointerTensor.fromObject(object.arg_pointer_tensor);\n                        }\n                        if (object.arg_placeholder != null) {\n                            if (typeof object.arg_placeholder !== \"object\")\n                                throw TypeError(\".syft_proto.types.syft.v1.Arg.arg_placeholder: object expected\");\n                            message.arg_placeholder = $root.syft_proto.execution.v1.Placeholder.fromObject(object.arg_placeholder);\n                        }\n                        if (object.arg_placeholder_id != null) {\n                            if (typeof object.arg_placeholder_id !== \"object\")\n                                throw TypeError(\".syft_proto.types.syft.v1.Arg.arg_placeholder_id: object expected\");\n                            message.arg_placeholder_id = $root.syft_proto.execution.v1.PlaceholderId.fromObject(object.arg_placeholder_id);\n                        }\n                        if (object.arg_list != null) {\n                            if (typeof object.arg_list !== \"object\")\n                                throw TypeError(\".syft_proto.types.syft.v1.Arg.arg_list: object expected\");\n                            message.arg_list = $root.syft_proto.types.syft.v1.ArgList.fromObject(object.arg_list);\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an Arg message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof syft_proto.types.syft.v1.Arg\n                     * @static\n                     * @param {syft_proto.types.syft.v1.Arg} message Arg\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Arg.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (message.arg_bool != null && message.hasOwnProperty(\"arg_bool\")) {\n                            object.arg_bool = message.arg_bool;\n                            if (options.oneofs)\n                                object.arg = \"arg_bool\";\n                        }\n                        if (message.arg_int != null && message.hasOwnProperty(\"arg_int\")) {\n                            if (typeof message.arg_int === \"number\")\n                                object.arg_int = options.longs === String ? String(message.arg_int) : message.arg_int;\n                            else\n                                object.arg_int = options.longs === String ? $util.Long.prototype.toString.call(message.arg_int) : options.longs === Number ? new $util.LongBits(message.arg_int.low >>> 0, message.arg_int.high >>> 0).toNumber() : message.arg_int;\n                            if (options.oneofs)\n                                object.arg = \"arg_int\";\n                        }\n                        if (message.arg_float != null && message.hasOwnProperty(\"arg_float\")) {\n                            object.arg_float = options.json && !isFinite(message.arg_float) ? String(message.arg_float) : message.arg_float;\n                            if (options.oneofs)\n                                object.arg = \"arg_float\";\n                        }\n                        if (message.arg_str != null && message.hasOwnProperty(\"arg_str\")) {\n                            object.arg_str = message.arg_str;\n                            if (options.oneofs)\n                                object.arg = \"arg_str\";\n                        }\n                        if (message.arg_shape != null && message.hasOwnProperty(\"arg_shape\")) {\n                            object.arg_shape = $root.syft_proto.types.syft.v1.Shape.toObject(message.arg_shape, options);\n                            if (options.oneofs)\n                                object.arg = \"arg_shape\";\n                        }\n                        if (message.arg_tensor != null && message.hasOwnProperty(\"arg_tensor\")) {\n                            object.arg_tensor = $root.syft_proto.types.torch.v1.TorchTensor.toObject(message.arg_tensor, options);\n                            if (options.oneofs)\n                                object.arg = \"arg_tensor\";\n                        }\n                        if (message.arg_torch_param != null && message.hasOwnProperty(\"arg_torch_param\")) {\n                            object.arg_torch_param = $root.syft_proto.types.torch.v1.Parameter.toObject(message.arg_torch_param, options);\n                            if (options.oneofs)\n                                object.arg = \"arg_torch_param\";\n                        }\n                        if (message.arg_pointer_tensor != null && message.hasOwnProperty(\"arg_pointer_tensor\")) {\n                            object.arg_pointer_tensor = $root.syft_proto.generic.pointers.v1.PointerTensor.toObject(message.arg_pointer_tensor, options);\n                            if (options.oneofs)\n                                object.arg = \"arg_pointer_tensor\";\n                        }\n                        if (message.arg_placeholder != null && message.hasOwnProperty(\"arg_placeholder\")) {\n                            object.arg_placeholder = $root.syft_proto.execution.v1.Placeholder.toObject(message.arg_placeholder, options);\n                            if (options.oneofs)\n                                object.arg = \"arg_placeholder\";\n                        }\n                        if (message.arg_placeholder_id != null && message.hasOwnProperty(\"arg_placeholder_id\")) {\n                            object.arg_placeholder_id = $root.syft_proto.execution.v1.PlaceholderId.toObject(message.arg_placeholder_id, options);\n                            if (options.oneofs)\n                                object.arg = \"arg_placeholder_id\";\n                        }\n                        if (message.arg_list != null && message.hasOwnProperty(\"arg_list\")) {\n                            object.arg_list = $root.syft_proto.types.syft.v1.ArgList.toObject(message.arg_list, options);\n                            if (options.oneofs)\n                                object.arg = \"arg_list\";\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Arg to JSON.\n                     * @function toJSON\n                     * @memberof syft_proto.types.syft.v1.Arg\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Arg.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return Arg;\n                })();\n\n                v1.ArgList = (function() {\n\n                    /**\n                     * Properties of an ArgList.\n                     * @memberof syft_proto.types.syft.v1\n                     * @interface IArgList\n                     * @property {Array.<syft_proto.types.syft.v1.IArg>|null} [args] ArgList args\n                     */\n\n                    /**\n                     * Constructs a new ArgList.\n                     * @memberof syft_proto.types.syft.v1\n                     * @classdesc Represents an ArgList.\n                     * @implements IArgList\n                     * @constructor\n                     * @param {syft_proto.types.syft.v1.IArgList=} [properties] Properties to set\n                     */\n                    function ArgList(properties) {\n                        this.args = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ArgList args.\n                     * @member {Array.<syft_proto.types.syft.v1.IArg>} args\n                     * @memberof syft_proto.types.syft.v1.ArgList\n                     * @instance\n                     */\n                    ArgList.prototype.args = $util.emptyArray;\n\n                    /**\n                     * Creates a new ArgList instance using the specified properties.\n                     * @function create\n                     * @memberof syft_proto.types.syft.v1.ArgList\n                     * @static\n                     * @param {syft_proto.types.syft.v1.IArgList=} [properties] Properties to set\n                     * @returns {syft_proto.types.syft.v1.ArgList} ArgList instance\n                     */\n                    ArgList.create = function create(properties) {\n                        return new ArgList(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ArgList message. Does not implicitly {@link syft_proto.types.syft.v1.ArgList.verify|verify} messages.\n                     * @function encode\n                     * @memberof syft_proto.types.syft.v1.ArgList\n                     * @static\n                     * @param {syft_proto.types.syft.v1.IArgList} message ArgList message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ArgList.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.args != null && message.args.length)\n                            for (var i = 0; i < message.args.length; ++i)\n                                $root.syft_proto.types.syft.v1.Arg.encode(message.args[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ArgList message, length delimited. Does not implicitly {@link syft_proto.types.syft.v1.ArgList.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof syft_proto.types.syft.v1.ArgList\n                     * @static\n                     * @param {syft_proto.types.syft.v1.IArgList} message ArgList message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ArgList.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an ArgList message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof syft_proto.types.syft.v1.ArgList\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {syft_proto.types.syft.v1.ArgList} ArgList\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ArgList.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.types.syft.v1.ArgList();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                if (!(message.args && message.args.length))\n                                    message.args = [];\n                                message.args.push($root.syft_proto.types.syft.v1.Arg.decode(reader, reader.uint32()));\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an ArgList message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof syft_proto.types.syft.v1.ArgList\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {syft_proto.types.syft.v1.ArgList} ArgList\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ArgList.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an ArgList message.\n                     * @function verify\n                     * @memberof syft_proto.types.syft.v1.ArgList\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ArgList.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.args != null && message.hasOwnProperty(\"args\")) {\n                            if (!Array.isArray(message.args))\n                                return \"args: array expected\";\n                            for (var i = 0; i < message.args.length; ++i) {\n                                var error = $root.syft_proto.types.syft.v1.Arg.verify(message.args[i]);\n                                if (error)\n                                    return \"args.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates an ArgList message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof syft_proto.types.syft.v1.ArgList\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {syft_proto.types.syft.v1.ArgList} ArgList\n                     */\n                    ArgList.fromObject = function fromObject(object) {\n                        if (object instanceof $root.syft_proto.types.syft.v1.ArgList)\n                            return object;\n                        var message = new $root.syft_proto.types.syft.v1.ArgList();\n                        if (object.args) {\n                            if (!Array.isArray(object.args))\n                                throw TypeError(\".syft_proto.types.syft.v1.ArgList.args: array expected\");\n                            message.args = [];\n                            for (var i = 0; i < object.args.length; ++i) {\n                                if (typeof object.args[i] !== \"object\")\n                                    throw TypeError(\".syft_proto.types.syft.v1.ArgList.args: object expected\");\n                                message.args[i] = $root.syft_proto.types.syft.v1.Arg.fromObject(object.args[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an ArgList message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof syft_proto.types.syft.v1.ArgList\n                     * @static\n                     * @param {syft_proto.types.syft.v1.ArgList} message ArgList\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ArgList.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.args = [];\n                        if (message.args && message.args.length) {\n                            object.args = [];\n                            for (var j = 0; j < message.args.length; ++j)\n                                object.args[j] = $root.syft_proto.types.syft.v1.Arg.toObject(message.args[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ArgList to JSON.\n                     * @function toJSON\n                     * @memberof syft_proto.types.syft.v1.ArgList\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ArgList.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return ArgList;\n                })();\n\n                return v1;\n            })();\n\n            return syft;\n        })();\n\n        types.torch = (function() {\n\n            /**\n             * Namespace torch.\n             * @memberof syft_proto.types\n             * @namespace\n             */\n            var torch = {};\n\n            torch.v1 = (function() {\n\n                /**\n                 * Namespace v1.\n                 * @memberof syft_proto.types.torch\n                 * @namespace\n                 */\n                var v1 = {};\n\n                v1.TorchTensor = (function() {\n\n                    /**\n                     * Properties of a TorchTensor.\n                     * @memberof syft_proto.types.torch.v1\n                     * @interface ITorchTensor\n                     * @property {syft_proto.types.syft.v1.IId|null} [id] TorchTensor id\n                     * @property {syft_proto.types.torch.v1.ITensorData|null} [contents_data] TorchTensor contents_data\n                     * @property {Uint8Array|null} [contents_bin] TorchTensor contents_bin\n                     * @property {syft_proto.types.torch.v1.ITorchTensor|null} [chain] TorchTensor chain\n                     * @property {syft_proto.types.torch.v1.ITorchTensor|null} [grad_chain] TorchTensor grad_chain\n                     * @property {Array.<string>|null} [tags] TorchTensor tags\n                     * @property {string|null} [description] TorchTensor description\n                     * @property {syft_proto.types.torch.v1.TorchTensor.Serializer|null} [serializer] TorchTensor serializer\n                     */\n\n                    /**\n                     * Constructs a new TorchTensor.\n                     * @memberof syft_proto.types.torch.v1\n                     * @classdesc Represents a TorchTensor.\n                     * @implements ITorchTensor\n                     * @constructor\n                     * @param {syft_proto.types.torch.v1.ITorchTensor=} [properties] Properties to set\n                     */\n                    function TorchTensor(properties) {\n                        this.tags = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * TorchTensor id.\n                     * @member {syft_proto.types.syft.v1.IId|null|undefined} id\n                     * @memberof syft_proto.types.torch.v1.TorchTensor\n                     * @instance\n                     */\n                    TorchTensor.prototype.id = null;\n\n                    /**\n                     * TorchTensor contents_data.\n                     * @member {syft_proto.types.torch.v1.ITensorData|null|undefined} contents_data\n                     * @memberof syft_proto.types.torch.v1.TorchTensor\n                     * @instance\n                     */\n                    TorchTensor.prototype.contents_data = null;\n\n                    /**\n                     * TorchTensor contents_bin.\n                     * @member {Uint8Array} contents_bin\n                     * @memberof syft_proto.types.torch.v1.TorchTensor\n                     * @instance\n                     */\n                    TorchTensor.prototype.contents_bin = $util.newBuffer([]);\n\n                    /**\n                     * TorchTensor chain.\n                     * @member {syft_proto.types.torch.v1.ITorchTensor|null|undefined} chain\n                     * @memberof syft_proto.types.torch.v1.TorchTensor\n                     * @instance\n                     */\n                    TorchTensor.prototype.chain = null;\n\n                    /**\n                     * TorchTensor grad_chain.\n                     * @member {syft_proto.types.torch.v1.ITorchTensor|null|undefined} grad_chain\n                     * @memberof syft_proto.types.torch.v1.TorchTensor\n                     * @instance\n                     */\n                    TorchTensor.prototype.grad_chain = null;\n\n                    /**\n                     * TorchTensor tags.\n                     * @member {Array.<string>} tags\n                     * @memberof syft_proto.types.torch.v1.TorchTensor\n                     * @instance\n                     */\n                    TorchTensor.prototype.tags = $util.emptyArray;\n\n                    /**\n                     * TorchTensor description.\n                     * @member {string} description\n                     * @memberof syft_proto.types.torch.v1.TorchTensor\n                     * @instance\n                     */\n                    TorchTensor.prototype.description = \"\";\n\n                    /**\n                     * TorchTensor serializer.\n                     * @member {syft_proto.types.torch.v1.TorchTensor.Serializer} serializer\n                     * @memberof syft_proto.types.torch.v1.TorchTensor\n                     * @instance\n                     */\n                    TorchTensor.prototype.serializer = 0;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * TorchTensor contents.\n                     * @member {\"contents_data\"|\"contents_bin\"|undefined} contents\n                     * @memberof syft_proto.types.torch.v1.TorchTensor\n                     * @instance\n                     */\n                    Object.defineProperty(TorchTensor.prototype, \"contents\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"contents_data\", \"contents_bin\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new TorchTensor instance using the specified properties.\n                     * @function create\n                     * @memberof syft_proto.types.torch.v1.TorchTensor\n                     * @static\n                     * @param {syft_proto.types.torch.v1.ITorchTensor=} [properties] Properties to set\n                     * @returns {syft_proto.types.torch.v1.TorchTensor} TorchTensor instance\n                     */\n                    TorchTensor.create = function create(properties) {\n                        return new TorchTensor(properties);\n                    };\n\n                    /**\n                     * Encodes the specified TorchTensor message. Does not implicitly {@link syft_proto.types.torch.v1.TorchTensor.verify|verify} messages.\n                     * @function encode\n                     * @memberof syft_proto.types.torch.v1.TorchTensor\n                     * @static\n                     * @param {syft_proto.types.torch.v1.ITorchTensor} message TorchTensor message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TorchTensor.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.id != null && message.hasOwnProperty(\"id\"))\n                            $root.syft_proto.types.syft.v1.Id.encode(message.id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.contents_data != null && message.hasOwnProperty(\"contents_data\"))\n                            $root.syft_proto.types.torch.v1.TensorData.encode(message.contents_data, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.contents_bin != null && message.hasOwnProperty(\"contents_bin\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.contents_bin);\n                        if (message.chain != null && message.hasOwnProperty(\"chain\"))\n                            $root.syft_proto.types.torch.v1.TorchTensor.encode(message.chain, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                        if (message.grad_chain != null && message.hasOwnProperty(\"grad_chain\"))\n                            $root.syft_proto.types.torch.v1.TorchTensor.encode(message.grad_chain, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                        if (message.tags != null && message.tags.length)\n                            for (var i = 0; i < message.tags.length; ++i)\n                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.tags[i]);\n                        if (message.description != null && message.hasOwnProperty(\"description\"))\n                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.description);\n                        if (message.serializer != null && message.hasOwnProperty(\"serializer\"))\n                            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.serializer);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified TorchTensor message, length delimited. Does not implicitly {@link syft_proto.types.torch.v1.TorchTensor.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof syft_proto.types.torch.v1.TorchTensor\n                     * @static\n                     * @param {syft_proto.types.torch.v1.ITorchTensor} message TorchTensor message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TorchTensor.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a TorchTensor message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof syft_proto.types.torch.v1.TorchTensor\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {syft_proto.types.torch.v1.TorchTensor} TorchTensor\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TorchTensor.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.types.torch.v1.TorchTensor();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                                break;\n                            case 2:\n                                message.contents_data = $root.syft_proto.types.torch.v1.TensorData.decode(reader, reader.uint32());\n                                break;\n                            case 3:\n                                message.contents_bin = reader.bytes();\n                                break;\n                            case 4:\n                                message.chain = $root.syft_proto.types.torch.v1.TorchTensor.decode(reader, reader.uint32());\n                                break;\n                            case 5:\n                                message.grad_chain = $root.syft_proto.types.torch.v1.TorchTensor.decode(reader, reader.uint32());\n                                break;\n                            case 6:\n                                if (!(message.tags && message.tags.length))\n                                    message.tags = [];\n                                message.tags.push(reader.string());\n                                break;\n                            case 7:\n                                message.description = reader.string();\n                                break;\n                            case 8:\n                                message.serializer = reader.int32();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a TorchTensor message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof syft_proto.types.torch.v1.TorchTensor\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {syft_proto.types.torch.v1.TorchTensor} TorchTensor\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TorchTensor.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a TorchTensor message.\n                     * @function verify\n                     * @memberof syft_proto.types.torch.v1.TorchTensor\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    TorchTensor.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.id != null && message.hasOwnProperty(\"id\")) {\n                            var error = $root.syft_proto.types.syft.v1.Id.verify(message.id);\n                            if (error)\n                                return \"id.\" + error;\n                        }\n                        if (message.contents_data != null && message.hasOwnProperty(\"contents_data\")) {\n                            properties.contents = 1;\n                            {\n                                var error = $root.syft_proto.types.torch.v1.TensorData.verify(message.contents_data);\n                                if (error)\n                                    return \"contents_data.\" + error;\n                            }\n                        }\n                        if (message.contents_bin != null && message.hasOwnProperty(\"contents_bin\")) {\n                            if (properties.contents === 1)\n                                return \"contents: multiple values\";\n                            properties.contents = 1;\n                            if (!(message.contents_bin && typeof message.contents_bin.length === \"number\" || $util.isString(message.contents_bin)))\n                                return \"contents_bin: buffer expected\";\n                        }\n                        if (message.chain != null && message.hasOwnProperty(\"chain\")) {\n                            var error = $root.syft_proto.types.torch.v1.TorchTensor.verify(message.chain);\n                            if (error)\n                                return \"chain.\" + error;\n                        }\n                        if (message.grad_chain != null && message.hasOwnProperty(\"grad_chain\")) {\n                            var error = $root.syft_proto.types.torch.v1.TorchTensor.verify(message.grad_chain);\n                            if (error)\n                                return \"grad_chain.\" + error;\n                        }\n                        if (message.tags != null && message.hasOwnProperty(\"tags\")) {\n                            if (!Array.isArray(message.tags))\n                                return \"tags: array expected\";\n                            for (var i = 0; i < message.tags.length; ++i)\n                                if (!$util.isString(message.tags[i]))\n                                    return \"tags: string[] expected\";\n                        }\n                        if (message.description != null && message.hasOwnProperty(\"description\"))\n                            if (!$util.isString(message.description))\n                                return \"description: string expected\";\n                        if (message.serializer != null && message.hasOwnProperty(\"serializer\"))\n                            switch (message.serializer) {\n                            default:\n                                return \"serializer: enum value expected\";\n                            case 0:\n                            case 1:\n                            case 2:\n                            case 3:\n                            case 4:\n                                break;\n                            }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a TorchTensor message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof syft_proto.types.torch.v1.TorchTensor\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {syft_proto.types.torch.v1.TorchTensor} TorchTensor\n                     */\n                    TorchTensor.fromObject = function fromObject(object) {\n                        if (object instanceof $root.syft_proto.types.torch.v1.TorchTensor)\n                            return object;\n                        var message = new $root.syft_proto.types.torch.v1.TorchTensor();\n                        if (object.id != null) {\n                            if (typeof object.id !== \"object\")\n                                throw TypeError(\".syft_proto.types.torch.v1.TorchTensor.id: object expected\");\n                            message.id = $root.syft_proto.types.syft.v1.Id.fromObject(object.id);\n                        }\n                        if (object.contents_data != null) {\n                            if (typeof object.contents_data !== \"object\")\n                                throw TypeError(\".syft_proto.types.torch.v1.TorchTensor.contents_data: object expected\");\n                            message.contents_data = $root.syft_proto.types.torch.v1.TensorData.fromObject(object.contents_data);\n                        }\n                        if (object.contents_bin != null)\n                            if (typeof object.contents_bin === \"string\")\n                                $util.base64.decode(object.contents_bin, message.contents_bin = $util.newBuffer($util.base64.length(object.contents_bin)), 0);\n                            else if (object.contents_bin.length)\n                                message.contents_bin = object.contents_bin;\n                        if (object.chain != null) {\n                            if (typeof object.chain !== \"object\")\n                                throw TypeError(\".syft_proto.types.torch.v1.TorchTensor.chain: object expected\");\n                            message.chain = $root.syft_proto.types.torch.v1.TorchTensor.fromObject(object.chain);\n                        }\n                        if (object.grad_chain != null) {\n                            if (typeof object.grad_chain !== \"object\")\n                                throw TypeError(\".syft_proto.types.torch.v1.TorchTensor.grad_chain: object expected\");\n                            message.grad_chain = $root.syft_proto.types.torch.v1.TorchTensor.fromObject(object.grad_chain);\n                        }\n                        if (object.tags) {\n                            if (!Array.isArray(object.tags))\n                                throw TypeError(\".syft_proto.types.torch.v1.TorchTensor.tags: array expected\");\n                            message.tags = [];\n                            for (var i = 0; i < object.tags.length; ++i)\n                                message.tags[i] = String(object.tags[i]);\n                        }\n                        if (object.description != null)\n                            message.description = String(object.description);\n                        switch (object.serializer) {\n                        case \"SERIALIZER_UNSPECIFIED\":\n                        case 0:\n                            message.serializer = 0;\n                            break;\n                        case \"SERIALIZER_TORCH\":\n                        case 1:\n                            message.serializer = 1;\n                            break;\n                        case \"SERIALIZER_NUMPY\":\n                        case 2:\n                            message.serializer = 2;\n                            break;\n                        case \"SERIALIZER_TF\":\n                        case 3:\n                            message.serializer = 3;\n                            break;\n                        case \"SERIALIZER_ALL\":\n                        case 4:\n                            message.serializer = 4;\n                            break;\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a TorchTensor message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof syft_proto.types.torch.v1.TorchTensor\n                     * @static\n                     * @param {syft_proto.types.torch.v1.TorchTensor} message TorchTensor\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    TorchTensor.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.tags = [];\n                        if (options.defaults) {\n                            object.id = null;\n                            object.chain = null;\n                            object.grad_chain = null;\n                            object.description = \"\";\n                            object.serializer = options.enums === String ? \"SERIALIZER_UNSPECIFIED\" : 0;\n                        }\n                        if (message.id != null && message.hasOwnProperty(\"id\"))\n                            object.id = $root.syft_proto.types.syft.v1.Id.toObject(message.id, options);\n                        if (message.contents_data != null && message.hasOwnProperty(\"contents_data\")) {\n                            object.contents_data = $root.syft_proto.types.torch.v1.TensorData.toObject(message.contents_data, options);\n                            if (options.oneofs)\n                                object.contents = \"contents_data\";\n                        }\n                        if (message.contents_bin != null && message.hasOwnProperty(\"contents_bin\")) {\n                            object.contents_bin = options.bytes === String ? $util.base64.encode(message.contents_bin, 0, message.contents_bin.length) : options.bytes === Array ? Array.prototype.slice.call(message.contents_bin) : message.contents_bin;\n                            if (options.oneofs)\n                                object.contents = \"contents_bin\";\n                        }\n                        if (message.chain != null && message.hasOwnProperty(\"chain\"))\n                            object.chain = $root.syft_proto.types.torch.v1.TorchTensor.toObject(message.chain, options);\n                        if (message.grad_chain != null && message.hasOwnProperty(\"grad_chain\"))\n                            object.grad_chain = $root.syft_proto.types.torch.v1.TorchTensor.toObject(message.grad_chain, options);\n                        if (message.tags && message.tags.length) {\n                            object.tags = [];\n                            for (var j = 0; j < message.tags.length; ++j)\n                                object.tags[j] = message.tags[j];\n                        }\n                        if (message.description != null && message.hasOwnProperty(\"description\"))\n                            object.description = message.description;\n                        if (message.serializer != null && message.hasOwnProperty(\"serializer\"))\n                            object.serializer = options.enums === String ? $root.syft_proto.types.torch.v1.TorchTensor.Serializer[message.serializer] : message.serializer;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this TorchTensor to JSON.\n                     * @function toJSON\n                     * @memberof syft_proto.types.torch.v1.TorchTensor\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    TorchTensor.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Serializer enum.\n                     * @name syft_proto.types.torch.v1.TorchTensor.Serializer\n                     * @enum {string}\n                     * @property {number} SERIALIZER_UNSPECIFIED=0 SERIALIZER_UNSPECIFIED value\n                     * @property {number} SERIALIZER_TORCH=1 SERIALIZER_TORCH value\n                     * @property {number} SERIALIZER_NUMPY=2 SERIALIZER_NUMPY value\n                     * @property {number} SERIALIZER_TF=3 SERIALIZER_TF value\n                     * @property {number} SERIALIZER_ALL=4 SERIALIZER_ALL value\n                     */\n                    TorchTensor.Serializer = (function() {\n                        var valuesById = {}, values = Object.create(valuesById);\n                        values[valuesById[0] = \"SERIALIZER_UNSPECIFIED\"] = 0;\n                        values[valuesById[1] = \"SERIALIZER_TORCH\"] = 1;\n                        values[valuesById[2] = \"SERIALIZER_NUMPY\"] = 2;\n                        values[valuesById[3] = \"SERIALIZER_TF\"] = 3;\n                        values[valuesById[4] = \"SERIALIZER_ALL\"] = 4;\n                        return values;\n                    })();\n\n                    return TorchTensor;\n                })();\n\n                v1.TensorData = (function() {\n\n                    /**\n                     * Properties of a TensorData.\n                     * @memberof syft_proto.types.torch.v1\n                     * @interface ITensorData\n                     * @property {syft_proto.types.torch.v1.ISize|null} [shape] TensorData shape\n                     * @property {string|null} [dtype] TensorData dtype\n                     * @property {boolean|null} [is_quantized] TensorData is_quantized\n                     * @property {number|null} [scale] TensorData scale\n                     * @property {number|null} [zero_point] TensorData zero_point\n                     * @property {Array.<number>|null} [contents_uint8] TensorData contents_uint8\n                     * @property {Array.<number>|null} [contents_int8] TensorData contents_int8\n                     * @property {Array.<number>|null} [contents_int16] TensorData contents_int16\n                     * @property {Array.<number>|null} [contents_int32] TensorData contents_int32\n                     * @property {Array.<number|Long>|null} [contents_int64] TensorData contents_int64\n                     * @property {Array.<number>|null} [contents_float16] TensorData contents_float16\n                     * @property {Array.<number>|null} [contents_float32] TensorData contents_float32\n                     * @property {Array.<number>|null} [contents_float64] TensorData contents_float64\n                     * @property {Array.<boolean>|null} [contents_bool] TensorData contents_bool\n                     * @property {Array.<number>|null} [contents_qint8] TensorData contents_qint8\n                     * @property {Array.<number>|null} [contents_quint8] TensorData contents_quint8\n                     * @property {Array.<number>|null} [contents_qint32] TensorData contents_qint32\n                     * @property {Array.<number>|null} [contents_bfloat16] TensorData contents_bfloat16\n                     */\n\n                    /**\n                     * Constructs a new TensorData.\n                     * @memberof syft_proto.types.torch.v1\n                     * @classdesc Represents a TensorData.\n                     * @implements ITensorData\n                     * @constructor\n                     * @param {syft_proto.types.torch.v1.ITensorData=} [properties] Properties to set\n                     */\n                    function TensorData(properties) {\n                        this.contents_uint8 = [];\n                        this.contents_int8 = [];\n                        this.contents_int16 = [];\n                        this.contents_int32 = [];\n                        this.contents_int64 = [];\n                        this.contents_float16 = [];\n                        this.contents_float32 = [];\n                        this.contents_float64 = [];\n                        this.contents_bool = [];\n                        this.contents_qint8 = [];\n                        this.contents_quint8 = [];\n                        this.contents_qint32 = [];\n                        this.contents_bfloat16 = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * TensorData shape.\n                     * @member {syft_proto.types.torch.v1.ISize|null|undefined} shape\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @instance\n                     */\n                    TensorData.prototype.shape = null;\n\n                    /**\n                     * TensorData dtype.\n                     * @member {string} dtype\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @instance\n                     */\n                    TensorData.prototype.dtype = \"\";\n\n                    /**\n                     * TensorData is_quantized.\n                     * @member {boolean} is_quantized\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @instance\n                     */\n                    TensorData.prototype.is_quantized = false;\n\n                    /**\n                     * TensorData scale.\n                     * @member {number} scale\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @instance\n                     */\n                    TensorData.prototype.scale = 0;\n\n                    /**\n                     * TensorData zero_point.\n                     * @member {number} zero_point\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @instance\n                     */\n                    TensorData.prototype.zero_point = 0;\n\n                    /**\n                     * TensorData contents_uint8.\n                     * @member {Array.<number>} contents_uint8\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @instance\n                     */\n                    TensorData.prototype.contents_uint8 = $util.emptyArray;\n\n                    /**\n                     * TensorData contents_int8.\n                     * @member {Array.<number>} contents_int8\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @instance\n                     */\n                    TensorData.prototype.contents_int8 = $util.emptyArray;\n\n                    /**\n                     * TensorData contents_int16.\n                     * @member {Array.<number>} contents_int16\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @instance\n                     */\n                    TensorData.prototype.contents_int16 = $util.emptyArray;\n\n                    /**\n                     * TensorData contents_int32.\n                     * @member {Array.<number>} contents_int32\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @instance\n                     */\n                    TensorData.prototype.contents_int32 = $util.emptyArray;\n\n                    /**\n                     * TensorData contents_int64.\n                     * @member {Array.<number|Long>} contents_int64\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @instance\n                     */\n                    TensorData.prototype.contents_int64 = $util.emptyArray;\n\n                    /**\n                     * TensorData contents_float16.\n                     * @member {Array.<number>} contents_float16\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @instance\n                     */\n                    TensorData.prototype.contents_float16 = $util.emptyArray;\n\n                    /**\n                     * TensorData contents_float32.\n                     * @member {Array.<number>} contents_float32\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @instance\n                     */\n                    TensorData.prototype.contents_float32 = $util.emptyArray;\n\n                    /**\n                     * TensorData contents_float64.\n                     * @member {Array.<number>} contents_float64\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @instance\n                     */\n                    TensorData.prototype.contents_float64 = $util.emptyArray;\n\n                    /**\n                     * TensorData contents_bool.\n                     * @member {Array.<boolean>} contents_bool\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @instance\n                     */\n                    TensorData.prototype.contents_bool = $util.emptyArray;\n\n                    /**\n                     * TensorData contents_qint8.\n                     * @member {Array.<number>} contents_qint8\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @instance\n                     */\n                    TensorData.prototype.contents_qint8 = $util.emptyArray;\n\n                    /**\n                     * TensorData contents_quint8.\n                     * @member {Array.<number>} contents_quint8\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @instance\n                     */\n                    TensorData.prototype.contents_quint8 = $util.emptyArray;\n\n                    /**\n                     * TensorData contents_qint32.\n                     * @member {Array.<number>} contents_qint32\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @instance\n                     */\n                    TensorData.prototype.contents_qint32 = $util.emptyArray;\n\n                    /**\n                     * TensorData contents_bfloat16.\n                     * @member {Array.<number>} contents_bfloat16\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @instance\n                     */\n                    TensorData.prototype.contents_bfloat16 = $util.emptyArray;\n\n                    /**\n                     * Creates a new TensorData instance using the specified properties.\n                     * @function create\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @static\n                     * @param {syft_proto.types.torch.v1.ITensorData=} [properties] Properties to set\n                     * @returns {syft_proto.types.torch.v1.TensorData} TensorData instance\n                     */\n                    TensorData.create = function create(properties) {\n                        return new TensorData(properties);\n                    };\n\n                    /**\n                     * Encodes the specified TensorData message. Does not implicitly {@link syft_proto.types.torch.v1.TensorData.verify|verify} messages.\n                     * @function encode\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @static\n                     * @param {syft_proto.types.torch.v1.ITensorData} message TensorData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TensorData.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                            $root.syft_proto.types.torch.v1.Size.encode(message.shape, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.dtype != null && message.hasOwnProperty(\"dtype\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.dtype);\n                        if (message.is_quantized != null && message.hasOwnProperty(\"is_quantized\"))\n                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.is_quantized);\n                        if (message.scale != null && message.hasOwnProperty(\"scale\"))\n                            writer.uint32(/* id 4, wireType 5 =*/37).float(message.scale);\n                        if (message.zero_point != null && message.hasOwnProperty(\"zero_point\"))\n                            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.zero_point);\n                        if (message.contents_uint8 != null && message.contents_uint8.length) {\n                            writer.uint32(/* id 16, wireType 2 =*/130).fork();\n                            for (var i = 0; i < message.contents_uint8.length; ++i)\n                                writer.uint32(message.contents_uint8[i]);\n                            writer.ldelim();\n                        }\n                        if (message.contents_int8 != null && message.contents_int8.length) {\n                            writer.uint32(/* id 17, wireType 2 =*/138).fork();\n                            for (var i = 0; i < message.contents_int8.length; ++i)\n                                writer.int32(message.contents_int8[i]);\n                            writer.ldelim();\n                        }\n                        if (message.contents_int16 != null && message.contents_int16.length) {\n                            writer.uint32(/* id 18, wireType 2 =*/146).fork();\n                            for (var i = 0; i < message.contents_int16.length; ++i)\n                                writer.int32(message.contents_int16[i]);\n                            writer.ldelim();\n                        }\n                        if (message.contents_int32 != null && message.contents_int32.length) {\n                            writer.uint32(/* id 19, wireType 2 =*/154).fork();\n                            for (var i = 0; i < message.contents_int32.length; ++i)\n                                writer.int32(message.contents_int32[i]);\n                            writer.ldelim();\n                        }\n                        if (message.contents_int64 != null && message.contents_int64.length) {\n                            writer.uint32(/* id 20, wireType 2 =*/162).fork();\n                            for (var i = 0; i < message.contents_int64.length; ++i)\n                                writer.int64(message.contents_int64[i]);\n                            writer.ldelim();\n                        }\n                        if (message.contents_float16 != null && message.contents_float16.length) {\n                            writer.uint32(/* id 21, wireType 2 =*/170).fork();\n                            for (var i = 0; i < message.contents_float16.length; ++i)\n                                writer.float(message.contents_float16[i]);\n                            writer.ldelim();\n                        }\n                        if (message.contents_float32 != null && message.contents_float32.length) {\n                            writer.uint32(/* id 22, wireType 2 =*/178).fork();\n                            for (var i = 0; i < message.contents_float32.length; ++i)\n                                writer.float(message.contents_float32[i]);\n                            writer.ldelim();\n                        }\n                        if (message.contents_float64 != null && message.contents_float64.length) {\n                            writer.uint32(/* id 23, wireType 2 =*/186).fork();\n                            for (var i = 0; i < message.contents_float64.length; ++i)\n                                writer.double(message.contents_float64[i]);\n                            writer.ldelim();\n                        }\n                        if (message.contents_bool != null && message.contents_bool.length) {\n                            writer.uint32(/* id 24, wireType 2 =*/194).fork();\n                            for (var i = 0; i < message.contents_bool.length; ++i)\n                                writer.bool(message.contents_bool[i]);\n                            writer.ldelim();\n                        }\n                        if (message.contents_qint8 != null && message.contents_qint8.length) {\n                            writer.uint32(/* id 25, wireType 2 =*/202).fork();\n                            for (var i = 0; i < message.contents_qint8.length; ++i)\n                                writer.sint32(message.contents_qint8[i]);\n                            writer.ldelim();\n                        }\n                        if (message.contents_quint8 != null && message.contents_quint8.length) {\n                            writer.uint32(/* id 26, wireType 2 =*/210).fork();\n                            for (var i = 0; i < message.contents_quint8.length; ++i)\n                                writer.uint32(message.contents_quint8[i]);\n                            writer.ldelim();\n                        }\n                        if (message.contents_qint32 != null && message.contents_qint32.length) {\n                            writer.uint32(/* id 27, wireType 2 =*/218).fork();\n                            for (var i = 0; i < message.contents_qint32.length; ++i)\n                                writer.sint32(message.contents_qint32[i]);\n                            writer.ldelim();\n                        }\n                        if (message.contents_bfloat16 != null && message.contents_bfloat16.length) {\n                            writer.uint32(/* id 28, wireType 2 =*/226).fork();\n                            for (var i = 0; i < message.contents_bfloat16.length; ++i)\n                                writer.float(message.contents_bfloat16[i]);\n                            writer.ldelim();\n                        }\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified TensorData message, length delimited. Does not implicitly {@link syft_proto.types.torch.v1.TensorData.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @static\n                     * @param {syft_proto.types.torch.v1.ITensorData} message TensorData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TensorData.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a TensorData message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {syft_proto.types.torch.v1.TensorData} TensorData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TensorData.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.types.torch.v1.TensorData();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.shape = $root.syft_proto.types.torch.v1.Size.decode(reader, reader.uint32());\n                                break;\n                            case 2:\n                                message.dtype = reader.string();\n                                break;\n                            case 3:\n                                message.is_quantized = reader.bool();\n                                break;\n                            case 4:\n                                message.scale = reader.float();\n                                break;\n                            case 5:\n                                message.zero_point = reader.int32();\n                                break;\n                            case 16:\n                                if (!(message.contents_uint8 && message.contents_uint8.length))\n                                    message.contents_uint8 = [];\n                                if ((tag & 7) === 2) {\n                                    var end2 = reader.uint32() + reader.pos;\n                                    while (reader.pos < end2)\n                                        message.contents_uint8.push(reader.uint32());\n                                } else\n                                    message.contents_uint8.push(reader.uint32());\n                                break;\n                            case 17:\n                                if (!(message.contents_int8 && message.contents_int8.length))\n                                    message.contents_int8 = [];\n                                if ((tag & 7) === 2) {\n                                    var end2 = reader.uint32() + reader.pos;\n                                    while (reader.pos < end2)\n                                        message.contents_int8.push(reader.int32());\n                                } else\n                                    message.contents_int8.push(reader.int32());\n                                break;\n                            case 18:\n                                if (!(message.contents_int16 && message.contents_int16.length))\n                                    message.contents_int16 = [];\n                                if ((tag & 7) === 2) {\n                                    var end2 = reader.uint32() + reader.pos;\n                                    while (reader.pos < end2)\n                                        message.contents_int16.push(reader.int32());\n                                } else\n                                    message.contents_int16.push(reader.int32());\n                                break;\n                            case 19:\n                                if (!(message.contents_int32 && message.contents_int32.length))\n                                    message.contents_int32 = [];\n                                if ((tag & 7) === 2) {\n                                    var end2 = reader.uint32() + reader.pos;\n                                    while (reader.pos < end2)\n                                        message.contents_int32.push(reader.int32());\n                                } else\n                                    message.contents_int32.push(reader.int32());\n                                break;\n                            case 20:\n                                if (!(message.contents_int64 && message.contents_int64.length))\n                                    message.contents_int64 = [];\n                                if ((tag & 7) === 2) {\n                                    var end2 = reader.uint32() + reader.pos;\n                                    while (reader.pos < end2)\n                                        message.contents_int64.push(reader.int64());\n                                } else\n                                    message.contents_int64.push(reader.int64());\n                                break;\n                            case 21:\n                                if (!(message.contents_float16 && message.contents_float16.length))\n                                    message.contents_float16 = [];\n                                if ((tag & 7) === 2) {\n                                    var end2 = reader.uint32() + reader.pos;\n                                    while (reader.pos < end2)\n                                        message.contents_float16.push(reader.float());\n                                } else\n                                    message.contents_float16.push(reader.float());\n                                break;\n                            case 22:\n                                if (!(message.contents_float32 && message.contents_float32.length))\n                                    message.contents_float32 = [];\n                                if ((tag & 7) === 2) {\n                                    var end2 = reader.uint32() + reader.pos;\n                                    while (reader.pos < end2)\n                                        message.contents_float32.push(reader.float());\n                                } else\n                                    message.contents_float32.push(reader.float());\n                                break;\n                            case 23:\n                                if (!(message.contents_float64 && message.contents_float64.length))\n                                    message.contents_float64 = [];\n                                if ((tag & 7) === 2) {\n                                    var end2 = reader.uint32() + reader.pos;\n                                    while (reader.pos < end2)\n                                        message.contents_float64.push(reader.double());\n                                } else\n                                    message.contents_float64.push(reader.double());\n                                break;\n                            case 24:\n                                if (!(message.contents_bool && message.contents_bool.length))\n                                    message.contents_bool = [];\n                                if ((tag & 7) === 2) {\n                                    var end2 = reader.uint32() + reader.pos;\n                                    while (reader.pos < end2)\n                                        message.contents_bool.push(reader.bool());\n                                } else\n                                    message.contents_bool.push(reader.bool());\n                                break;\n                            case 25:\n                                if (!(message.contents_qint8 && message.contents_qint8.length))\n                                    message.contents_qint8 = [];\n                                if ((tag & 7) === 2) {\n                                    var end2 = reader.uint32() + reader.pos;\n                                    while (reader.pos < end2)\n                                        message.contents_qint8.push(reader.sint32());\n                                } else\n                                    message.contents_qint8.push(reader.sint32());\n                                break;\n                            case 26:\n                                if (!(message.contents_quint8 && message.contents_quint8.length))\n                                    message.contents_quint8 = [];\n                                if ((tag & 7) === 2) {\n                                    var end2 = reader.uint32() + reader.pos;\n                                    while (reader.pos < end2)\n                                        message.contents_quint8.push(reader.uint32());\n                                } else\n                                    message.contents_quint8.push(reader.uint32());\n                                break;\n                            case 27:\n                                if (!(message.contents_qint32 && message.contents_qint32.length))\n                                    message.contents_qint32 = [];\n                                if ((tag & 7) === 2) {\n                                    var end2 = reader.uint32() + reader.pos;\n                                    while (reader.pos < end2)\n                                        message.contents_qint32.push(reader.sint32());\n                                } else\n                                    message.contents_qint32.push(reader.sint32());\n                                break;\n                            case 28:\n                                if (!(message.contents_bfloat16 && message.contents_bfloat16.length))\n                                    message.contents_bfloat16 = [];\n                                if ((tag & 7) === 2) {\n                                    var end2 = reader.uint32() + reader.pos;\n                                    while (reader.pos < end2)\n                                        message.contents_bfloat16.push(reader.float());\n                                } else\n                                    message.contents_bfloat16.push(reader.float());\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a TensorData message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {syft_proto.types.torch.v1.TensorData} TensorData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TensorData.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a TensorData message.\n                     * @function verify\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    TensorData.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                            var error = $root.syft_proto.types.torch.v1.Size.verify(message.shape);\n                            if (error)\n                                return \"shape.\" + error;\n                        }\n                        if (message.dtype != null && message.hasOwnProperty(\"dtype\"))\n                            if (!$util.isString(message.dtype))\n                                return \"dtype: string expected\";\n                        if (message.is_quantized != null && message.hasOwnProperty(\"is_quantized\"))\n                            if (typeof message.is_quantized !== \"boolean\")\n                                return \"is_quantized: boolean expected\";\n                        if (message.scale != null && message.hasOwnProperty(\"scale\"))\n                            if (typeof message.scale !== \"number\")\n                                return \"scale: number expected\";\n                        if (message.zero_point != null && message.hasOwnProperty(\"zero_point\"))\n                            if (!$util.isInteger(message.zero_point))\n                                return \"zero_point: integer expected\";\n                        if (message.contents_uint8 != null && message.hasOwnProperty(\"contents_uint8\")) {\n                            if (!Array.isArray(message.contents_uint8))\n                                return \"contents_uint8: array expected\";\n                            for (var i = 0; i < message.contents_uint8.length; ++i)\n                                if (!$util.isInteger(message.contents_uint8[i]))\n                                    return \"contents_uint8: integer[] expected\";\n                        }\n                        if (message.contents_int8 != null && message.hasOwnProperty(\"contents_int8\")) {\n                            if (!Array.isArray(message.contents_int8))\n                                return \"contents_int8: array expected\";\n                            for (var i = 0; i < message.contents_int8.length; ++i)\n                                if (!$util.isInteger(message.contents_int8[i]))\n                                    return \"contents_int8: integer[] expected\";\n                        }\n                        if (message.contents_int16 != null && message.hasOwnProperty(\"contents_int16\")) {\n                            if (!Array.isArray(message.contents_int16))\n                                return \"contents_int16: array expected\";\n                            for (var i = 0; i < message.contents_int16.length; ++i)\n                                if (!$util.isInteger(message.contents_int16[i]))\n                                    return \"contents_int16: integer[] expected\";\n                        }\n                        if (message.contents_int32 != null && message.hasOwnProperty(\"contents_int32\")) {\n                            if (!Array.isArray(message.contents_int32))\n                                return \"contents_int32: array expected\";\n                            for (var i = 0; i < message.contents_int32.length; ++i)\n                                if (!$util.isInteger(message.contents_int32[i]))\n                                    return \"contents_int32: integer[] expected\";\n                        }\n                        if (message.contents_int64 != null && message.hasOwnProperty(\"contents_int64\")) {\n                            if (!Array.isArray(message.contents_int64))\n                                return \"contents_int64: array expected\";\n                            for (var i = 0; i < message.contents_int64.length; ++i)\n                                if (!$util.isInteger(message.contents_int64[i]) && !(message.contents_int64[i] && $util.isInteger(message.contents_int64[i].low) && $util.isInteger(message.contents_int64[i].high)))\n                                    return \"contents_int64: integer|Long[] expected\";\n                        }\n                        if (message.contents_float16 != null && message.hasOwnProperty(\"contents_float16\")) {\n                            if (!Array.isArray(message.contents_float16))\n                                return \"contents_float16: array expected\";\n                            for (var i = 0; i < message.contents_float16.length; ++i)\n                                if (typeof message.contents_float16[i] !== \"number\")\n                                    return \"contents_float16: number[] expected\";\n                        }\n                        if (message.contents_float32 != null && message.hasOwnProperty(\"contents_float32\")) {\n                            if (!Array.isArray(message.contents_float32))\n                                return \"contents_float32: array expected\";\n                            for (var i = 0; i < message.contents_float32.length; ++i)\n                                if (typeof message.contents_float32[i] !== \"number\")\n                                    return \"contents_float32: number[] expected\";\n                        }\n                        if (message.contents_float64 != null && message.hasOwnProperty(\"contents_float64\")) {\n                            if (!Array.isArray(message.contents_float64))\n                                return \"contents_float64: array expected\";\n                            for (var i = 0; i < message.contents_float64.length; ++i)\n                                if (typeof message.contents_float64[i] !== \"number\")\n                                    return \"contents_float64: number[] expected\";\n                        }\n                        if (message.contents_bool != null && message.hasOwnProperty(\"contents_bool\")) {\n                            if (!Array.isArray(message.contents_bool))\n                                return \"contents_bool: array expected\";\n                            for (var i = 0; i < message.contents_bool.length; ++i)\n                                if (typeof message.contents_bool[i] !== \"boolean\")\n                                    return \"contents_bool: boolean[] expected\";\n                        }\n                        if (message.contents_qint8 != null && message.hasOwnProperty(\"contents_qint8\")) {\n                            if (!Array.isArray(message.contents_qint8))\n                                return \"contents_qint8: array expected\";\n                            for (var i = 0; i < message.contents_qint8.length; ++i)\n                                if (!$util.isInteger(message.contents_qint8[i]))\n                                    return \"contents_qint8: integer[] expected\";\n                        }\n                        if (message.contents_quint8 != null && message.hasOwnProperty(\"contents_quint8\")) {\n                            if (!Array.isArray(message.contents_quint8))\n                                return \"contents_quint8: array expected\";\n                            for (var i = 0; i < message.contents_quint8.length; ++i)\n                                if (!$util.isInteger(message.contents_quint8[i]))\n                                    return \"contents_quint8: integer[] expected\";\n                        }\n                        if (message.contents_qint32 != null && message.hasOwnProperty(\"contents_qint32\")) {\n                            if (!Array.isArray(message.contents_qint32))\n                                return \"contents_qint32: array expected\";\n                            for (var i = 0; i < message.contents_qint32.length; ++i)\n                                if (!$util.isInteger(message.contents_qint32[i]))\n                                    return \"contents_qint32: integer[] expected\";\n                        }\n                        if (message.contents_bfloat16 != null && message.hasOwnProperty(\"contents_bfloat16\")) {\n                            if (!Array.isArray(message.contents_bfloat16))\n                                return \"contents_bfloat16: array expected\";\n                            for (var i = 0; i < message.contents_bfloat16.length; ++i)\n                                if (typeof message.contents_bfloat16[i] !== \"number\")\n                                    return \"contents_bfloat16: number[] expected\";\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a TensorData message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {syft_proto.types.torch.v1.TensorData} TensorData\n                     */\n                    TensorData.fromObject = function fromObject(object) {\n                        if (object instanceof $root.syft_proto.types.torch.v1.TensorData)\n                            return object;\n                        var message = new $root.syft_proto.types.torch.v1.TensorData();\n                        if (object.shape != null) {\n                            if (typeof object.shape !== \"object\")\n                                throw TypeError(\".syft_proto.types.torch.v1.TensorData.shape: object expected\");\n                            message.shape = $root.syft_proto.types.torch.v1.Size.fromObject(object.shape);\n                        }\n                        if (object.dtype != null)\n                            message.dtype = String(object.dtype);\n                        if (object.is_quantized != null)\n                            message.is_quantized = Boolean(object.is_quantized);\n                        if (object.scale != null)\n                            message.scale = Number(object.scale);\n                        if (object.zero_point != null)\n                            message.zero_point = object.zero_point | 0;\n                        if (object.contents_uint8) {\n                            if (!Array.isArray(object.contents_uint8))\n                                throw TypeError(\".syft_proto.types.torch.v1.TensorData.contents_uint8: array expected\");\n                            message.contents_uint8 = [];\n                            for (var i = 0; i < object.contents_uint8.length; ++i)\n                                message.contents_uint8[i] = object.contents_uint8[i] >>> 0;\n                        }\n                        if (object.contents_int8) {\n                            if (!Array.isArray(object.contents_int8))\n                                throw TypeError(\".syft_proto.types.torch.v1.TensorData.contents_int8: array expected\");\n                            message.contents_int8 = [];\n                            for (var i = 0; i < object.contents_int8.length; ++i)\n                                message.contents_int8[i] = object.contents_int8[i] | 0;\n                        }\n                        if (object.contents_int16) {\n                            if (!Array.isArray(object.contents_int16))\n                                throw TypeError(\".syft_proto.types.torch.v1.TensorData.contents_int16: array expected\");\n                            message.contents_int16 = [];\n                            for (var i = 0; i < object.contents_int16.length; ++i)\n                                message.contents_int16[i] = object.contents_int16[i] | 0;\n                        }\n                        if (object.contents_int32) {\n                            if (!Array.isArray(object.contents_int32))\n                                throw TypeError(\".syft_proto.types.torch.v1.TensorData.contents_int32: array expected\");\n                            message.contents_int32 = [];\n                            for (var i = 0; i < object.contents_int32.length; ++i)\n                                message.contents_int32[i] = object.contents_int32[i] | 0;\n                        }\n                        if (object.contents_int64) {\n                            if (!Array.isArray(object.contents_int64))\n                                throw TypeError(\".syft_proto.types.torch.v1.TensorData.contents_int64: array expected\");\n                            message.contents_int64 = [];\n                            for (var i = 0; i < object.contents_int64.length; ++i)\n                                if ($util.Long)\n                                    (message.contents_int64[i] = $util.Long.fromValue(object.contents_int64[i])).unsigned = false;\n                                else if (typeof object.contents_int64[i] === \"string\")\n                                    message.contents_int64[i] = parseInt(object.contents_int64[i], 10);\n                                else if (typeof object.contents_int64[i] === \"number\")\n                                    message.contents_int64[i] = object.contents_int64[i];\n                                else if (typeof object.contents_int64[i] === \"object\")\n                                    message.contents_int64[i] = new $util.LongBits(object.contents_int64[i].low >>> 0, object.contents_int64[i].high >>> 0).toNumber();\n                        }\n                        if (object.contents_float16) {\n                            if (!Array.isArray(object.contents_float16))\n                                throw TypeError(\".syft_proto.types.torch.v1.TensorData.contents_float16: array expected\");\n                            message.contents_float16 = [];\n                            for (var i = 0; i < object.contents_float16.length; ++i)\n                                message.contents_float16[i] = Number(object.contents_float16[i]);\n                        }\n                        if (object.contents_float32) {\n                            if (!Array.isArray(object.contents_float32))\n                                throw TypeError(\".syft_proto.types.torch.v1.TensorData.contents_float32: array expected\");\n                            message.contents_float32 = [];\n                            for (var i = 0; i < object.contents_float32.length; ++i)\n                                message.contents_float32[i] = Number(object.contents_float32[i]);\n                        }\n                        if (object.contents_float64) {\n                            if (!Array.isArray(object.contents_float64))\n                                throw TypeError(\".syft_proto.types.torch.v1.TensorData.contents_float64: array expected\");\n                            message.contents_float64 = [];\n                            for (var i = 0; i < object.contents_float64.length; ++i)\n                                message.contents_float64[i] = Number(object.contents_float64[i]);\n                        }\n                        if (object.contents_bool) {\n                            if (!Array.isArray(object.contents_bool))\n                                throw TypeError(\".syft_proto.types.torch.v1.TensorData.contents_bool: array expected\");\n                            message.contents_bool = [];\n                            for (var i = 0; i < object.contents_bool.length; ++i)\n                                message.contents_bool[i] = Boolean(object.contents_bool[i]);\n                        }\n                        if (object.contents_qint8) {\n                            if (!Array.isArray(object.contents_qint8))\n                                throw TypeError(\".syft_proto.types.torch.v1.TensorData.contents_qint8: array expected\");\n                            message.contents_qint8 = [];\n                            for (var i = 0; i < object.contents_qint8.length; ++i)\n                                message.contents_qint8[i] = object.contents_qint8[i] | 0;\n                        }\n                        if (object.contents_quint8) {\n                            if (!Array.isArray(object.contents_quint8))\n                                throw TypeError(\".syft_proto.types.torch.v1.TensorData.contents_quint8: array expected\");\n                            message.contents_quint8 = [];\n                            for (var i = 0; i < object.contents_quint8.length; ++i)\n                                message.contents_quint8[i] = object.contents_quint8[i] >>> 0;\n                        }\n                        if (object.contents_qint32) {\n                            if (!Array.isArray(object.contents_qint32))\n                                throw TypeError(\".syft_proto.types.torch.v1.TensorData.contents_qint32: array expected\");\n                            message.contents_qint32 = [];\n                            for (var i = 0; i < object.contents_qint32.length; ++i)\n                                message.contents_qint32[i] = object.contents_qint32[i] | 0;\n                        }\n                        if (object.contents_bfloat16) {\n                            if (!Array.isArray(object.contents_bfloat16))\n                                throw TypeError(\".syft_proto.types.torch.v1.TensorData.contents_bfloat16: array expected\");\n                            message.contents_bfloat16 = [];\n                            for (var i = 0; i < object.contents_bfloat16.length; ++i)\n                                message.contents_bfloat16[i] = Number(object.contents_bfloat16[i]);\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a TensorData message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @static\n                     * @param {syft_proto.types.torch.v1.TensorData} message TensorData\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    TensorData.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.contents_uint8 = [];\n                            object.contents_int8 = [];\n                            object.contents_int16 = [];\n                            object.contents_int32 = [];\n                            object.contents_int64 = [];\n                            object.contents_float16 = [];\n                            object.contents_float32 = [];\n                            object.contents_float64 = [];\n                            object.contents_bool = [];\n                            object.contents_qint8 = [];\n                            object.contents_quint8 = [];\n                            object.contents_qint32 = [];\n                            object.contents_bfloat16 = [];\n                        }\n                        if (options.defaults) {\n                            object.shape = null;\n                            object.dtype = \"\";\n                            object.is_quantized = false;\n                            object.scale = 0;\n                            object.zero_point = 0;\n                        }\n                        if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                            object.shape = $root.syft_proto.types.torch.v1.Size.toObject(message.shape, options);\n                        if (message.dtype != null && message.hasOwnProperty(\"dtype\"))\n                            object.dtype = message.dtype;\n                        if (message.is_quantized != null && message.hasOwnProperty(\"is_quantized\"))\n                            object.is_quantized = message.is_quantized;\n                        if (message.scale != null && message.hasOwnProperty(\"scale\"))\n                            object.scale = options.json && !isFinite(message.scale) ? String(message.scale) : message.scale;\n                        if (message.zero_point != null && message.hasOwnProperty(\"zero_point\"))\n                            object.zero_point = message.zero_point;\n                        if (message.contents_uint8 && message.contents_uint8.length) {\n                            object.contents_uint8 = [];\n                            for (var j = 0; j < message.contents_uint8.length; ++j)\n                                object.contents_uint8[j] = message.contents_uint8[j];\n                        }\n                        if (message.contents_int8 && message.contents_int8.length) {\n                            object.contents_int8 = [];\n                            for (var j = 0; j < message.contents_int8.length; ++j)\n                                object.contents_int8[j] = message.contents_int8[j];\n                        }\n                        if (message.contents_int16 && message.contents_int16.length) {\n                            object.contents_int16 = [];\n                            for (var j = 0; j < message.contents_int16.length; ++j)\n                                object.contents_int16[j] = message.contents_int16[j];\n                        }\n                        if (message.contents_int32 && message.contents_int32.length) {\n                            object.contents_int32 = [];\n                            for (var j = 0; j < message.contents_int32.length; ++j)\n                                object.contents_int32[j] = message.contents_int32[j];\n                        }\n                        if (message.contents_int64 && message.contents_int64.length) {\n                            object.contents_int64 = [];\n                            for (var j = 0; j < message.contents_int64.length; ++j)\n                                if (typeof message.contents_int64[j] === \"number\")\n                                    object.contents_int64[j] = options.longs === String ? String(message.contents_int64[j]) : message.contents_int64[j];\n                                else\n                                    object.contents_int64[j] = options.longs === String ? $util.Long.prototype.toString.call(message.contents_int64[j]) : options.longs === Number ? new $util.LongBits(message.contents_int64[j].low >>> 0, message.contents_int64[j].high >>> 0).toNumber() : message.contents_int64[j];\n                        }\n                        if (message.contents_float16 && message.contents_float16.length) {\n                            object.contents_float16 = [];\n                            for (var j = 0; j < message.contents_float16.length; ++j)\n                                object.contents_float16[j] = options.json && !isFinite(message.contents_float16[j]) ? String(message.contents_float16[j]) : message.contents_float16[j];\n                        }\n                        if (message.contents_float32 && message.contents_float32.length) {\n                            object.contents_float32 = [];\n                            for (var j = 0; j < message.contents_float32.length; ++j)\n                                object.contents_float32[j] = options.json && !isFinite(message.contents_float32[j]) ? String(message.contents_float32[j]) : message.contents_float32[j];\n                        }\n                        if (message.contents_float64 && message.contents_float64.length) {\n                            object.contents_float64 = [];\n                            for (var j = 0; j < message.contents_float64.length; ++j)\n                                object.contents_float64[j] = options.json && !isFinite(message.contents_float64[j]) ? String(message.contents_float64[j]) : message.contents_float64[j];\n                        }\n                        if (message.contents_bool && message.contents_bool.length) {\n                            object.contents_bool = [];\n                            for (var j = 0; j < message.contents_bool.length; ++j)\n                                object.contents_bool[j] = message.contents_bool[j];\n                        }\n                        if (message.contents_qint8 && message.contents_qint8.length) {\n                            object.contents_qint8 = [];\n                            for (var j = 0; j < message.contents_qint8.length; ++j)\n                                object.contents_qint8[j] = message.contents_qint8[j];\n                        }\n                        if (message.contents_quint8 && message.contents_quint8.length) {\n                            object.contents_quint8 = [];\n                            for (var j = 0; j < message.contents_quint8.length; ++j)\n                                object.contents_quint8[j] = message.contents_quint8[j];\n                        }\n                        if (message.contents_qint32 && message.contents_qint32.length) {\n                            object.contents_qint32 = [];\n                            for (var j = 0; j < message.contents_qint32.length; ++j)\n                                object.contents_qint32[j] = message.contents_qint32[j];\n                        }\n                        if (message.contents_bfloat16 && message.contents_bfloat16.length) {\n                            object.contents_bfloat16 = [];\n                            for (var j = 0; j < message.contents_bfloat16.length; ++j)\n                                object.contents_bfloat16[j] = options.json && !isFinite(message.contents_bfloat16[j]) ? String(message.contents_bfloat16[j]) : message.contents_bfloat16[j];\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this TensorData to JSON.\n                     * @function toJSON\n                     * @memberof syft_proto.types.torch.v1.TensorData\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    TensorData.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return TensorData;\n                })();\n\n                v1.Size = (function() {\n\n                    /**\n                     * Properties of a Size.\n                     * @memberof syft_proto.types.torch.v1\n                     * @interface ISize\n                     * @property {Array.<number>|null} [dims] Size dims\n                     */\n\n                    /**\n                     * Constructs a new Size.\n                     * @memberof syft_proto.types.torch.v1\n                     * @classdesc Represents a Size.\n                     * @implements ISize\n                     * @constructor\n                     * @param {syft_proto.types.torch.v1.ISize=} [properties] Properties to set\n                     */\n                    function Size(properties) {\n                        this.dims = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Size dims.\n                     * @member {Array.<number>} dims\n                     * @memberof syft_proto.types.torch.v1.Size\n                     * @instance\n                     */\n                    Size.prototype.dims = $util.emptyArray;\n\n                    /**\n                     * Creates a new Size instance using the specified properties.\n                     * @function create\n                     * @memberof syft_proto.types.torch.v1.Size\n                     * @static\n                     * @param {syft_proto.types.torch.v1.ISize=} [properties] Properties to set\n                     * @returns {syft_proto.types.torch.v1.Size} Size instance\n                     */\n                    Size.create = function create(properties) {\n                        return new Size(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Size message. Does not implicitly {@link syft_proto.types.torch.v1.Size.verify|verify} messages.\n                     * @function encode\n                     * @memberof syft_proto.types.torch.v1.Size\n                     * @static\n                     * @param {syft_proto.types.torch.v1.ISize} message Size message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Size.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dims != null && message.dims.length) {\n                            writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                            for (var i = 0; i < message.dims.length; ++i)\n                                writer.int32(message.dims[i]);\n                            writer.ldelim();\n                        }\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Size message, length delimited. Does not implicitly {@link syft_proto.types.torch.v1.Size.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof syft_proto.types.torch.v1.Size\n                     * @static\n                     * @param {syft_proto.types.torch.v1.ISize} message Size message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Size.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Size message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof syft_proto.types.torch.v1.Size\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {syft_proto.types.torch.v1.Size} Size\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Size.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.types.torch.v1.Size();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                if (!(message.dims && message.dims.length))\n                                    message.dims = [];\n                                if ((tag & 7) === 2) {\n                                    var end2 = reader.uint32() + reader.pos;\n                                    while (reader.pos < end2)\n                                        message.dims.push(reader.int32());\n                                } else\n                                    message.dims.push(reader.int32());\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Size message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof syft_proto.types.torch.v1.Size\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {syft_proto.types.torch.v1.Size} Size\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Size.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Size message.\n                     * @function verify\n                     * @memberof syft_proto.types.torch.v1.Size\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Size.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                            if (!Array.isArray(message.dims))\n                                return \"dims: array expected\";\n                            for (var i = 0; i < message.dims.length; ++i)\n                                if (!$util.isInteger(message.dims[i]))\n                                    return \"dims: integer[] expected\";\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Size message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof syft_proto.types.torch.v1.Size\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {syft_proto.types.torch.v1.Size} Size\n                     */\n                    Size.fromObject = function fromObject(object) {\n                        if (object instanceof $root.syft_proto.types.torch.v1.Size)\n                            return object;\n                        var message = new $root.syft_proto.types.torch.v1.Size();\n                        if (object.dims) {\n                            if (!Array.isArray(object.dims))\n                                throw TypeError(\".syft_proto.types.torch.v1.Size.dims: array expected\");\n                            message.dims = [];\n                            for (var i = 0; i < object.dims.length; ++i)\n                                message.dims[i] = object.dims[i] | 0;\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Size message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof syft_proto.types.torch.v1.Size\n                     * @static\n                     * @param {syft_proto.types.torch.v1.Size} message Size\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Size.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dims = [];\n                        if (message.dims && message.dims.length) {\n                            object.dims = [];\n                            for (var j = 0; j < message.dims.length; ++j)\n                                object.dims[j] = message.dims[j];\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Size to JSON.\n                     * @function toJSON\n                     * @memberof syft_proto.types.torch.v1.Size\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Size.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return Size;\n                })();\n\n                v1.Parameter = (function() {\n\n                    /**\n                     * Properties of a Parameter.\n                     * @memberof syft_proto.types.torch.v1\n                     * @interface IParameter\n                     * @property {syft_proto.types.syft.v1.IId|null} [id] Parameter id\n                     * @property {syft_proto.types.torch.v1.ITorchTensor|null} [tensor] Parameter tensor\n                     * @property {boolean|null} [requires_grad] Parameter requires_grad\n                     * @property {syft_proto.types.torch.v1.ITorchTensor|null} [grad] Parameter grad\n                     */\n\n                    /**\n                     * Constructs a new Parameter.\n                     * @memberof syft_proto.types.torch.v1\n                     * @classdesc Represents a Parameter.\n                     * @implements IParameter\n                     * @constructor\n                     * @param {syft_proto.types.torch.v1.IParameter=} [properties] Properties to set\n                     */\n                    function Parameter(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Parameter id.\n                     * @member {syft_proto.types.syft.v1.IId|null|undefined} id\n                     * @memberof syft_proto.types.torch.v1.Parameter\n                     * @instance\n                     */\n                    Parameter.prototype.id = null;\n\n                    /**\n                     * Parameter tensor.\n                     * @member {syft_proto.types.torch.v1.ITorchTensor|null|undefined} tensor\n                     * @memberof syft_proto.types.torch.v1.Parameter\n                     * @instance\n                     */\n                    Parameter.prototype.tensor = null;\n\n                    /**\n                     * Parameter requires_grad.\n                     * @member {boolean} requires_grad\n                     * @memberof syft_proto.types.torch.v1.Parameter\n                     * @instance\n                     */\n                    Parameter.prototype.requires_grad = false;\n\n                    /**\n                     * Parameter grad.\n                     * @member {syft_proto.types.torch.v1.ITorchTensor|null|undefined} grad\n                     * @memberof syft_proto.types.torch.v1.Parameter\n                     * @instance\n                     */\n                    Parameter.prototype.grad = null;\n\n                    /**\n                     * Creates a new Parameter instance using the specified properties.\n                     * @function create\n                     * @memberof syft_proto.types.torch.v1.Parameter\n                     * @static\n                     * @param {syft_proto.types.torch.v1.IParameter=} [properties] Properties to set\n                     * @returns {syft_proto.types.torch.v1.Parameter} Parameter instance\n                     */\n                    Parameter.create = function create(properties) {\n                        return new Parameter(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Parameter message. Does not implicitly {@link syft_proto.types.torch.v1.Parameter.verify|verify} messages.\n                     * @function encode\n                     * @memberof syft_proto.types.torch.v1.Parameter\n                     * @static\n                     * @param {syft_proto.types.torch.v1.IParameter} message Parameter message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Parameter.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.id != null && message.hasOwnProperty(\"id\"))\n                            $root.syft_proto.types.syft.v1.Id.encode(message.id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.tensor != null && message.hasOwnProperty(\"tensor\"))\n                            $root.syft_proto.types.torch.v1.TorchTensor.encode(message.tensor, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.requires_grad != null && message.hasOwnProperty(\"requires_grad\"))\n                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.requires_grad);\n                        if (message.grad != null && message.hasOwnProperty(\"grad\"))\n                            $root.syft_proto.types.torch.v1.TorchTensor.encode(message.grad, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Parameter message, length delimited. Does not implicitly {@link syft_proto.types.torch.v1.Parameter.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof syft_proto.types.torch.v1.Parameter\n                     * @static\n                     * @param {syft_proto.types.torch.v1.IParameter} message Parameter message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Parameter.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Parameter message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof syft_proto.types.torch.v1.Parameter\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {syft_proto.types.torch.v1.Parameter} Parameter\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Parameter.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.types.torch.v1.Parameter();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                                break;\n                            case 2:\n                                message.tensor = $root.syft_proto.types.torch.v1.TorchTensor.decode(reader, reader.uint32());\n                                break;\n                            case 3:\n                                message.requires_grad = reader.bool();\n                                break;\n                            case 4:\n                                message.grad = $root.syft_proto.types.torch.v1.TorchTensor.decode(reader, reader.uint32());\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Parameter message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof syft_proto.types.torch.v1.Parameter\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {syft_proto.types.torch.v1.Parameter} Parameter\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Parameter.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Parameter message.\n                     * @function verify\n                     * @memberof syft_proto.types.torch.v1.Parameter\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Parameter.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.id != null && message.hasOwnProperty(\"id\")) {\n                            var error = $root.syft_proto.types.syft.v1.Id.verify(message.id);\n                            if (error)\n                                return \"id.\" + error;\n                        }\n                        if (message.tensor != null && message.hasOwnProperty(\"tensor\")) {\n                            var error = $root.syft_proto.types.torch.v1.TorchTensor.verify(message.tensor);\n                            if (error)\n                                return \"tensor.\" + error;\n                        }\n                        if (message.requires_grad != null && message.hasOwnProperty(\"requires_grad\"))\n                            if (typeof message.requires_grad !== \"boolean\")\n                                return \"requires_grad: boolean expected\";\n                        if (message.grad != null && message.hasOwnProperty(\"grad\")) {\n                            var error = $root.syft_proto.types.torch.v1.TorchTensor.verify(message.grad);\n                            if (error)\n                                return \"grad.\" + error;\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Parameter message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof syft_proto.types.torch.v1.Parameter\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {syft_proto.types.torch.v1.Parameter} Parameter\n                     */\n                    Parameter.fromObject = function fromObject(object) {\n                        if (object instanceof $root.syft_proto.types.torch.v1.Parameter)\n                            return object;\n                        var message = new $root.syft_proto.types.torch.v1.Parameter();\n                        if (object.id != null) {\n                            if (typeof object.id !== \"object\")\n                                throw TypeError(\".syft_proto.types.torch.v1.Parameter.id: object expected\");\n                            message.id = $root.syft_proto.types.syft.v1.Id.fromObject(object.id);\n                        }\n                        if (object.tensor != null) {\n                            if (typeof object.tensor !== \"object\")\n                                throw TypeError(\".syft_proto.types.torch.v1.Parameter.tensor: object expected\");\n                            message.tensor = $root.syft_proto.types.torch.v1.TorchTensor.fromObject(object.tensor);\n                        }\n                        if (object.requires_grad != null)\n                            message.requires_grad = Boolean(object.requires_grad);\n                        if (object.grad != null) {\n                            if (typeof object.grad !== \"object\")\n                                throw TypeError(\".syft_proto.types.torch.v1.Parameter.grad: object expected\");\n                            message.grad = $root.syft_proto.types.torch.v1.TorchTensor.fromObject(object.grad);\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Parameter message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof syft_proto.types.torch.v1.Parameter\n                     * @static\n                     * @param {syft_proto.types.torch.v1.Parameter} message Parameter\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Parameter.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.id = null;\n                            object.tensor = null;\n                            object.requires_grad = false;\n                            object.grad = null;\n                        }\n                        if (message.id != null && message.hasOwnProperty(\"id\"))\n                            object.id = $root.syft_proto.types.syft.v1.Id.toObject(message.id, options);\n                        if (message.tensor != null && message.hasOwnProperty(\"tensor\"))\n                            object.tensor = $root.syft_proto.types.torch.v1.TorchTensor.toObject(message.tensor, options);\n                        if (message.requires_grad != null && message.hasOwnProperty(\"requires_grad\"))\n                            object.requires_grad = message.requires_grad;\n                        if (message.grad != null && message.hasOwnProperty(\"grad\"))\n                            object.grad = $root.syft_proto.types.torch.v1.TorchTensor.toObject(message.grad, options);\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Parameter to JSON.\n                     * @function toJSON\n                     * @memberof syft_proto.types.torch.v1.Parameter\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Parameter.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return Parameter;\n                })();\n\n                v1.CFunction = (function() {\n\n                    /**\n                     * Properties of a CFunction.\n                     * @memberof syft_proto.types.torch.v1\n                     * @interface ICFunction\n                     * @property {Uint8Array|null} [obj] CFunction obj\n                     */\n\n                    /**\n                     * Constructs a new CFunction.\n                     * @memberof syft_proto.types.torch.v1\n                     * @classdesc Represents a CFunction.\n                     * @implements ICFunction\n                     * @constructor\n                     * @param {syft_proto.types.torch.v1.ICFunction=} [properties] Properties to set\n                     */\n                    function CFunction(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * CFunction obj.\n                     * @member {Uint8Array} obj\n                     * @memberof syft_proto.types.torch.v1.CFunction\n                     * @instance\n                     */\n                    CFunction.prototype.obj = $util.newBuffer([]);\n\n                    /**\n                     * Creates a new CFunction instance using the specified properties.\n                     * @function create\n                     * @memberof syft_proto.types.torch.v1.CFunction\n                     * @static\n                     * @param {syft_proto.types.torch.v1.ICFunction=} [properties] Properties to set\n                     * @returns {syft_proto.types.torch.v1.CFunction} CFunction instance\n                     */\n                    CFunction.create = function create(properties) {\n                        return new CFunction(properties);\n                    };\n\n                    /**\n                     * Encodes the specified CFunction message. Does not implicitly {@link syft_proto.types.torch.v1.CFunction.verify|verify} messages.\n                     * @function encode\n                     * @memberof syft_proto.types.torch.v1.CFunction\n                     * @static\n                     * @param {syft_proto.types.torch.v1.ICFunction} message CFunction message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    CFunction.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.obj != null && message.hasOwnProperty(\"obj\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.obj);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified CFunction message, length delimited. Does not implicitly {@link syft_proto.types.torch.v1.CFunction.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof syft_proto.types.torch.v1.CFunction\n                     * @static\n                     * @param {syft_proto.types.torch.v1.ICFunction} message CFunction message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    CFunction.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a CFunction message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof syft_proto.types.torch.v1.CFunction\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {syft_proto.types.torch.v1.CFunction} CFunction\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    CFunction.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.types.torch.v1.CFunction();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.obj = reader.bytes();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a CFunction message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof syft_proto.types.torch.v1.CFunction\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {syft_proto.types.torch.v1.CFunction} CFunction\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    CFunction.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a CFunction message.\n                     * @function verify\n                     * @memberof syft_proto.types.torch.v1.CFunction\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    CFunction.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.obj != null && message.hasOwnProperty(\"obj\"))\n                            if (!(message.obj && typeof message.obj.length === \"number\" || $util.isString(message.obj)))\n                                return \"obj: buffer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a CFunction message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof syft_proto.types.torch.v1.CFunction\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {syft_proto.types.torch.v1.CFunction} CFunction\n                     */\n                    CFunction.fromObject = function fromObject(object) {\n                        if (object instanceof $root.syft_proto.types.torch.v1.CFunction)\n                            return object;\n                        var message = new $root.syft_proto.types.torch.v1.CFunction();\n                        if (object.obj != null)\n                            if (typeof object.obj === \"string\")\n                                $util.base64.decode(object.obj, message.obj = $util.newBuffer($util.base64.length(object.obj)), 0);\n                            else if (object.obj.length)\n                                message.obj = object.obj;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a CFunction message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof syft_proto.types.torch.v1.CFunction\n                     * @static\n                     * @param {syft_proto.types.torch.v1.CFunction} message CFunction\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    CFunction.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults)\n                            if (options.bytes === String)\n                                object.obj = \"\";\n                            else {\n                                object.obj = [];\n                                if (options.bytes !== Array)\n                                    object.obj = $util.newBuffer(object.obj);\n                            }\n                        if (message.obj != null && message.hasOwnProperty(\"obj\"))\n                            object.obj = options.bytes === String ? $util.base64.encode(message.obj, 0, message.obj.length) : options.bytes === Array ? Array.prototype.slice.call(message.obj) : message.obj;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this CFunction to JSON.\n                     * @function toJSON\n                     * @memberof syft_proto.types.torch.v1.CFunction\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    CFunction.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return CFunction;\n                })();\n\n                v1.Device = (function() {\n\n                    /**\n                     * Properties of a Device.\n                     * @memberof syft_proto.types.torch.v1\n                     * @interface IDevice\n                     * @property {string|null} [type] Device type\n                     */\n\n                    /**\n                     * Constructs a new Device.\n                     * @memberof syft_proto.types.torch.v1\n                     * @classdesc Represents a Device.\n                     * @implements IDevice\n                     * @constructor\n                     * @param {syft_proto.types.torch.v1.IDevice=} [properties] Properties to set\n                     */\n                    function Device(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Device type.\n                     * @member {string} type\n                     * @memberof syft_proto.types.torch.v1.Device\n                     * @instance\n                     */\n                    Device.prototype.type = \"\";\n\n                    /**\n                     * Creates a new Device instance using the specified properties.\n                     * @function create\n                     * @memberof syft_proto.types.torch.v1.Device\n                     * @static\n                     * @param {syft_proto.types.torch.v1.IDevice=} [properties] Properties to set\n                     * @returns {syft_proto.types.torch.v1.Device} Device instance\n                     */\n                    Device.create = function create(properties) {\n                        return new Device(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Device message. Does not implicitly {@link syft_proto.types.torch.v1.Device.verify|verify} messages.\n                     * @function encode\n                     * @memberof syft_proto.types.torch.v1.Device\n                     * @static\n                     * @param {syft_proto.types.torch.v1.IDevice} message Device message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Device.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.type != null && message.hasOwnProperty(\"type\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Device message, length delimited. Does not implicitly {@link syft_proto.types.torch.v1.Device.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof syft_proto.types.torch.v1.Device\n                     * @static\n                     * @param {syft_proto.types.torch.v1.IDevice} message Device message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Device.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Device message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof syft_proto.types.torch.v1.Device\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {syft_proto.types.torch.v1.Device} Device\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Device.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.types.torch.v1.Device();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.type = reader.string();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Device message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof syft_proto.types.torch.v1.Device\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {syft_proto.types.torch.v1.Device} Device\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Device.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Device message.\n                     * @function verify\n                     * @memberof syft_proto.types.torch.v1.Device\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Device.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.type != null && message.hasOwnProperty(\"type\"))\n                            if (!$util.isString(message.type))\n                                return \"type: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Device message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof syft_proto.types.torch.v1.Device\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {syft_proto.types.torch.v1.Device} Device\n                     */\n                    Device.fromObject = function fromObject(object) {\n                        if (object instanceof $root.syft_proto.types.torch.v1.Device)\n                            return object;\n                        var message = new $root.syft_proto.types.torch.v1.Device();\n                        if (object.type != null)\n                            message.type = String(object.type);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Device message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof syft_proto.types.torch.v1.Device\n                     * @static\n                     * @param {syft_proto.types.torch.v1.Device} message Device\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Device.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults)\n                            object.type = \"\";\n                        if (message.type != null && message.hasOwnProperty(\"type\"))\n                            object.type = message.type;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Device to JSON.\n                     * @function toJSON\n                     * @memberof syft_proto.types.torch.v1.Device\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Device.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return Device;\n                })();\n\n                v1.TorchDType = (function() {\n\n                    /**\n                     * Properties of a TorchDType.\n                     * @memberof syft_proto.types.torch.v1\n                     * @interface ITorchDType\n                     * @property {string|null} [torch_type] TorchDType torch_type\n                     */\n\n                    /**\n                     * Constructs a new TorchDType.\n                     * @memberof syft_proto.types.torch.v1\n                     * @classdesc Represents a TorchDType.\n                     * @implements ITorchDType\n                     * @constructor\n                     * @param {syft_proto.types.torch.v1.ITorchDType=} [properties] Properties to set\n                     */\n                    function TorchDType(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * TorchDType torch_type.\n                     * @member {string} torch_type\n                     * @memberof syft_proto.types.torch.v1.TorchDType\n                     * @instance\n                     */\n                    TorchDType.prototype.torch_type = \"\";\n\n                    /**\n                     * Creates a new TorchDType instance using the specified properties.\n                     * @function create\n                     * @memberof syft_proto.types.torch.v1.TorchDType\n                     * @static\n                     * @param {syft_proto.types.torch.v1.ITorchDType=} [properties] Properties to set\n                     * @returns {syft_proto.types.torch.v1.TorchDType} TorchDType instance\n                     */\n                    TorchDType.create = function create(properties) {\n                        return new TorchDType(properties);\n                    };\n\n                    /**\n                     * Encodes the specified TorchDType message. Does not implicitly {@link syft_proto.types.torch.v1.TorchDType.verify|verify} messages.\n                     * @function encode\n                     * @memberof syft_proto.types.torch.v1.TorchDType\n                     * @static\n                     * @param {syft_proto.types.torch.v1.ITorchDType} message TorchDType message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TorchDType.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.torch_type != null && message.hasOwnProperty(\"torch_type\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.torch_type);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified TorchDType message, length delimited. Does not implicitly {@link syft_proto.types.torch.v1.TorchDType.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof syft_proto.types.torch.v1.TorchDType\n                     * @static\n                     * @param {syft_proto.types.torch.v1.ITorchDType} message TorchDType message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TorchDType.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a TorchDType message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof syft_proto.types.torch.v1.TorchDType\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {syft_proto.types.torch.v1.TorchDType} TorchDType\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TorchDType.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.types.torch.v1.TorchDType();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.torch_type = reader.string();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a TorchDType message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof syft_proto.types.torch.v1.TorchDType\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {syft_proto.types.torch.v1.TorchDType} TorchDType\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TorchDType.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a TorchDType message.\n                     * @function verify\n                     * @memberof syft_proto.types.torch.v1.TorchDType\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    TorchDType.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.torch_type != null && message.hasOwnProperty(\"torch_type\"))\n                            if (!$util.isString(message.torch_type))\n                                return \"torch_type: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a TorchDType message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof syft_proto.types.torch.v1.TorchDType\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {syft_proto.types.torch.v1.TorchDType} TorchDType\n                     */\n                    TorchDType.fromObject = function fromObject(object) {\n                        if (object instanceof $root.syft_proto.types.torch.v1.TorchDType)\n                            return object;\n                        var message = new $root.syft_proto.types.torch.v1.TorchDType();\n                        if (object.torch_type != null)\n                            message.torch_type = String(object.torch_type);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a TorchDType message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof syft_proto.types.torch.v1.TorchDType\n                     * @static\n                     * @param {syft_proto.types.torch.v1.TorchDType} message TorchDType\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    TorchDType.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults)\n                            object.torch_type = \"\";\n                        if (message.torch_type != null && message.hasOwnProperty(\"torch_type\"))\n                            object.torch_type = message.torch_type;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this TorchDType to JSON.\n                     * @function toJSON\n                     * @memberof syft_proto.types.torch.v1.TorchDType\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    TorchDType.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return TorchDType;\n                })();\n\n                v1.MemoryFormat = (function() {\n\n                    /**\n                     * Properties of a MemoryFormat.\n                     * @memberof syft_proto.types.torch.v1\n                     * @interface IMemoryFormat\n                     * @property {string|null} [memory_format_type] MemoryFormat memory_format_type\n                     */\n\n                    /**\n                     * Constructs a new MemoryFormat.\n                     * @memberof syft_proto.types.torch.v1\n                     * @classdesc Represents a MemoryFormat.\n                     * @implements IMemoryFormat\n                     * @constructor\n                     * @param {syft_proto.types.torch.v1.IMemoryFormat=} [properties] Properties to set\n                     */\n                    function MemoryFormat(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * MemoryFormat memory_format_type.\n                     * @member {string} memory_format_type\n                     * @memberof syft_proto.types.torch.v1.MemoryFormat\n                     * @instance\n                     */\n                    MemoryFormat.prototype.memory_format_type = \"\";\n\n                    /**\n                     * Creates a new MemoryFormat instance using the specified properties.\n                     * @function create\n                     * @memberof syft_proto.types.torch.v1.MemoryFormat\n                     * @static\n                     * @param {syft_proto.types.torch.v1.IMemoryFormat=} [properties] Properties to set\n                     * @returns {syft_proto.types.torch.v1.MemoryFormat} MemoryFormat instance\n                     */\n                    MemoryFormat.create = function create(properties) {\n                        return new MemoryFormat(properties);\n                    };\n\n                    /**\n                     * Encodes the specified MemoryFormat message. Does not implicitly {@link syft_proto.types.torch.v1.MemoryFormat.verify|verify} messages.\n                     * @function encode\n                     * @memberof syft_proto.types.torch.v1.MemoryFormat\n                     * @static\n                     * @param {syft_proto.types.torch.v1.IMemoryFormat} message MemoryFormat message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    MemoryFormat.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.memory_format_type != null && message.hasOwnProperty(\"memory_format_type\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.memory_format_type);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified MemoryFormat message, length delimited. Does not implicitly {@link syft_proto.types.torch.v1.MemoryFormat.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof syft_proto.types.torch.v1.MemoryFormat\n                     * @static\n                     * @param {syft_proto.types.torch.v1.IMemoryFormat} message MemoryFormat message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    MemoryFormat.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a MemoryFormat message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof syft_proto.types.torch.v1.MemoryFormat\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {syft_proto.types.torch.v1.MemoryFormat} MemoryFormat\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    MemoryFormat.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.types.torch.v1.MemoryFormat();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.memory_format_type = reader.string();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a MemoryFormat message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof syft_proto.types.torch.v1.MemoryFormat\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {syft_proto.types.torch.v1.MemoryFormat} MemoryFormat\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    MemoryFormat.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a MemoryFormat message.\n                     * @function verify\n                     * @memberof syft_proto.types.torch.v1.MemoryFormat\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    MemoryFormat.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.memory_format_type != null && message.hasOwnProperty(\"memory_format_type\"))\n                            if (!$util.isString(message.memory_format_type))\n                                return \"memory_format_type: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a MemoryFormat message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof syft_proto.types.torch.v1.MemoryFormat\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {syft_proto.types.torch.v1.MemoryFormat} MemoryFormat\n                     */\n                    MemoryFormat.fromObject = function fromObject(object) {\n                        if (object instanceof $root.syft_proto.types.torch.v1.MemoryFormat)\n                            return object;\n                        var message = new $root.syft_proto.types.torch.v1.MemoryFormat();\n                        if (object.memory_format_type != null)\n                            message.memory_format_type = String(object.memory_format_type);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a MemoryFormat message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof syft_proto.types.torch.v1.MemoryFormat\n                     * @static\n                     * @param {syft_proto.types.torch.v1.MemoryFormat} message MemoryFormat\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    MemoryFormat.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults)\n                            object.memory_format_type = \"\";\n                        if (message.memory_format_type != null && message.hasOwnProperty(\"memory_format_type\"))\n                            object.memory_format_type = message.memory_format_type;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this MemoryFormat to JSON.\n                     * @function toJSON\n                     * @memberof syft_proto.types.torch.v1.MemoryFormat\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    MemoryFormat.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return MemoryFormat;\n                })();\n\n                v1.ScriptFunction = (function() {\n\n                    /**\n                     * Properties of a ScriptFunction.\n                     * @memberof syft_proto.types.torch.v1\n                     * @interface IScriptFunction\n                     * @property {Uint8Array|null} [obj] ScriptFunction obj\n                     */\n\n                    /**\n                     * Constructs a new ScriptFunction.\n                     * @memberof syft_proto.types.torch.v1\n                     * @classdesc Represents a ScriptFunction.\n                     * @implements IScriptFunction\n                     * @constructor\n                     * @param {syft_proto.types.torch.v1.IScriptFunction=} [properties] Properties to set\n                     */\n                    function ScriptFunction(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ScriptFunction obj.\n                     * @member {Uint8Array} obj\n                     * @memberof syft_proto.types.torch.v1.ScriptFunction\n                     * @instance\n                     */\n                    ScriptFunction.prototype.obj = $util.newBuffer([]);\n\n                    /**\n                     * Creates a new ScriptFunction instance using the specified properties.\n                     * @function create\n                     * @memberof syft_proto.types.torch.v1.ScriptFunction\n                     * @static\n                     * @param {syft_proto.types.torch.v1.IScriptFunction=} [properties] Properties to set\n                     * @returns {syft_proto.types.torch.v1.ScriptFunction} ScriptFunction instance\n                     */\n                    ScriptFunction.create = function create(properties) {\n                        return new ScriptFunction(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ScriptFunction message. Does not implicitly {@link syft_proto.types.torch.v1.ScriptFunction.verify|verify} messages.\n                     * @function encode\n                     * @memberof syft_proto.types.torch.v1.ScriptFunction\n                     * @static\n                     * @param {syft_proto.types.torch.v1.IScriptFunction} message ScriptFunction message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScriptFunction.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.obj != null && message.hasOwnProperty(\"obj\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.obj);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ScriptFunction message, length delimited. Does not implicitly {@link syft_proto.types.torch.v1.ScriptFunction.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof syft_proto.types.torch.v1.ScriptFunction\n                     * @static\n                     * @param {syft_proto.types.torch.v1.IScriptFunction} message ScriptFunction message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScriptFunction.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ScriptFunction message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof syft_proto.types.torch.v1.ScriptFunction\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {syft_proto.types.torch.v1.ScriptFunction} ScriptFunction\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScriptFunction.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.types.torch.v1.ScriptFunction();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.obj = reader.bytes();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ScriptFunction message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof syft_proto.types.torch.v1.ScriptFunction\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {syft_proto.types.torch.v1.ScriptFunction} ScriptFunction\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScriptFunction.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ScriptFunction message.\n                     * @function verify\n                     * @memberof syft_proto.types.torch.v1.ScriptFunction\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ScriptFunction.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.obj != null && message.hasOwnProperty(\"obj\"))\n                            if (!(message.obj && typeof message.obj.length === \"number\" || $util.isString(message.obj)))\n                                return \"obj: buffer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ScriptFunction message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof syft_proto.types.torch.v1.ScriptFunction\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {syft_proto.types.torch.v1.ScriptFunction} ScriptFunction\n                     */\n                    ScriptFunction.fromObject = function fromObject(object) {\n                        if (object instanceof $root.syft_proto.types.torch.v1.ScriptFunction)\n                            return object;\n                        var message = new $root.syft_proto.types.torch.v1.ScriptFunction();\n                        if (object.obj != null)\n                            if (typeof object.obj === \"string\")\n                                $util.base64.decode(object.obj, message.obj = $util.newBuffer($util.base64.length(object.obj)), 0);\n                            else if (object.obj.length)\n                                message.obj = object.obj;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ScriptFunction message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof syft_proto.types.torch.v1.ScriptFunction\n                     * @static\n                     * @param {syft_proto.types.torch.v1.ScriptFunction} message ScriptFunction\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ScriptFunction.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults)\n                            if (options.bytes === String)\n                                object.obj = \"\";\n                            else {\n                                object.obj = [];\n                                if (options.bytes !== Array)\n                                    object.obj = $util.newBuffer(object.obj);\n                            }\n                        if (message.obj != null && message.hasOwnProperty(\"obj\"))\n                            object.obj = options.bytes === String ? $util.base64.encode(message.obj, 0, message.obj.length) : options.bytes === Array ? Array.prototype.slice.call(message.obj) : message.obj;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ScriptFunction to JSON.\n                     * @function toJSON\n                     * @memberof syft_proto.types.torch.v1.ScriptFunction\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ScriptFunction.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return ScriptFunction;\n                })();\n\n                v1.ScriptModule = (function() {\n\n                    /**\n                     * Properties of a ScriptModule.\n                     * @memberof syft_proto.types.torch.v1\n                     * @interface IScriptModule\n                     * @property {Uint8Array|null} [obj] ScriptModule obj\n                     */\n\n                    /**\n                     * Constructs a new ScriptModule.\n                     * @memberof syft_proto.types.torch.v1\n                     * @classdesc Represents a ScriptModule.\n                     * @implements IScriptModule\n                     * @constructor\n                     * @param {syft_proto.types.torch.v1.IScriptModule=} [properties] Properties to set\n                     */\n                    function ScriptModule(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ScriptModule obj.\n                     * @member {Uint8Array} obj\n                     * @memberof syft_proto.types.torch.v1.ScriptModule\n                     * @instance\n                     */\n                    ScriptModule.prototype.obj = $util.newBuffer([]);\n\n                    /**\n                     * Creates a new ScriptModule instance using the specified properties.\n                     * @function create\n                     * @memberof syft_proto.types.torch.v1.ScriptModule\n                     * @static\n                     * @param {syft_proto.types.torch.v1.IScriptModule=} [properties] Properties to set\n                     * @returns {syft_proto.types.torch.v1.ScriptModule} ScriptModule instance\n                     */\n                    ScriptModule.create = function create(properties) {\n                        return new ScriptModule(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ScriptModule message. Does not implicitly {@link syft_proto.types.torch.v1.ScriptModule.verify|verify} messages.\n                     * @function encode\n                     * @memberof syft_proto.types.torch.v1.ScriptModule\n                     * @static\n                     * @param {syft_proto.types.torch.v1.IScriptModule} message ScriptModule message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScriptModule.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.obj != null && message.hasOwnProperty(\"obj\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.obj);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ScriptModule message, length delimited. Does not implicitly {@link syft_proto.types.torch.v1.ScriptModule.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof syft_proto.types.torch.v1.ScriptModule\n                     * @static\n                     * @param {syft_proto.types.torch.v1.IScriptModule} message ScriptModule message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScriptModule.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ScriptModule message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof syft_proto.types.torch.v1.ScriptModule\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {syft_proto.types.torch.v1.ScriptModule} ScriptModule\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScriptModule.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.types.torch.v1.ScriptModule();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.obj = reader.bytes();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ScriptModule message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof syft_proto.types.torch.v1.ScriptModule\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {syft_proto.types.torch.v1.ScriptModule} ScriptModule\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScriptModule.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ScriptModule message.\n                     * @function verify\n                     * @memberof syft_proto.types.torch.v1.ScriptModule\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ScriptModule.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.obj != null && message.hasOwnProperty(\"obj\"))\n                            if (!(message.obj && typeof message.obj.length === \"number\" || $util.isString(message.obj)))\n                                return \"obj: buffer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ScriptModule message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof syft_proto.types.torch.v1.ScriptModule\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {syft_proto.types.torch.v1.ScriptModule} ScriptModule\n                     */\n                    ScriptModule.fromObject = function fromObject(object) {\n                        if (object instanceof $root.syft_proto.types.torch.v1.ScriptModule)\n                            return object;\n                        var message = new $root.syft_proto.types.torch.v1.ScriptModule();\n                        if (object.obj != null)\n                            if (typeof object.obj === \"string\")\n                                $util.base64.decode(object.obj, message.obj = $util.newBuffer($util.base64.length(object.obj)), 0);\n                            else if (object.obj.length)\n                                message.obj = object.obj;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ScriptModule message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof syft_proto.types.torch.v1.ScriptModule\n                     * @static\n                     * @param {syft_proto.types.torch.v1.ScriptModule} message ScriptModule\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ScriptModule.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults)\n                            if (options.bytes === String)\n                                object.obj = \"\";\n                            else {\n                                object.obj = [];\n                                if (options.bytes !== Array)\n                                    object.obj = $util.newBuffer(object.obj);\n                            }\n                        if (message.obj != null && message.hasOwnProperty(\"obj\"))\n                            object.obj = options.bytes === String ? $util.base64.encode(message.obj, 0, message.obj.length) : options.bytes === Array ? Array.prototype.slice.call(message.obj) : message.obj;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ScriptModule to JSON.\n                     * @function toJSON\n                     * @memberof syft_proto.types.torch.v1.ScriptModule\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ScriptModule.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return ScriptModule;\n                })();\n\n                v1.TracedModule = (function() {\n\n                    /**\n                     * Properties of a TracedModule.\n                     * @memberof syft_proto.types.torch.v1\n                     * @interface ITracedModule\n                     * @property {Uint8Array|null} [obj] TracedModule obj\n                     */\n\n                    /**\n                     * Constructs a new TracedModule.\n                     * @memberof syft_proto.types.torch.v1\n                     * @classdesc Represents a TracedModule.\n                     * @implements ITracedModule\n                     * @constructor\n                     * @param {syft_proto.types.torch.v1.ITracedModule=} [properties] Properties to set\n                     */\n                    function TracedModule(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * TracedModule obj.\n                     * @member {Uint8Array} obj\n                     * @memberof syft_proto.types.torch.v1.TracedModule\n                     * @instance\n                     */\n                    TracedModule.prototype.obj = $util.newBuffer([]);\n\n                    /**\n                     * Creates a new TracedModule instance using the specified properties.\n                     * @function create\n                     * @memberof syft_proto.types.torch.v1.TracedModule\n                     * @static\n                     * @param {syft_proto.types.torch.v1.ITracedModule=} [properties] Properties to set\n                     * @returns {syft_proto.types.torch.v1.TracedModule} TracedModule instance\n                     */\n                    TracedModule.create = function create(properties) {\n                        return new TracedModule(properties);\n                    };\n\n                    /**\n                     * Encodes the specified TracedModule message. Does not implicitly {@link syft_proto.types.torch.v1.TracedModule.verify|verify} messages.\n                     * @function encode\n                     * @memberof syft_proto.types.torch.v1.TracedModule\n                     * @static\n                     * @param {syft_proto.types.torch.v1.ITracedModule} message TracedModule message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TracedModule.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.obj != null && message.hasOwnProperty(\"obj\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.obj);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified TracedModule message, length delimited. Does not implicitly {@link syft_proto.types.torch.v1.TracedModule.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof syft_proto.types.torch.v1.TracedModule\n                     * @static\n                     * @param {syft_proto.types.torch.v1.ITracedModule} message TracedModule message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TracedModule.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a TracedModule message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof syft_proto.types.torch.v1.TracedModule\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {syft_proto.types.torch.v1.TracedModule} TracedModule\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TracedModule.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.types.torch.v1.TracedModule();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.obj = reader.bytes();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a TracedModule message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof syft_proto.types.torch.v1.TracedModule\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {syft_proto.types.torch.v1.TracedModule} TracedModule\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TracedModule.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a TracedModule message.\n                     * @function verify\n                     * @memberof syft_proto.types.torch.v1.TracedModule\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    TracedModule.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.obj != null && message.hasOwnProperty(\"obj\"))\n                            if (!(message.obj && typeof message.obj.length === \"number\" || $util.isString(message.obj)))\n                                return \"obj: buffer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a TracedModule message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof syft_proto.types.torch.v1.TracedModule\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {syft_proto.types.torch.v1.TracedModule} TracedModule\n                     */\n                    TracedModule.fromObject = function fromObject(object) {\n                        if (object instanceof $root.syft_proto.types.torch.v1.TracedModule)\n                            return object;\n                        var message = new $root.syft_proto.types.torch.v1.TracedModule();\n                        if (object.obj != null)\n                            if (typeof object.obj === \"string\")\n                                $util.base64.decode(object.obj, message.obj = $util.newBuffer($util.base64.length(object.obj)), 0);\n                            else if (object.obj.length)\n                                message.obj = object.obj;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a TracedModule message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof syft_proto.types.torch.v1.TracedModule\n                     * @static\n                     * @param {syft_proto.types.torch.v1.TracedModule} message TracedModule\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    TracedModule.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults)\n                            if (options.bytes === String)\n                                object.obj = \"\";\n                            else {\n                                object.obj = [];\n                                if (options.bytes !== Array)\n                                    object.obj = $util.newBuffer(object.obj);\n                            }\n                        if (message.obj != null && message.hasOwnProperty(\"obj\"))\n                            object.obj = options.bytes === String ? $util.base64.encode(message.obj, 0, message.obj.length) : options.bytes === Array ? Array.prototype.slice.call(message.obj) : message.obj;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this TracedModule to JSON.\n                     * @function toJSON\n                     * @memberof syft_proto.types.torch.v1.TracedModule\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    TracedModule.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return TracedModule;\n                })();\n\n                return v1;\n            })();\n\n            return torch;\n        })();\n\n        return types;\n    })();\n\n    syft_proto.generic = (function() {\n\n        /**\n         * Namespace generic.\n         * @memberof syft_proto\n         * @namespace\n         */\n        var generic = {};\n\n        generic.pointers = (function() {\n\n            /**\n             * Namespace pointers.\n             * @memberof syft_proto.generic\n             * @namespace\n             */\n            var pointers = {};\n\n            pointers.v1 = (function() {\n\n                /**\n                 * Namespace v1.\n                 * @memberof syft_proto.generic.pointers\n                 * @namespace\n                 */\n                var v1 = {};\n\n                v1.PointerTensor = (function() {\n\n                    /**\n                     * Properties of a PointerTensor.\n                     * @memberof syft_proto.generic.pointers.v1\n                     * @interface IPointerTensor\n                     * @property {syft_proto.types.syft.v1.IId|null} [object_id] PointerTensor object_id\n                     * @property {syft_proto.types.syft.v1.IId|null} [location_id] PointerTensor location_id\n                     * @property {syft_proto.types.syft.v1.IId|null} [object_id_at_location] PointerTensor object_id_at_location\n                     * @property {syft_proto.types.syft.v1.IShape|null} [shape] PointerTensor shape\n                     * @property {string|null} [point_to_attr] PointerTensor point_to_attr\n                     * @property {boolean|null} [garbage_collect_data] PointerTensor garbage_collect_data\n                     */\n\n                    /**\n                     * Constructs a new PointerTensor.\n                     * @memberof syft_proto.generic.pointers.v1\n                     * @classdesc Represents a PointerTensor.\n                     * @implements IPointerTensor\n                     * @constructor\n                     * @param {syft_proto.generic.pointers.v1.IPointerTensor=} [properties] Properties to set\n                     */\n                    function PointerTensor(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * PointerTensor object_id.\n                     * @member {syft_proto.types.syft.v1.IId|null|undefined} object_id\n                     * @memberof syft_proto.generic.pointers.v1.PointerTensor\n                     * @instance\n                     */\n                    PointerTensor.prototype.object_id = null;\n\n                    /**\n                     * PointerTensor location_id.\n                     * @member {syft_proto.types.syft.v1.IId|null|undefined} location_id\n                     * @memberof syft_proto.generic.pointers.v1.PointerTensor\n                     * @instance\n                     */\n                    PointerTensor.prototype.location_id = null;\n\n                    /**\n                     * PointerTensor object_id_at_location.\n                     * @member {syft_proto.types.syft.v1.IId|null|undefined} object_id_at_location\n                     * @memberof syft_proto.generic.pointers.v1.PointerTensor\n                     * @instance\n                     */\n                    PointerTensor.prototype.object_id_at_location = null;\n\n                    /**\n                     * PointerTensor shape.\n                     * @member {syft_proto.types.syft.v1.IShape|null|undefined} shape\n                     * @memberof syft_proto.generic.pointers.v1.PointerTensor\n                     * @instance\n                     */\n                    PointerTensor.prototype.shape = null;\n\n                    /**\n                     * PointerTensor point_to_attr.\n                     * @member {string} point_to_attr\n                     * @memberof syft_proto.generic.pointers.v1.PointerTensor\n                     * @instance\n                     */\n                    PointerTensor.prototype.point_to_attr = \"\";\n\n                    /**\n                     * PointerTensor garbage_collect_data.\n                     * @member {boolean} garbage_collect_data\n                     * @memberof syft_proto.generic.pointers.v1.PointerTensor\n                     * @instance\n                     */\n                    PointerTensor.prototype.garbage_collect_data = false;\n\n                    /**\n                     * Creates a new PointerTensor instance using the specified properties.\n                     * @function create\n                     * @memberof syft_proto.generic.pointers.v1.PointerTensor\n                     * @static\n                     * @param {syft_proto.generic.pointers.v1.IPointerTensor=} [properties] Properties to set\n                     * @returns {syft_proto.generic.pointers.v1.PointerTensor} PointerTensor instance\n                     */\n                    PointerTensor.create = function create(properties) {\n                        return new PointerTensor(properties);\n                    };\n\n                    /**\n                     * Encodes the specified PointerTensor message. Does not implicitly {@link syft_proto.generic.pointers.v1.PointerTensor.verify|verify} messages.\n                     * @function encode\n                     * @memberof syft_proto.generic.pointers.v1.PointerTensor\n                     * @static\n                     * @param {syft_proto.generic.pointers.v1.IPointerTensor} message PointerTensor message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    PointerTensor.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.object_id != null && message.hasOwnProperty(\"object_id\"))\n                            $root.syft_proto.types.syft.v1.Id.encode(message.object_id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.location_id != null && message.hasOwnProperty(\"location_id\"))\n                            $root.syft_proto.types.syft.v1.Id.encode(message.location_id, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.object_id_at_location != null && message.hasOwnProperty(\"object_id_at_location\"))\n                            $root.syft_proto.types.syft.v1.Id.encode(message.object_id_at_location, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                        if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                            $root.syft_proto.types.syft.v1.Shape.encode(message.shape, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                        if (message.point_to_attr != null && message.hasOwnProperty(\"point_to_attr\"))\n                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.point_to_attr);\n                        if (message.garbage_collect_data != null && message.hasOwnProperty(\"garbage_collect_data\"))\n                            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.garbage_collect_data);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified PointerTensor message, length delimited. Does not implicitly {@link syft_proto.generic.pointers.v1.PointerTensor.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof syft_proto.generic.pointers.v1.PointerTensor\n                     * @static\n                     * @param {syft_proto.generic.pointers.v1.IPointerTensor} message PointerTensor message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    PointerTensor.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a PointerTensor message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof syft_proto.generic.pointers.v1.PointerTensor\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {syft_proto.generic.pointers.v1.PointerTensor} PointerTensor\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    PointerTensor.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.generic.pointers.v1.PointerTensor();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.object_id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                                break;\n                            case 2:\n                                message.location_id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                                break;\n                            case 3:\n                                message.object_id_at_location = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                                break;\n                            case 4:\n                                message.shape = $root.syft_proto.types.syft.v1.Shape.decode(reader, reader.uint32());\n                                break;\n                            case 5:\n                                message.point_to_attr = reader.string();\n                                break;\n                            case 6:\n                                message.garbage_collect_data = reader.bool();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a PointerTensor message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof syft_proto.generic.pointers.v1.PointerTensor\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {syft_proto.generic.pointers.v1.PointerTensor} PointerTensor\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    PointerTensor.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a PointerTensor message.\n                     * @function verify\n                     * @memberof syft_proto.generic.pointers.v1.PointerTensor\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    PointerTensor.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.object_id != null && message.hasOwnProperty(\"object_id\")) {\n                            var error = $root.syft_proto.types.syft.v1.Id.verify(message.object_id);\n                            if (error)\n                                return \"object_id.\" + error;\n                        }\n                        if (message.location_id != null && message.hasOwnProperty(\"location_id\")) {\n                            var error = $root.syft_proto.types.syft.v1.Id.verify(message.location_id);\n                            if (error)\n                                return \"location_id.\" + error;\n                        }\n                        if (message.object_id_at_location != null && message.hasOwnProperty(\"object_id_at_location\")) {\n                            var error = $root.syft_proto.types.syft.v1.Id.verify(message.object_id_at_location);\n                            if (error)\n                                return \"object_id_at_location.\" + error;\n                        }\n                        if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                            var error = $root.syft_proto.types.syft.v1.Shape.verify(message.shape);\n                            if (error)\n                                return \"shape.\" + error;\n                        }\n                        if (message.point_to_attr != null && message.hasOwnProperty(\"point_to_attr\"))\n                            if (!$util.isString(message.point_to_attr))\n                                return \"point_to_attr: string expected\";\n                        if (message.garbage_collect_data != null && message.hasOwnProperty(\"garbage_collect_data\"))\n                            if (typeof message.garbage_collect_data !== \"boolean\")\n                                return \"garbage_collect_data: boolean expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a PointerTensor message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof syft_proto.generic.pointers.v1.PointerTensor\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {syft_proto.generic.pointers.v1.PointerTensor} PointerTensor\n                     */\n                    PointerTensor.fromObject = function fromObject(object) {\n                        if (object instanceof $root.syft_proto.generic.pointers.v1.PointerTensor)\n                            return object;\n                        var message = new $root.syft_proto.generic.pointers.v1.PointerTensor();\n                        if (object.object_id != null) {\n                            if (typeof object.object_id !== \"object\")\n                                throw TypeError(\".syft_proto.generic.pointers.v1.PointerTensor.object_id: object expected\");\n                            message.object_id = $root.syft_proto.types.syft.v1.Id.fromObject(object.object_id);\n                        }\n                        if (object.location_id != null) {\n                            if (typeof object.location_id !== \"object\")\n                                throw TypeError(\".syft_proto.generic.pointers.v1.PointerTensor.location_id: object expected\");\n                            message.location_id = $root.syft_proto.types.syft.v1.Id.fromObject(object.location_id);\n                        }\n                        if (object.object_id_at_location != null) {\n                            if (typeof object.object_id_at_location !== \"object\")\n                                throw TypeError(\".syft_proto.generic.pointers.v1.PointerTensor.object_id_at_location: object expected\");\n                            message.object_id_at_location = $root.syft_proto.types.syft.v1.Id.fromObject(object.object_id_at_location);\n                        }\n                        if (object.shape != null) {\n                            if (typeof object.shape !== \"object\")\n                                throw TypeError(\".syft_proto.generic.pointers.v1.PointerTensor.shape: object expected\");\n                            message.shape = $root.syft_proto.types.syft.v1.Shape.fromObject(object.shape);\n                        }\n                        if (object.point_to_attr != null)\n                            message.point_to_attr = String(object.point_to_attr);\n                        if (object.garbage_collect_data != null)\n                            message.garbage_collect_data = Boolean(object.garbage_collect_data);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a PointerTensor message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof syft_proto.generic.pointers.v1.PointerTensor\n                     * @static\n                     * @param {syft_proto.generic.pointers.v1.PointerTensor} message PointerTensor\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    PointerTensor.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.object_id = null;\n                            object.location_id = null;\n                            object.object_id_at_location = null;\n                            object.shape = null;\n                            object.point_to_attr = \"\";\n                            object.garbage_collect_data = false;\n                        }\n                        if (message.object_id != null && message.hasOwnProperty(\"object_id\"))\n                            object.object_id = $root.syft_proto.types.syft.v1.Id.toObject(message.object_id, options);\n                        if (message.location_id != null && message.hasOwnProperty(\"location_id\"))\n                            object.location_id = $root.syft_proto.types.syft.v1.Id.toObject(message.location_id, options);\n                        if (message.object_id_at_location != null && message.hasOwnProperty(\"object_id_at_location\"))\n                            object.object_id_at_location = $root.syft_proto.types.syft.v1.Id.toObject(message.object_id_at_location, options);\n                        if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                            object.shape = $root.syft_proto.types.syft.v1.Shape.toObject(message.shape, options);\n                        if (message.point_to_attr != null && message.hasOwnProperty(\"point_to_attr\"))\n                            object.point_to_attr = message.point_to_attr;\n                        if (message.garbage_collect_data != null && message.hasOwnProperty(\"garbage_collect_data\"))\n                            object.garbage_collect_data = message.garbage_collect_data;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this PointerTensor to JSON.\n                     * @function toJSON\n                     * @memberof syft_proto.generic.pointers.v1.PointerTensor\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    PointerTensor.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return PointerTensor;\n                })();\n\n                v1.ObjectPointer = (function() {\n\n                    /**\n                     * Properties of an ObjectPointer.\n                     * @memberof syft_proto.generic.pointers.v1\n                     * @interface IObjectPointer\n                     * @property {syft_proto.types.syft.v1.IId|null} [object_id] ObjectPointer object_id\n                     * @property {syft_proto.types.syft.v1.IId|null} [location_id] ObjectPointer location_id\n                     * @property {syft_proto.types.syft.v1.IId|null} [object_id_at_location] ObjectPointer object_id_at_location\n                     * @property {string|null} [point_to_attr] ObjectPointer point_to_attr\n                     */\n\n                    /**\n                     * Constructs a new ObjectPointer.\n                     * @memberof syft_proto.generic.pointers.v1\n                     * @classdesc Represents an ObjectPointer.\n                     * @implements IObjectPointer\n                     * @constructor\n                     * @param {syft_proto.generic.pointers.v1.IObjectPointer=} [properties] Properties to set\n                     */\n                    function ObjectPointer(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ObjectPointer object_id.\n                     * @member {syft_proto.types.syft.v1.IId|null|undefined} object_id\n                     * @memberof syft_proto.generic.pointers.v1.ObjectPointer\n                     * @instance\n                     */\n                    ObjectPointer.prototype.object_id = null;\n\n                    /**\n                     * ObjectPointer location_id.\n                     * @member {syft_proto.types.syft.v1.IId|null|undefined} location_id\n                     * @memberof syft_proto.generic.pointers.v1.ObjectPointer\n                     * @instance\n                     */\n                    ObjectPointer.prototype.location_id = null;\n\n                    /**\n                     * ObjectPointer object_id_at_location.\n                     * @member {syft_proto.types.syft.v1.IId|null|undefined} object_id_at_location\n                     * @memberof syft_proto.generic.pointers.v1.ObjectPointer\n                     * @instance\n                     */\n                    ObjectPointer.prototype.object_id_at_location = null;\n\n                    /**\n                     * ObjectPointer point_to_attr.\n                     * @member {string} point_to_attr\n                     * @memberof syft_proto.generic.pointers.v1.ObjectPointer\n                     * @instance\n                     */\n                    ObjectPointer.prototype.point_to_attr = \"\";\n\n                    /**\n                     * Creates a new ObjectPointer instance using the specified properties.\n                     * @function create\n                     * @memberof syft_proto.generic.pointers.v1.ObjectPointer\n                     * @static\n                     * @param {syft_proto.generic.pointers.v1.IObjectPointer=} [properties] Properties to set\n                     * @returns {syft_proto.generic.pointers.v1.ObjectPointer} ObjectPointer instance\n                     */\n                    ObjectPointer.create = function create(properties) {\n                        return new ObjectPointer(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ObjectPointer message. Does not implicitly {@link syft_proto.generic.pointers.v1.ObjectPointer.verify|verify} messages.\n                     * @function encode\n                     * @memberof syft_proto.generic.pointers.v1.ObjectPointer\n                     * @static\n                     * @param {syft_proto.generic.pointers.v1.IObjectPointer} message ObjectPointer message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ObjectPointer.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.object_id != null && message.hasOwnProperty(\"object_id\"))\n                            $root.syft_proto.types.syft.v1.Id.encode(message.object_id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.location_id != null && message.hasOwnProperty(\"location_id\"))\n                            $root.syft_proto.types.syft.v1.Id.encode(message.location_id, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.object_id_at_location != null && message.hasOwnProperty(\"object_id_at_location\"))\n                            $root.syft_proto.types.syft.v1.Id.encode(message.object_id_at_location, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                        if (message.point_to_attr != null && message.hasOwnProperty(\"point_to_attr\"))\n                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.point_to_attr);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ObjectPointer message, length delimited. Does not implicitly {@link syft_proto.generic.pointers.v1.ObjectPointer.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof syft_proto.generic.pointers.v1.ObjectPointer\n                     * @static\n                     * @param {syft_proto.generic.pointers.v1.IObjectPointer} message ObjectPointer message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ObjectPointer.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an ObjectPointer message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof syft_proto.generic.pointers.v1.ObjectPointer\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {syft_proto.generic.pointers.v1.ObjectPointer} ObjectPointer\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ObjectPointer.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.generic.pointers.v1.ObjectPointer();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.object_id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                                break;\n                            case 2:\n                                message.location_id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                                break;\n                            case 3:\n                                message.object_id_at_location = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                                break;\n                            case 4:\n                                message.point_to_attr = reader.string();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an ObjectPointer message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof syft_proto.generic.pointers.v1.ObjectPointer\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {syft_proto.generic.pointers.v1.ObjectPointer} ObjectPointer\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ObjectPointer.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an ObjectPointer message.\n                     * @function verify\n                     * @memberof syft_proto.generic.pointers.v1.ObjectPointer\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ObjectPointer.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.object_id != null && message.hasOwnProperty(\"object_id\")) {\n                            var error = $root.syft_proto.types.syft.v1.Id.verify(message.object_id);\n                            if (error)\n                                return \"object_id.\" + error;\n                        }\n                        if (message.location_id != null && message.hasOwnProperty(\"location_id\")) {\n                            var error = $root.syft_proto.types.syft.v1.Id.verify(message.location_id);\n                            if (error)\n                                return \"location_id.\" + error;\n                        }\n                        if (message.object_id_at_location != null && message.hasOwnProperty(\"object_id_at_location\")) {\n                            var error = $root.syft_proto.types.syft.v1.Id.verify(message.object_id_at_location);\n                            if (error)\n                                return \"object_id_at_location.\" + error;\n                        }\n                        if (message.point_to_attr != null && message.hasOwnProperty(\"point_to_attr\"))\n                            if (!$util.isString(message.point_to_attr))\n                                return \"point_to_attr: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates an ObjectPointer message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof syft_proto.generic.pointers.v1.ObjectPointer\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {syft_proto.generic.pointers.v1.ObjectPointer} ObjectPointer\n                     */\n                    ObjectPointer.fromObject = function fromObject(object) {\n                        if (object instanceof $root.syft_proto.generic.pointers.v1.ObjectPointer)\n                            return object;\n                        var message = new $root.syft_proto.generic.pointers.v1.ObjectPointer();\n                        if (object.object_id != null) {\n                            if (typeof object.object_id !== \"object\")\n                                throw TypeError(\".syft_proto.generic.pointers.v1.ObjectPointer.object_id: object expected\");\n                            message.object_id = $root.syft_proto.types.syft.v1.Id.fromObject(object.object_id);\n                        }\n                        if (object.location_id != null) {\n                            if (typeof object.location_id !== \"object\")\n                                throw TypeError(\".syft_proto.generic.pointers.v1.ObjectPointer.location_id: object expected\");\n                            message.location_id = $root.syft_proto.types.syft.v1.Id.fromObject(object.location_id);\n                        }\n                        if (object.object_id_at_location != null) {\n                            if (typeof object.object_id_at_location !== \"object\")\n                                throw TypeError(\".syft_proto.generic.pointers.v1.ObjectPointer.object_id_at_location: object expected\");\n                            message.object_id_at_location = $root.syft_proto.types.syft.v1.Id.fromObject(object.object_id_at_location);\n                        }\n                        if (object.point_to_attr != null)\n                            message.point_to_attr = String(object.point_to_attr);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an ObjectPointer message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof syft_proto.generic.pointers.v1.ObjectPointer\n                     * @static\n                     * @param {syft_proto.generic.pointers.v1.ObjectPointer} message ObjectPointer\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ObjectPointer.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.object_id = null;\n                            object.location_id = null;\n                            object.object_id_at_location = null;\n                            object.point_to_attr = \"\";\n                        }\n                        if (message.object_id != null && message.hasOwnProperty(\"object_id\"))\n                            object.object_id = $root.syft_proto.types.syft.v1.Id.toObject(message.object_id, options);\n                        if (message.location_id != null && message.hasOwnProperty(\"location_id\"))\n                            object.location_id = $root.syft_proto.types.syft.v1.Id.toObject(message.location_id, options);\n                        if (message.object_id_at_location != null && message.hasOwnProperty(\"object_id_at_location\"))\n                            object.object_id_at_location = $root.syft_proto.types.syft.v1.Id.toObject(message.object_id_at_location, options);\n                        if (message.point_to_attr != null && message.hasOwnProperty(\"point_to_attr\"))\n                            object.point_to_attr = message.point_to_attr;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ObjectPointer to JSON.\n                     * @function toJSON\n                     * @memberof syft_proto.generic.pointers.v1.ObjectPointer\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ObjectPointer.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return ObjectPointer;\n                })();\n\n                v1.PointerDataset = (function() {\n\n                    /**\n                     * Properties of a PointerDataset.\n                     * @memberof syft_proto.generic.pointers.v1\n                     * @interface IPointerDataset\n                     * @property {syft_proto.types.syft.v1.IId|null} [object_id] PointerDataset object_id\n                     * @property {syft_proto.types.syft.v1.IId|null} [location_id] PointerDataset location_id\n                     * @property {syft_proto.types.syft.v1.IId|null} [object_id_at_location] PointerDataset object_id_at_location\n                     * @property {Array.<string>|null} [tags] PointerDataset tags\n                     * @property {string|null} [description] PointerDataset description\n                     * @property {boolean|null} [garbage_collect_data] PointerDataset garbage_collect_data\n                     */\n\n                    /**\n                     * Constructs a new PointerDataset.\n                     * @memberof syft_proto.generic.pointers.v1\n                     * @classdesc Represents a PointerDataset.\n                     * @implements IPointerDataset\n                     * @constructor\n                     * @param {syft_proto.generic.pointers.v1.IPointerDataset=} [properties] Properties to set\n                     */\n                    function PointerDataset(properties) {\n                        this.tags = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * PointerDataset object_id.\n                     * @member {syft_proto.types.syft.v1.IId|null|undefined} object_id\n                     * @memberof syft_proto.generic.pointers.v1.PointerDataset\n                     * @instance\n                     */\n                    PointerDataset.prototype.object_id = null;\n\n                    /**\n                     * PointerDataset location_id.\n                     * @member {syft_proto.types.syft.v1.IId|null|undefined} location_id\n                     * @memberof syft_proto.generic.pointers.v1.PointerDataset\n                     * @instance\n                     */\n                    PointerDataset.prototype.location_id = null;\n\n                    /**\n                     * PointerDataset object_id_at_location.\n                     * @member {syft_proto.types.syft.v1.IId|null|undefined} object_id_at_location\n                     * @memberof syft_proto.generic.pointers.v1.PointerDataset\n                     * @instance\n                     */\n                    PointerDataset.prototype.object_id_at_location = null;\n\n                    /**\n                     * PointerDataset tags.\n                     * @member {Array.<string>} tags\n                     * @memberof syft_proto.generic.pointers.v1.PointerDataset\n                     * @instance\n                     */\n                    PointerDataset.prototype.tags = $util.emptyArray;\n\n                    /**\n                     * PointerDataset description.\n                     * @member {string} description\n                     * @memberof syft_proto.generic.pointers.v1.PointerDataset\n                     * @instance\n                     */\n                    PointerDataset.prototype.description = \"\";\n\n                    /**\n                     * PointerDataset garbage_collect_data.\n                     * @member {boolean} garbage_collect_data\n                     * @memberof syft_proto.generic.pointers.v1.PointerDataset\n                     * @instance\n                     */\n                    PointerDataset.prototype.garbage_collect_data = false;\n\n                    /**\n                     * Creates a new PointerDataset instance using the specified properties.\n                     * @function create\n                     * @memberof syft_proto.generic.pointers.v1.PointerDataset\n                     * @static\n                     * @param {syft_proto.generic.pointers.v1.IPointerDataset=} [properties] Properties to set\n                     * @returns {syft_proto.generic.pointers.v1.PointerDataset} PointerDataset instance\n                     */\n                    PointerDataset.create = function create(properties) {\n                        return new PointerDataset(properties);\n                    };\n\n                    /**\n                     * Encodes the specified PointerDataset message. Does not implicitly {@link syft_proto.generic.pointers.v1.PointerDataset.verify|verify} messages.\n                     * @function encode\n                     * @memberof syft_proto.generic.pointers.v1.PointerDataset\n                     * @static\n                     * @param {syft_proto.generic.pointers.v1.IPointerDataset} message PointerDataset message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    PointerDataset.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.object_id != null && message.hasOwnProperty(\"object_id\"))\n                            $root.syft_proto.types.syft.v1.Id.encode(message.object_id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.location_id != null && message.hasOwnProperty(\"location_id\"))\n                            $root.syft_proto.types.syft.v1.Id.encode(message.location_id, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.object_id_at_location != null && message.hasOwnProperty(\"object_id_at_location\"))\n                            $root.syft_proto.types.syft.v1.Id.encode(message.object_id_at_location, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                        if (message.tags != null && message.tags.length)\n                            for (var i = 0; i < message.tags.length; ++i)\n                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.tags[i]);\n                        if (message.description != null && message.hasOwnProperty(\"description\"))\n                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.description);\n                        if (message.garbage_collect_data != null && message.hasOwnProperty(\"garbage_collect_data\"))\n                            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.garbage_collect_data);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified PointerDataset message, length delimited. Does not implicitly {@link syft_proto.generic.pointers.v1.PointerDataset.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof syft_proto.generic.pointers.v1.PointerDataset\n                     * @static\n                     * @param {syft_proto.generic.pointers.v1.IPointerDataset} message PointerDataset message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    PointerDataset.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a PointerDataset message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof syft_proto.generic.pointers.v1.PointerDataset\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {syft_proto.generic.pointers.v1.PointerDataset} PointerDataset\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    PointerDataset.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.generic.pointers.v1.PointerDataset();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.object_id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                                break;\n                            case 2:\n                                message.location_id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                                break;\n                            case 3:\n                                message.object_id_at_location = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                                break;\n                            case 4:\n                                if (!(message.tags && message.tags.length))\n                                    message.tags = [];\n                                message.tags.push(reader.string());\n                                break;\n                            case 5:\n                                message.description = reader.string();\n                                break;\n                            case 6:\n                                message.garbage_collect_data = reader.bool();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a PointerDataset message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof syft_proto.generic.pointers.v1.PointerDataset\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {syft_proto.generic.pointers.v1.PointerDataset} PointerDataset\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    PointerDataset.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a PointerDataset message.\n                     * @function verify\n                     * @memberof syft_proto.generic.pointers.v1.PointerDataset\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    PointerDataset.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.object_id != null && message.hasOwnProperty(\"object_id\")) {\n                            var error = $root.syft_proto.types.syft.v1.Id.verify(message.object_id);\n                            if (error)\n                                return \"object_id.\" + error;\n                        }\n                        if (message.location_id != null && message.hasOwnProperty(\"location_id\")) {\n                            var error = $root.syft_proto.types.syft.v1.Id.verify(message.location_id);\n                            if (error)\n                                return \"location_id.\" + error;\n                        }\n                        if (message.object_id_at_location != null && message.hasOwnProperty(\"object_id_at_location\")) {\n                            var error = $root.syft_proto.types.syft.v1.Id.verify(message.object_id_at_location);\n                            if (error)\n                                return \"object_id_at_location.\" + error;\n                        }\n                        if (message.tags != null && message.hasOwnProperty(\"tags\")) {\n                            if (!Array.isArray(message.tags))\n                                return \"tags: array expected\";\n                            for (var i = 0; i < message.tags.length; ++i)\n                                if (!$util.isString(message.tags[i]))\n                                    return \"tags: string[] expected\";\n                        }\n                        if (message.description != null && message.hasOwnProperty(\"description\"))\n                            if (!$util.isString(message.description))\n                                return \"description: string expected\";\n                        if (message.garbage_collect_data != null && message.hasOwnProperty(\"garbage_collect_data\"))\n                            if (typeof message.garbage_collect_data !== \"boolean\")\n                                return \"garbage_collect_data: boolean expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a PointerDataset message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof syft_proto.generic.pointers.v1.PointerDataset\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {syft_proto.generic.pointers.v1.PointerDataset} PointerDataset\n                     */\n                    PointerDataset.fromObject = function fromObject(object) {\n                        if (object instanceof $root.syft_proto.generic.pointers.v1.PointerDataset)\n                            return object;\n                        var message = new $root.syft_proto.generic.pointers.v1.PointerDataset();\n                        if (object.object_id != null) {\n                            if (typeof object.object_id !== \"object\")\n                                throw TypeError(\".syft_proto.generic.pointers.v1.PointerDataset.object_id: object expected\");\n                            message.object_id = $root.syft_proto.types.syft.v1.Id.fromObject(object.object_id);\n                        }\n                        if (object.location_id != null) {\n                            if (typeof object.location_id !== \"object\")\n                                throw TypeError(\".syft_proto.generic.pointers.v1.PointerDataset.location_id: object expected\");\n                            message.location_id = $root.syft_proto.types.syft.v1.Id.fromObject(object.location_id);\n                        }\n                        if (object.object_id_at_location != null) {\n                            if (typeof object.object_id_at_location !== \"object\")\n                                throw TypeError(\".syft_proto.generic.pointers.v1.PointerDataset.object_id_at_location: object expected\");\n                            message.object_id_at_location = $root.syft_proto.types.syft.v1.Id.fromObject(object.object_id_at_location);\n                        }\n                        if (object.tags) {\n                            if (!Array.isArray(object.tags))\n                                throw TypeError(\".syft_proto.generic.pointers.v1.PointerDataset.tags: array expected\");\n                            message.tags = [];\n                            for (var i = 0; i < object.tags.length; ++i)\n                                message.tags[i] = String(object.tags[i]);\n                        }\n                        if (object.description != null)\n                            message.description = String(object.description);\n                        if (object.garbage_collect_data != null)\n                            message.garbage_collect_data = Boolean(object.garbage_collect_data);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a PointerDataset message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof syft_proto.generic.pointers.v1.PointerDataset\n                     * @static\n                     * @param {syft_proto.generic.pointers.v1.PointerDataset} message PointerDataset\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    PointerDataset.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.tags = [];\n                        if (options.defaults) {\n                            object.object_id = null;\n                            object.location_id = null;\n                            object.object_id_at_location = null;\n                            object.description = \"\";\n                            object.garbage_collect_data = false;\n                        }\n                        if (message.object_id != null && message.hasOwnProperty(\"object_id\"))\n                            object.object_id = $root.syft_proto.types.syft.v1.Id.toObject(message.object_id, options);\n                        if (message.location_id != null && message.hasOwnProperty(\"location_id\"))\n                            object.location_id = $root.syft_proto.types.syft.v1.Id.toObject(message.location_id, options);\n                        if (message.object_id_at_location != null && message.hasOwnProperty(\"object_id_at_location\"))\n                            object.object_id_at_location = $root.syft_proto.types.syft.v1.Id.toObject(message.object_id_at_location, options);\n                        if (message.tags && message.tags.length) {\n                            object.tags = [];\n                            for (var j = 0; j < message.tags.length; ++j)\n                                object.tags[j] = message.tags[j];\n                        }\n                        if (message.description != null && message.hasOwnProperty(\"description\"))\n                            object.description = message.description;\n                        if (message.garbage_collect_data != null && message.hasOwnProperty(\"garbage_collect_data\"))\n                            object.garbage_collect_data = message.garbage_collect_data;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this PointerDataset to JSON.\n                     * @function toJSON\n                     * @memberof syft_proto.generic.pointers.v1.PointerDataset\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    PointerDataset.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return PointerDataset;\n                })();\n\n                v1.PointerPlan = (function() {\n\n                    /**\n                     * Properties of a PointerPlan.\n                     * @memberof syft_proto.generic.pointers.v1\n                     * @interface IPointerPlan\n                     * @property {syft_proto.types.syft.v1.IId|null} [object_id] PointerPlan object_id\n                     * @property {syft_proto.types.syft.v1.IId|null} [location_id] PointerPlan location_id\n                     * @property {syft_proto.types.syft.v1.IId|null} [object_id_at_location] PointerPlan object_id_at_location\n                     * @property {Array.<string>|null} [tags] PointerPlan tags\n                     * @property {boolean|null} [garbage_collect_data] PointerPlan garbage_collect_data\n                     */\n\n                    /**\n                     * Constructs a new PointerPlan.\n                     * @memberof syft_proto.generic.pointers.v1\n                     * @classdesc Represents a PointerPlan.\n                     * @implements IPointerPlan\n                     * @constructor\n                     * @param {syft_proto.generic.pointers.v1.IPointerPlan=} [properties] Properties to set\n                     */\n                    function PointerPlan(properties) {\n                        this.tags = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * PointerPlan object_id.\n                     * @member {syft_proto.types.syft.v1.IId|null|undefined} object_id\n                     * @memberof syft_proto.generic.pointers.v1.PointerPlan\n                     * @instance\n                     */\n                    PointerPlan.prototype.object_id = null;\n\n                    /**\n                     * PointerPlan location_id.\n                     * @member {syft_proto.types.syft.v1.IId|null|undefined} location_id\n                     * @memberof syft_proto.generic.pointers.v1.PointerPlan\n                     * @instance\n                     */\n                    PointerPlan.prototype.location_id = null;\n\n                    /**\n                     * PointerPlan object_id_at_location.\n                     * @member {syft_proto.types.syft.v1.IId|null|undefined} object_id_at_location\n                     * @memberof syft_proto.generic.pointers.v1.PointerPlan\n                     * @instance\n                     */\n                    PointerPlan.prototype.object_id_at_location = null;\n\n                    /**\n                     * PointerPlan tags.\n                     * @member {Array.<string>} tags\n                     * @memberof syft_proto.generic.pointers.v1.PointerPlan\n                     * @instance\n                     */\n                    PointerPlan.prototype.tags = $util.emptyArray;\n\n                    /**\n                     * PointerPlan garbage_collect_data.\n                     * @member {boolean} garbage_collect_data\n                     * @memberof syft_proto.generic.pointers.v1.PointerPlan\n                     * @instance\n                     */\n                    PointerPlan.prototype.garbage_collect_data = false;\n\n                    /**\n                     * Creates a new PointerPlan instance using the specified properties.\n                     * @function create\n                     * @memberof syft_proto.generic.pointers.v1.PointerPlan\n                     * @static\n                     * @param {syft_proto.generic.pointers.v1.IPointerPlan=} [properties] Properties to set\n                     * @returns {syft_proto.generic.pointers.v1.PointerPlan} PointerPlan instance\n                     */\n                    PointerPlan.create = function create(properties) {\n                        return new PointerPlan(properties);\n                    };\n\n                    /**\n                     * Encodes the specified PointerPlan message. Does not implicitly {@link syft_proto.generic.pointers.v1.PointerPlan.verify|verify} messages.\n                     * @function encode\n                     * @memberof syft_proto.generic.pointers.v1.PointerPlan\n                     * @static\n                     * @param {syft_proto.generic.pointers.v1.IPointerPlan} message PointerPlan message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    PointerPlan.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.object_id != null && message.hasOwnProperty(\"object_id\"))\n                            $root.syft_proto.types.syft.v1.Id.encode(message.object_id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.location_id != null && message.hasOwnProperty(\"location_id\"))\n                            $root.syft_proto.types.syft.v1.Id.encode(message.location_id, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.object_id_at_location != null && message.hasOwnProperty(\"object_id_at_location\"))\n                            $root.syft_proto.types.syft.v1.Id.encode(message.object_id_at_location, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                        if (message.tags != null && message.tags.length)\n                            for (var i = 0; i < message.tags.length; ++i)\n                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.tags[i]);\n                        if (message.garbage_collect_data != null && message.hasOwnProperty(\"garbage_collect_data\"))\n                            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.garbage_collect_data);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified PointerPlan message, length delimited. Does not implicitly {@link syft_proto.generic.pointers.v1.PointerPlan.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof syft_proto.generic.pointers.v1.PointerPlan\n                     * @static\n                     * @param {syft_proto.generic.pointers.v1.IPointerPlan} message PointerPlan message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    PointerPlan.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a PointerPlan message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof syft_proto.generic.pointers.v1.PointerPlan\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {syft_proto.generic.pointers.v1.PointerPlan} PointerPlan\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    PointerPlan.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.generic.pointers.v1.PointerPlan();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1:\n                                message.object_id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                                break;\n                            case 2:\n                                message.location_id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                                break;\n                            case 3:\n                                message.object_id_at_location = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                                break;\n                            case 4:\n                                if (!(message.tags && message.tags.length))\n                                    message.tags = [];\n                                message.tags.push(reader.string());\n                                break;\n                            case 5:\n                                message.garbage_collect_data = reader.bool();\n                                break;\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a PointerPlan message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof syft_proto.generic.pointers.v1.PointerPlan\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {syft_proto.generic.pointers.v1.PointerPlan} PointerPlan\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    PointerPlan.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a PointerPlan message.\n                     * @function verify\n                     * @memberof syft_proto.generic.pointers.v1.PointerPlan\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    PointerPlan.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.object_id != null && message.hasOwnProperty(\"object_id\")) {\n                            var error = $root.syft_proto.types.syft.v1.Id.verify(message.object_id);\n                            if (error)\n                                return \"object_id.\" + error;\n                        }\n                        if (message.location_id != null && message.hasOwnProperty(\"location_id\")) {\n                            var error = $root.syft_proto.types.syft.v1.Id.verify(message.location_id);\n                            if (error)\n                                return \"location_id.\" + error;\n                        }\n                        if (message.object_id_at_location != null && message.hasOwnProperty(\"object_id_at_location\")) {\n                            var error = $root.syft_proto.types.syft.v1.Id.verify(message.object_id_at_location);\n                            if (error)\n                                return \"object_id_at_location.\" + error;\n                        }\n                        if (message.tags != null && message.hasOwnProperty(\"tags\")) {\n                            if (!Array.isArray(message.tags))\n                                return \"tags: array expected\";\n                            for (var i = 0; i < message.tags.length; ++i)\n                                if (!$util.isString(message.tags[i]))\n                                    return \"tags: string[] expected\";\n                        }\n                        if (message.garbage_collect_data != null && message.hasOwnProperty(\"garbage_collect_data\"))\n                            if (typeof message.garbage_collect_data !== \"boolean\")\n                                return \"garbage_collect_data: boolean expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a PointerPlan message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof syft_proto.generic.pointers.v1.PointerPlan\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {syft_proto.generic.pointers.v1.PointerPlan} PointerPlan\n                     */\n                    PointerPlan.fromObject = function fromObject(object) {\n                        if (object instanceof $root.syft_proto.generic.pointers.v1.PointerPlan)\n                            return object;\n                        var message = new $root.syft_proto.generic.pointers.v1.PointerPlan();\n                        if (object.object_id != null) {\n                            if (typeof object.object_id !== \"object\")\n                                throw TypeError(\".syft_proto.generic.pointers.v1.PointerPlan.object_id: object expected\");\n                            message.object_id = $root.syft_proto.types.syft.v1.Id.fromObject(object.object_id);\n                        }\n                        if (object.location_id != null) {\n                            if (typeof object.location_id !== \"object\")\n                                throw TypeError(\".syft_proto.generic.pointers.v1.PointerPlan.location_id: object expected\");\n                            message.location_id = $root.syft_proto.types.syft.v1.Id.fromObject(object.location_id);\n                        }\n                        if (object.object_id_at_location != null) {\n                            if (typeof object.object_id_at_location !== \"object\")\n                                throw TypeError(\".syft_proto.generic.pointers.v1.PointerPlan.object_id_at_location: object expected\");\n                            message.object_id_at_location = $root.syft_proto.types.syft.v1.Id.fromObject(object.object_id_at_location);\n                        }\n                        if (object.tags) {\n                            if (!Array.isArray(object.tags))\n                                throw TypeError(\".syft_proto.generic.pointers.v1.PointerPlan.tags: array expected\");\n                            message.tags = [];\n                            for (var i = 0; i < object.tags.length; ++i)\n                                message.tags[i] = String(object.tags[i]);\n                        }\n                        if (object.garbage_collect_data != null)\n                            message.garbage_collect_data = Boolean(object.garbage_collect_data);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a PointerPlan message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof syft_proto.generic.pointers.v1.PointerPlan\n                     * @static\n                     * @param {syft_proto.generic.pointers.v1.PointerPlan} message PointerPlan\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    PointerPlan.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.tags = [];\n                        if (options.defaults) {\n                            object.object_id = null;\n                            object.location_id = null;\n                            object.object_id_at_location = null;\n                            object.garbage_collect_data = false;\n                        }\n                        if (message.object_id != null && message.hasOwnProperty(\"object_id\"))\n                            object.object_id = $root.syft_proto.types.syft.v1.Id.toObject(message.object_id, options);\n                        if (message.location_id != null && message.hasOwnProperty(\"location_id\"))\n                            object.location_id = $root.syft_proto.types.syft.v1.Id.toObject(message.location_id, options);\n                        if (message.object_id_at_location != null && message.hasOwnProperty(\"object_id_at_location\"))\n                            object.object_id_at_location = $root.syft_proto.types.syft.v1.Id.toObject(message.object_id_at_location, options);\n                        if (message.tags && message.tags.length) {\n                            object.tags = [];\n                            for (var j = 0; j < message.tags.length; ++j)\n                                object.tags[j] = message.tags[j];\n                        }\n                        if (message.garbage_collect_data != null && message.hasOwnProperty(\"garbage_collect_data\"))\n                            object.garbage_collect_data = message.garbage_collect_data;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this PointerPlan to JSON.\n                     * @function toJSON\n                     * @memberof syft_proto.generic.pointers.v1.PointerPlan\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    PointerPlan.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    return PointerPlan;\n                })();\n\n                return v1;\n            })();\n\n            return pointers;\n        })();\n\n        return generic;\n    })();\n\n    syft_proto.frameworks = (function() {\n\n        /**\n         * Namespace frameworks.\n         * @memberof syft_proto\n         * @namespace\n         */\n        var frameworks = {};\n\n        frameworks.torch = (function() {\n\n            /**\n             * Namespace torch.\n             * @memberof syft_proto.frameworks\n             * @namespace\n             */\n            var torch = {};\n\n            torch.fl = (function() {\n\n                /**\n                 * Namespace fl.\n                 * @memberof syft_proto.frameworks.torch\n                 * @namespace\n                 */\n                var fl = {};\n\n                fl.v1 = (function() {\n\n                    /**\n                     * Namespace v1.\n                     * @memberof syft_proto.frameworks.torch.fl\n                     * @namespace\n                     */\n                    var v1 = {};\n\n                    v1.BaseDataset = (function() {\n\n                        /**\n                         * Properties of a BaseDataset.\n                         * @memberof syft_proto.frameworks.torch.fl.v1\n                         * @interface IBaseDataset\n                         * @property {syft_proto.types.torch.v1.ITorchTensor|null} [data] BaseDataset data\n                         * @property {syft_proto.types.torch.v1.ITorchTensor|null} [targets] BaseDataset targets\n                         * @property {syft_proto.types.syft.v1.IId|null} [id] BaseDataset id\n                         * @property {Array.<string>|null} [tags] BaseDataset tags\n                         * @property {string|null} [description] BaseDataset description\n                         * @property {syft_proto.types.torch.v1.ITorchTensor|null} [child] BaseDataset child\n                         */\n\n                        /**\n                         * Constructs a new BaseDataset.\n                         * @memberof syft_proto.frameworks.torch.fl.v1\n                         * @classdesc Represents a BaseDataset.\n                         * @implements IBaseDataset\n                         * @constructor\n                         * @param {syft_proto.frameworks.torch.fl.v1.IBaseDataset=} [properties] Properties to set\n                         */\n                        function BaseDataset(properties) {\n                            this.tags = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * BaseDataset data.\n                         * @member {syft_proto.types.torch.v1.ITorchTensor|null|undefined} data\n                         * @memberof syft_proto.frameworks.torch.fl.v1.BaseDataset\n                         * @instance\n                         */\n                        BaseDataset.prototype.data = null;\n\n                        /**\n                         * BaseDataset targets.\n                         * @member {syft_proto.types.torch.v1.ITorchTensor|null|undefined} targets\n                         * @memberof syft_proto.frameworks.torch.fl.v1.BaseDataset\n                         * @instance\n                         */\n                        BaseDataset.prototype.targets = null;\n\n                        /**\n                         * BaseDataset id.\n                         * @member {syft_proto.types.syft.v1.IId|null|undefined} id\n                         * @memberof syft_proto.frameworks.torch.fl.v1.BaseDataset\n                         * @instance\n                         */\n                        BaseDataset.prototype.id = null;\n\n                        /**\n                         * BaseDataset tags.\n                         * @member {Array.<string>} tags\n                         * @memberof syft_proto.frameworks.torch.fl.v1.BaseDataset\n                         * @instance\n                         */\n                        BaseDataset.prototype.tags = $util.emptyArray;\n\n                        /**\n                         * BaseDataset description.\n                         * @member {string} description\n                         * @memberof syft_proto.frameworks.torch.fl.v1.BaseDataset\n                         * @instance\n                         */\n                        BaseDataset.prototype.description = \"\";\n\n                        /**\n                         * BaseDataset child.\n                         * @member {syft_proto.types.torch.v1.ITorchTensor|null|undefined} child\n                         * @memberof syft_proto.frameworks.torch.fl.v1.BaseDataset\n                         * @instance\n                         */\n                        BaseDataset.prototype.child = null;\n\n                        /**\n                         * Creates a new BaseDataset instance using the specified properties.\n                         * @function create\n                         * @memberof syft_proto.frameworks.torch.fl.v1.BaseDataset\n                         * @static\n                         * @param {syft_proto.frameworks.torch.fl.v1.IBaseDataset=} [properties] Properties to set\n                         * @returns {syft_proto.frameworks.torch.fl.v1.BaseDataset} BaseDataset instance\n                         */\n                        BaseDataset.create = function create(properties) {\n                            return new BaseDataset(properties);\n                        };\n\n                        /**\n                         * Encodes the specified BaseDataset message. Does not implicitly {@link syft_proto.frameworks.torch.fl.v1.BaseDataset.verify|verify} messages.\n                         * @function encode\n                         * @memberof syft_proto.frameworks.torch.fl.v1.BaseDataset\n                         * @static\n                         * @param {syft_proto.frameworks.torch.fl.v1.IBaseDataset} message BaseDataset message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        BaseDataset.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.data != null && message.hasOwnProperty(\"data\"))\n                                $root.syft_proto.types.torch.v1.TorchTensor.encode(message.data, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            if (message.targets != null && message.hasOwnProperty(\"targets\"))\n                                $root.syft_proto.types.torch.v1.TorchTensor.encode(message.targets, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                            if (message.id != null && message.hasOwnProperty(\"id\"))\n                                $root.syft_proto.types.syft.v1.Id.encode(message.id, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                            if (message.tags != null && message.tags.length)\n                                for (var i = 0; i < message.tags.length; ++i)\n                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.tags[i]);\n                            if (message.description != null && message.hasOwnProperty(\"description\"))\n                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.description);\n                            if (message.child != null && message.hasOwnProperty(\"child\"))\n                                $root.syft_proto.types.torch.v1.TorchTensor.encode(message.child, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified BaseDataset message, length delimited. Does not implicitly {@link syft_proto.frameworks.torch.fl.v1.BaseDataset.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof syft_proto.frameworks.torch.fl.v1.BaseDataset\n                         * @static\n                         * @param {syft_proto.frameworks.torch.fl.v1.IBaseDataset} message BaseDataset message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        BaseDataset.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes a BaseDataset message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof syft_proto.frameworks.torch.fl.v1.BaseDataset\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {syft_proto.frameworks.torch.fl.v1.BaseDataset} BaseDataset\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        BaseDataset.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.frameworks.torch.fl.v1.BaseDataset();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1:\n                                    message.data = $root.syft_proto.types.torch.v1.TorchTensor.decode(reader, reader.uint32());\n                                    break;\n                                case 2:\n                                    message.targets = $root.syft_proto.types.torch.v1.TorchTensor.decode(reader, reader.uint32());\n                                    break;\n                                case 3:\n                                    message.id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                                    break;\n                                case 4:\n                                    if (!(message.tags && message.tags.length))\n                                        message.tags = [];\n                                    message.tags.push(reader.string());\n                                    break;\n                                case 5:\n                                    message.description = reader.string();\n                                    break;\n                                case 6:\n                                    message.child = $root.syft_proto.types.torch.v1.TorchTensor.decode(reader, reader.uint32());\n                                    break;\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes a BaseDataset message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof syft_proto.frameworks.torch.fl.v1.BaseDataset\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {syft_proto.frameworks.torch.fl.v1.BaseDataset} BaseDataset\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        BaseDataset.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies a BaseDataset message.\n                         * @function verify\n                         * @memberof syft_proto.frameworks.torch.fl.v1.BaseDataset\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        BaseDataset.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.data != null && message.hasOwnProperty(\"data\")) {\n                                var error = $root.syft_proto.types.torch.v1.TorchTensor.verify(message.data);\n                                if (error)\n                                    return \"data.\" + error;\n                            }\n                            if (message.targets != null && message.hasOwnProperty(\"targets\")) {\n                                var error = $root.syft_proto.types.torch.v1.TorchTensor.verify(message.targets);\n                                if (error)\n                                    return \"targets.\" + error;\n                            }\n                            if (message.id != null && message.hasOwnProperty(\"id\")) {\n                                var error = $root.syft_proto.types.syft.v1.Id.verify(message.id);\n                                if (error)\n                                    return \"id.\" + error;\n                            }\n                            if (message.tags != null && message.hasOwnProperty(\"tags\")) {\n                                if (!Array.isArray(message.tags))\n                                    return \"tags: array expected\";\n                                for (var i = 0; i < message.tags.length; ++i)\n                                    if (!$util.isString(message.tags[i]))\n                                        return \"tags: string[] expected\";\n                            }\n                            if (message.description != null && message.hasOwnProperty(\"description\"))\n                                if (!$util.isString(message.description))\n                                    return \"description: string expected\";\n                            if (message.child != null && message.hasOwnProperty(\"child\")) {\n                                var error = $root.syft_proto.types.torch.v1.TorchTensor.verify(message.child);\n                                if (error)\n                                    return \"child.\" + error;\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates a BaseDataset message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof syft_proto.frameworks.torch.fl.v1.BaseDataset\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {syft_proto.frameworks.torch.fl.v1.BaseDataset} BaseDataset\n                         */\n                        BaseDataset.fromObject = function fromObject(object) {\n                            if (object instanceof $root.syft_proto.frameworks.torch.fl.v1.BaseDataset)\n                                return object;\n                            var message = new $root.syft_proto.frameworks.torch.fl.v1.BaseDataset();\n                            if (object.data != null) {\n                                if (typeof object.data !== \"object\")\n                                    throw TypeError(\".syft_proto.frameworks.torch.fl.v1.BaseDataset.data: object expected\");\n                                message.data = $root.syft_proto.types.torch.v1.TorchTensor.fromObject(object.data);\n                            }\n                            if (object.targets != null) {\n                                if (typeof object.targets !== \"object\")\n                                    throw TypeError(\".syft_proto.frameworks.torch.fl.v1.BaseDataset.targets: object expected\");\n                                message.targets = $root.syft_proto.types.torch.v1.TorchTensor.fromObject(object.targets);\n                            }\n                            if (object.id != null) {\n                                if (typeof object.id !== \"object\")\n                                    throw TypeError(\".syft_proto.frameworks.torch.fl.v1.BaseDataset.id: object expected\");\n                                message.id = $root.syft_proto.types.syft.v1.Id.fromObject(object.id);\n                            }\n                            if (object.tags) {\n                                if (!Array.isArray(object.tags))\n                                    throw TypeError(\".syft_proto.frameworks.torch.fl.v1.BaseDataset.tags: array expected\");\n                                message.tags = [];\n                                for (var i = 0; i < object.tags.length; ++i)\n                                    message.tags[i] = String(object.tags[i]);\n                            }\n                            if (object.description != null)\n                                message.description = String(object.description);\n                            if (object.child != null) {\n                                if (typeof object.child !== \"object\")\n                                    throw TypeError(\".syft_proto.frameworks.torch.fl.v1.BaseDataset.child: object expected\");\n                                message.child = $root.syft_proto.types.torch.v1.TorchTensor.fromObject(object.child);\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from a BaseDataset message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof syft_proto.frameworks.torch.fl.v1.BaseDataset\n                         * @static\n                         * @param {syft_proto.frameworks.torch.fl.v1.BaseDataset} message BaseDataset\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        BaseDataset.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.tags = [];\n                            if (options.defaults) {\n                                object.data = null;\n                                object.targets = null;\n                                object.id = null;\n                                object.description = \"\";\n                                object.child = null;\n                            }\n                            if (message.data != null && message.hasOwnProperty(\"data\"))\n                                object.data = $root.syft_proto.types.torch.v1.TorchTensor.toObject(message.data, options);\n                            if (message.targets != null && message.hasOwnProperty(\"targets\"))\n                                object.targets = $root.syft_proto.types.torch.v1.TorchTensor.toObject(message.targets, options);\n                            if (message.id != null && message.hasOwnProperty(\"id\"))\n                                object.id = $root.syft_proto.types.syft.v1.Id.toObject(message.id, options);\n                            if (message.tags && message.tags.length) {\n                                object.tags = [];\n                                for (var j = 0; j < message.tags.length; ++j)\n                                    object.tags[j] = message.tags[j];\n                            }\n                            if (message.description != null && message.hasOwnProperty(\"description\"))\n                                object.description = message.description;\n                            if (message.child != null && message.hasOwnProperty(\"child\"))\n                                object.child = $root.syft_proto.types.torch.v1.TorchTensor.toObject(message.child, options);\n                            return object;\n                        };\n\n                        /**\n                         * Converts this BaseDataset to JSON.\n                         * @function toJSON\n                         * @memberof syft_proto.frameworks.torch.fl.v1.BaseDataset\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        BaseDataset.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        return BaseDataset;\n                    })();\n\n                    return v1;\n                })();\n\n                return fl;\n            })();\n\n            torch.tensors = (function() {\n\n                /**\n                 * Namespace tensors.\n                 * @memberof syft_proto.frameworks.torch\n                 * @namespace\n                 */\n                var tensors = {};\n\n                tensors.interpreters = (function() {\n\n                    /**\n                     * Namespace interpreters.\n                     * @memberof syft_proto.frameworks.torch.tensors\n                     * @namespace\n                     */\n                    var interpreters = {};\n\n                    interpreters.v1 = (function() {\n\n                        /**\n                         * Namespace v1.\n                         * @memberof syft_proto.frameworks.torch.tensors.interpreters\n                         * @namespace\n                         */\n                        var v1 = {};\n\n                        v1.AdditiveSharingTensor = (function() {\n\n                            /**\n                             * Properties of an AdditiveSharingTensor.\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1\n                             * @interface IAdditiveSharingTensor\n                             * @property {syft_proto.types.syft.v1.IId|null} [id] AdditiveSharingTensor id\n                             * @property {number|Long|null} [field_int] AdditiveSharingTensor field_int\n                             * @property {string|null} [field_str] AdditiveSharingTensor field_str\n                             * @property {string|null} [dtype] AdditiveSharingTensor dtype\n                             * @property {syft_proto.types.syft.v1.IId|null} [crypto_provider_id] AdditiveSharingTensor crypto_provider_id\n                             * @property {Array.<syft_proto.types.syft.v1.IId>|null} [location_ids] AdditiveSharingTensor location_ids\n                             * @property {Array.<syft_proto.generic.pointers.v1.IPointerTensor>|null} [shares] AdditiveSharingTensor shares\n                             */\n\n                            /**\n                             * Constructs a new AdditiveSharingTensor.\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1\n                             * @classdesc Represents an AdditiveSharingTensor.\n                             * @implements IAdditiveSharingTensor\n                             * @constructor\n                             * @param {syft_proto.frameworks.torch.tensors.interpreters.v1.IAdditiveSharingTensor=} [properties] Properties to set\n                             */\n                            function AdditiveSharingTensor(properties) {\n                                this.location_ids = [];\n                                this.shares = [];\n                                if (properties)\n                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                        if (properties[keys[i]] != null)\n                                            this[keys[i]] = properties[keys[i]];\n                            }\n\n                            /**\n                             * AdditiveSharingTensor id.\n                             * @member {syft_proto.types.syft.v1.IId|null|undefined} id\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor\n                             * @instance\n                             */\n                            AdditiveSharingTensor.prototype.id = null;\n\n                            /**\n                             * AdditiveSharingTensor field_int.\n                             * @member {number|Long} field_int\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor\n                             * @instance\n                             */\n                            AdditiveSharingTensor.prototype.field_int = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n                            /**\n                             * AdditiveSharingTensor field_str.\n                             * @member {string} field_str\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor\n                             * @instance\n                             */\n                            AdditiveSharingTensor.prototype.field_str = \"\";\n\n                            /**\n                             * AdditiveSharingTensor dtype.\n                             * @member {string} dtype\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor\n                             * @instance\n                             */\n                            AdditiveSharingTensor.prototype.dtype = \"\";\n\n                            /**\n                             * AdditiveSharingTensor crypto_provider_id.\n                             * @member {syft_proto.types.syft.v1.IId|null|undefined} crypto_provider_id\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor\n                             * @instance\n                             */\n                            AdditiveSharingTensor.prototype.crypto_provider_id = null;\n\n                            /**\n                             * AdditiveSharingTensor location_ids.\n                             * @member {Array.<syft_proto.types.syft.v1.IId>} location_ids\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor\n                             * @instance\n                             */\n                            AdditiveSharingTensor.prototype.location_ids = $util.emptyArray;\n\n                            /**\n                             * AdditiveSharingTensor shares.\n                             * @member {Array.<syft_proto.generic.pointers.v1.IPointerTensor>} shares\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor\n                             * @instance\n                             */\n                            AdditiveSharingTensor.prototype.shares = $util.emptyArray;\n\n                            // OneOf field names bound to virtual getters and setters\n                            var $oneOfFields;\n\n                            /**\n                             * AdditiveSharingTensor field_size.\n                             * @member {\"field_int\"|\"field_str\"|undefined} field_size\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor\n                             * @instance\n                             */\n                            Object.defineProperty(AdditiveSharingTensor.prototype, \"field_size\", {\n                                get: $util.oneOfGetter($oneOfFields = [\"field_int\", \"field_str\"]),\n                                set: $util.oneOfSetter($oneOfFields)\n                            });\n\n                            /**\n                             * Creates a new AdditiveSharingTensor instance using the specified properties.\n                             * @function create\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor\n                             * @static\n                             * @param {syft_proto.frameworks.torch.tensors.interpreters.v1.IAdditiveSharingTensor=} [properties] Properties to set\n                             * @returns {syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor} AdditiveSharingTensor instance\n                             */\n                            AdditiveSharingTensor.create = function create(properties) {\n                                return new AdditiveSharingTensor(properties);\n                            };\n\n                            /**\n                             * Encodes the specified AdditiveSharingTensor message. Does not implicitly {@link syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor.verify|verify} messages.\n                             * @function encode\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor\n                             * @static\n                             * @param {syft_proto.frameworks.torch.tensors.interpreters.v1.IAdditiveSharingTensor} message AdditiveSharingTensor message or plain object to encode\n                             * @param {$protobuf.Writer} [writer] Writer to encode to\n                             * @returns {$protobuf.Writer} Writer\n                             */\n                            AdditiveSharingTensor.encode = function encode(message, writer) {\n                                if (!writer)\n                                    writer = $Writer.create();\n                                if (message.id != null && message.hasOwnProperty(\"id\"))\n                                    $root.syft_proto.types.syft.v1.Id.encode(message.id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                                if (message.field_int != null && message.hasOwnProperty(\"field_int\"))\n                                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.field_int);\n                                if (message.field_str != null && message.hasOwnProperty(\"field_str\"))\n                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.field_str);\n                                if (message.dtype != null && message.hasOwnProperty(\"dtype\"))\n                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.dtype);\n                                if (message.crypto_provider_id != null && message.hasOwnProperty(\"crypto_provider_id\"))\n                                    $root.syft_proto.types.syft.v1.Id.encode(message.crypto_provider_id, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                                if (message.location_ids != null && message.location_ids.length)\n                                    for (var i = 0; i < message.location_ids.length; ++i)\n                                        $root.syft_proto.types.syft.v1.Id.encode(message.location_ids[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                                if (message.shares != null && message.shares.length)\n                                    for (var i = 0; i < message.shares.length; ++i)\n                                        $root.syft_proto.generic.pointers.v1.PointerTensor.encode(message.shares[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                                return writer;\n                            };\n\n                            /**\n                             * Encodes the specified AdditiveSharingTensor message, length delimited. Does not implicitly {@link syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor.verify|verify} messages.\n                             * @function encodeDelimited\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor\n                             * @static\n                             * @param {syft_proto.frameworks.torch.tensors.interpreters.v1.IAdditiveSharingTensor} message AdditiveSharingTensor message or plain object to encode\n                             * @param {$protobuf.Writer} [writer] Writer to encode to\n                             * @returns {$protobuf.Writer} Writer\n                             */\n                            AdditiveSharingTensor.encodeDelimited = function encodeDelimited(message, writer) {\n                                return this.encode(message, writer).ldelim();\n                            };\n\n                            /**\n                             * Decodes an AdditiveSharingTensor message from the specified reader or buffer.\n                             * @function decode\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor\n                             * @static\n                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                             * @param {number} [length] Message length if known beforehand\n                             * @returns {syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor} AdditiveSharingTensor\n                             * @throws {Error} If the payload is not a reader or valid buffer\n                             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                             */\n                            AdditiveSharingTensor.decode = function decode(reader, length) {\n                                if (!(reader instanceof $Reader))\n                                    reader = $Reader.create(reader);\n                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor();\n                                while (reader.pos < end) {\n                                    var tag = reader.uint32();\n                                    switch (tag >>> 3) {\n                                    case 1:\n                                        message.id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                                        break;\n                                    case 2:\n                                        message.field_int = reader.int64();\n                                        break;\n                                    case 3:\n                                        message.field_str = reader.string();\n                                        break;\n                                    case 4:\n                                        message.dtype = reader.string();\n                                        break;\n                                    case 5:\n                                        message.crypto_provider_id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                                        break;\n                                    case 6:\n                                        if (!(message.location_ids && message.location_ids.length))\n                                            message.location_ids = [];\n                                        message.location_ids.push($root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32()));\n                                        break;\n                                    case 7:\n                                        if (!(message.shares && message.shares.length))\n                                            message.shares = [];\n                                        message.shares.push($root.syft_proto.generic.pointers.v1.PointerTensor.decode(reader, reader.uint32()));\n                                        break;\n                                    default:\n                                        reader.skipType(tag & 7);\n                                        break;\n                                    }\n                                }\n                                return message;\n                            };\n\n                            /**\n                             * Decodes an AdditiveSharingTensor message from the specified reader or buffer, length delimited.\n                             * @function decodeDelimited\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor\n                             * @static\n                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                             * @returns {syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor} AdditiveSharingTensor\n                             * @throws {Error} If the payload is not a reader or valid buffer\n                             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                             */\n                            AdditiveSharingTensor.decodeDelimited = function decodeDelimited(reader) {\n                                if (!(reader instanceof $Reader))\n                                    reader = new $Reader(reader);\n                                return this.decode(reader, reader.uint32());\n                            };\n\n                            /**\n                             * Verifies an AdditiveSharingTensor message.\n                             * @function verify\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor\n                             * @static\n                             * @param {Object.<string,*>} message Plain object to verify\n                             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                             */\n                            AdditiveSharingTensor.verify = function verify(message) {\n                                if (typeof message !== \"object\" || message === null)\n                                    return \"object expected\";\n                                var properties = {};\n                                if (message.id != null && message.hasOwnProperty(\"id\")) {\n                                    var error = $root.syft_proto.types.syft.v1.Id.verify(message.id);\n                                    if (error)\n                                        return \"id.\" + error;\n                                }\n                                if (message.field_int != null && message.hasOwnProperty(\"field_int\")) {\n                                    properties.field_size = 1;\n                                    if (!$util.isInteger(message.field_int) && !(message.field_int && $util.isInteger(message.field_int.low) && $util.isInteger(message.field_int.high)))\n                                        return \"field_int: integer|Long expected\";\n                                }\n                                if (message.field_str != null && message.hasOwnProperty(\"field_str\")) {\n                                    if (properties.field_size === 1)\n                                        return \"field_size: multiple values\";\n                                    properties.field_size = 1;\n                                    if (!$util.isString(message.field_str))\n                                        return \"field_str: string expected\";\n                                }\n                                if (message.dtype != null && message.hasOwnProperty(\"dtype\"))\n                                    if (!$util.isString(message.dtype))\n                                        return \"dtype: string expected\";\n                                if (message.crypto_provider_id != null && message.hasOwnProperty(\"crypto_provider_id\")) {\n                                    var error = $root.syft_proto.types.syft.v1.Id.verify(message.crypto_provider_id);\n                                    if (error)\n                                        return \"crypto_provider_id.\" + error;\n                                }\n                                if (message.location_ids != null && message.hasOwnProperty(\"location_ids\")) {\n                                    if (!Array.isArray(message.location_ids))\n                                        return \"location_ids: array expected\";\n                                    for (var i = 0; i < message.location_ids.length; ++i) {\n                                        var error = $root.syft_proto.types.syft.v1.Id.verify(message.location_ids[i]);\n                                        if (error)\n                                            return \"location_ids.\" + error;\n                                    }\n                                }\n                                if (message.shares != null && message.hasOwnProperty(\"shares\")) {\n                                    if (!Array.isArray(message.shares))\n                                        return \"shares: array expected\";\n                                    for (var i = 0; i < message.shares.length; ++i) {\n                                        var error = $root.syft_proto.generic.pointers.v1.PointerTensor.verify(message.shares[i]);\n                                        if (error)\n                                            return \"shares.\" + error;\n                                    }\n                                }\n                                return null;\n                            };\n\n                            /**\n                             * Creates an AdditiveSharingTensor message from a plain object. Also converts values to their respective internal types.\n                             * @function fromObject\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor\n                             * @static\n                             * @param {Object.<string,*>} object Plain object\n                             * @returns {syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor} AdditiveSharingTensor\n                             */\n                            AdditiveSharingTensor.fromObject = function fromObject(object) {\n                                if (object instanceof $root.syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor)\n                                    return object;\n                                var message = new $root.syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor();\n                                if (object.id != null) {\n                                    if (typeof object.id !== \"object\")\n                                        throw TypeError(\".syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor.id: object expected\");\n                                    message.id = $root.syft_proto.types.syft.v1.Id.fromObject(object.id);\n                                }\n                                if (object.field_int != null)\n                                    if ($util.Long)\n                                        (message.field_int = $util.Long.fromValue(object.field_int)).unsigned = false;\n                                    else if (typeof object.field_int === \"string\")\n                                        message.field_int = parseInt(object.field_int, 10);\n                                    else if (typeof object.field_int === \"number\")\n                                        message.field_int = object.field_int;\n                                    else if (typeof object.field_int === \"object\")\n                                        message.field_int = new $util.LongBits(object.field_int.low >>> 0, object.field_int.high >>> 0).toNumber();\n                                if (object.field_str != null)\n                                    message.field_str = String(object.field_str);\n                                if (object.dtype != null)\n                                    message.dtype = String(object.dtype);\n                                if (object.crypto_provider_id != null) {\n                                    if (typeof object.crypto_provider_id !== \"object\")\n                                        throw TypeError(\".syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor.crypto_provider_id: object expected\");\n                                    message.crypto_provider_id = $root.syft_proto.types.syft.v1.Id.fromObject(object.crypto_provider_id);\n                                }\n                                if (object.location_ids) {\n                                    if (!Array.isArray(object.location_ids))\n                                        throw TypeError(\".syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor.location_ids: array expected\");\n                                    message.location_ids = [];\n                                    for (var i = 0; i < object.location_ids.length; ++i) {\n                                        if (typeof object.location_ids[i] !== \"object\")\n                                            throw TypeError(\".syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor.location_ids: object expected\");\n                                        message.location_ids[i] = $root.syft_proto.types.syft.v1.Id.fromObject(object.location_ids[i]);\n                                    }\n                                }\n                                if (object.shares) {\n                                    if (!Array.isArray(object.shares))\n                                        throw TypeError(\".syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor.shares: array expected\");\n                                    message.shares = [];\n                                    for (var i = 0; i < object.shares.length; ++i) {\n                                        if (typeof object.shares[i] !== \"object\")\n                                            throw TypeError(\".syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor.shares: object expected\");\n                                        message.shares[i] = $root.syft_proto.generic.pointers.v1.PointerTensor.fromObject(object.shares[i]);\n                                    }\n                                }\n                                return message;\n                            };\n\n                            /**\n                             * Creates a plain object from an AdditiveSharingTensor message. Also converts values to other types if specified.\n                             * @function toObject\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor\n                             * @static\n                             * @param {syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor} message AdditiveSharingTensor\n                             * @param {$protobuf.IConversionOptions} [options] Conversion options\n                             * @returns {Object.<string,*>} Plain object\n                             */\n                            AdditiveSharingTensor.toObject = function toObject(message, options) {\n                                if (!options)\n                                    options = {};\n                                var object = {};\n                                if (options.arrays || options.defaults) {\n                                    object.location_ids = [];\n                                    object.shares = [];\n                                }\n                                if (options.defaults) {\n                                    object.id = null;\n                                    object.dtype = \"\";\n                                    object.crypto_provider_id = null;\n                                }\n                                if (message.id != null && message.hasOwnProperty(\"id\"))\n                                    object.id = $root.syft_proto.types.syft.v1.Id.toObject(message.id, options);\n                                if (message.field_int != null && message.hasOwnProperty(\"field_int\")) {\n                                    if (typeof message.field_int === \"number\")\n                                        object.field_int = options.longs === String ? String(message.field_int) : message.field_int;\n                                    else\n                                        object.field_int = options.longs === String ? $util.Long.prototype.toString.call(message.field_int) : options.longs === Number ? new $util.LongBits(message.field_int.low >>> 0, message.field_int.high >>> 0).toNumber() : message.field_int;\n                                    if (options.oneofs)\n                                        object.field_size = \"field_int\";\n                                }\n                                if (message.field_str != null && message.hasOwnProperty(\"field_str\")) {\n                                    object.field_str = message.field_str;\n                                    if (options.oneofs)\n                                        object.field_size = \"field_str\";\n                                }\n                                if (message.dtype != null && message.hasOwnProperty(\"dtype\"))\n                                    object.dtype = message.dtype;\n                                if (message.crypto_provider_id != null && message.hasOwnProperty(\"crypto_provider_id\"))\n                                    object.crypto_provider_id = $root.syft_proto.types.syft.v1.Id.toObject(message.crypto_provider_id, options);\n                                if (message.location_ids && message.location_ids.length) {\n                                    object.location_ids = [];\n                                    for (var j = 0; j < message.location_ids.length; ++j)\n                                        object.location_ids[j] = $root.syft_proto.types.syft.v1.Id.toObject(message.location_ids[j], options);\n                                }\n                                if (message.shares && message.shares.length) {\n                                    object.shares = [];\n                                    for (var j = 0; j < message.shares.length; ++j)\n                                        object.shares[j] = $root.syft_proto.generic.pointers.v1.PointerTensor.toObject(message.shares[j], options);\n                                }\n                                return object;\n                            };\n\n                            /**\n                             * Converts this AdditiveSharingTensor to JSON.\n                             * @function toJSON\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor\n                             * @instance\n                             * @returns {Object.<string,*>} JSON object\n                             */\n                            AdditiveSharingTensor.prototype.toJSON = function toJSON() {\n                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                            };\n\n                            return AdditiveSharingTensor;\n                        })();\n\n                        v1.FixedPrecisionTensor = (function() {\n\n                            /**\n                             * Properties of a FixedPrecisionTensor.\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1\n                             * @interface IFixedPrecisionTensor\n                             * @property {syft_proto.types.syft.v1.IId|null} [id] FixedPrecisionTensor id\n                             * @property {string|null} [field] FixedPrecisionTensor field\n                             * @property {string|null} [dtype] FixedPrecisionTensor dtype\n                             * @property {number|null} [base] FixedPrecisionTensor base\n                             * @property {number|null} [kappa] FixedPrecisionTensor kappa\n                             * @property {number|null} [precision_fractional] FixedPrecisionTensor precision_fractional\n                             * @property {Array.<string>|null} [tags] FixedPrecisionTensor tags\n                             * @property {string|null} [description] FixedPrecisionTensor description\n                             * @property {syft_proto.frameworks.torch.tensors.interpreters.v1.IAdditiveSharingTensor|null} [child] FixedPrecisionTensor child\n                             */\n\n                            /**\n                             * Constructs a new FixedPrecisionTensor.\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1\n                             * @classdesc Represents a FixedPrecisionTensor.\n                             * @implements IFixedPrecisionTensor\n                             * @constructor\n                             * @param {syft_proto.frameworks.torch.tensors.interpreters.v1.IFixedPrecisionTensor=} [properties] Properties to set\n                             */\n                            function FixedPrecisionTensor(properties) {\n                                this.tags = [];\n                                if (properties)\n                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                        if (properties[keys[i]] != null)\n                                            this[keys[i]] = properties[keys[i]];\n                            }\n\n                            /**\n                             * FixedPrecisionTensor id.\n                             * @member {syft_proto.types.syft.v1.IId|null|undefined} id\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor\n                             * @instance\n                             */\n                            FixedPrecisionTensor.prototype.id = null;\n\n                            /**\n                             * FixedPrecisionTensor field.\n                             * @member {string} field\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor\n                             * @instance\n                             */\n                            FixedPrecisionTensor.prototype.field = \"\";\n\n                            /**\n                             * FixedPrecisionTensor dtype.\n                             * @member {string} dtype\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor\n                             * @instance\n                             */\n                            FixedPrecisionTensor.prototype.dtype = \"\";\n\n                            /**\n                             * FixedPrecisionTensor base.\n                             * @member {number} base\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor\n                             * @instance\n                             */\n                            FixedPrecisionTensor.prototype.base = 0;\n\n                            /**\n                             * FixedPrecisionTensor kappa.\n                             * @member {number} kappa\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor\n                             * @instance\n                             */\n                            FixedPrecisionTensor.prototype.kappa = 0;\n\n                            /**\n                             * FixedPrecisionTensor precision_fractional.\n                             * @member {number} precision_fractional\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor\n                             * @instance\n                             */\n                            FixedPrecisionTensor.prototype.precision_fractional = 0;\n\n                            /**\n                             * FixedPrecisionTensor tags.\n                             * @member {Array.<string>} tags\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor\n                             * @instance\n                             */\n                            FixedPrecisionTensor.prototype.tags = $util.emptyArray;\n\n                            /**\n                             * FixedPrecisionTensor description.\n                             * @member {string} description\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor\n                             * @instance\n                             */\n                            FixedPrecisionTensor.prototype.description = \"\";\n\n                            /**\n                             * FixedPrecisionTensor child.\n                             * @member {syft_proto.frameworks.torch.tensors.interpreters.v1.IAdditiveSharingTensor|null|undefined} child\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor\n                             * @instance\n                             */\n                            FixedPrecisionTensor.prototype.child = null;\n\n                            /**\n                             * Creates a new FixedPrecisionTensor instance using the specified properties.\n                             * @function create\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor\n                             * @static\n                             * @param {syft_proto.frameworks.torch.tensors.interpreters.v1.IFixedPrecisionTensor=} [properties] Properties to set\n                             * @returns {syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor} FixedPrecisionTensor instance\n                             */\n                            FixedPrecisionTensor.create = function create(properties) {\n                                return new FixedPrecisionTensor(properties);\n                            };\n\n                            /**\n                             * Encodes the specified FixedPrecisionTensor message. Does not implicitly {@link syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor.verify|verify} messages.\n                             * @function encode\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor\n                             * @static\n                             * @param {syft_proto.frameworks.torch.tensors.interpreters.v1.IFixedPrecisionTensor} message FixedPrecisionTensor message or plain object to encode\n                             * @param {$protobuf.Writer} [writer] Writer to encode to\n                             * @returns {$protobuf.Writer} Writer\n                             */\n                            FixedPrecisionTensor.encode = function encode(message, writer) {\n                                if (!writer)\n                                    writer = $Writer.create();\n                                if (message.id != null && message.hasOwnProperty(\"id\"))\n                                    $root.syft_proto.types.syft.v1.Id.encode(message.id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                                if (message.field != null && message.hasOwnProperty(\"field\"))\n                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.field);\n                                if (message.dtype != null && message.hasOwnProperty(\"dtype\"))\n                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.dtype);\n                                if (message.base != null && message.hasOwnProperty(\"base\"))\n                                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.base);\n                                if (message.kappa != null && message.hasOwnProperty(\"kappa\"))\n                                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.kappa);\n                                if (message.precision_fractional != null && message.hasOwnProperty(\"precision_fractional\"))\n                                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.precision_fractional);\n                                if (message.tags != null && message.tags.length)\n                                    for (var i = 0; i < message.tags.length; ++i)\n                                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.tags[i]);\n                                if (message.description != null && message.hasOwnProperty(\"description\"))\n                                    writer.uint32(/* id 9, wireType 2 =*/74).string(message.description);\n                                if (message.child != null && message.hasOwnProperty(\"child\"))\n                                    $root.syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor.encode(message.child, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n                                return writer;\n                            };\n\n                            /**\n                             * Encodes the specified FixedPrecisionTensor message, length delimited. Does not implicitly {@link syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor.verify|verify} messages.\n                             * @function encodeDelimited\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor\n                             * @static\n                             * @param {syft_proto.frameworks.torch.tensors.interpreters.v1.IFixedPrecisionTensor} message FixedPrecisionTensor message or plain object to encode\n                             * @param {$protobuf.Writer} [writer] Writer to encode to\n                             * @returns {$protobuf.Writer} Writer\n                             */\n                            FixedPrecisionTensor.encodeDelimited = function encodeDelimited(message, writer) {\n                                return this.encode(message, writer).ldelim();\n                            };\n\n                            /**\n                             * Decodes a FixedPrecisionTensor message from the specified reader or buffer.\n                             * @function decode\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor\n                             * @static\n                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                             * @param {number} [length] Message length if known beforehand\n                             * @returns {syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor} FixedPrecisionTensor\n                             * @throws {Error} If the payload is not a reader or valid buffer\n                             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                             */\n                            FixedPrecisionTensor.decode = function decode(reader, length) {\n                                if (!(reader instanceof $Reader))\n                                    reader = $Reader.create(reader);\n                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor();\n                                while (reader.pos < end) {\n                                    var tag = reader.uint32();\n                                    switch (tag >>> 3) {\n                                    case 1:\n                                        message.id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                                        break;\n                                    case 3:\n                                        message.field = reader.string();\n                                        break;\n                                    case 4:\n                                        message.dtype = reader.string();\n                                        break;\n                                    case 5:\n                                        message.base = reader.int32();\n                                        break;\n                                    case 6:\n                                        message.kappa = reader.int32();\n                                        break;\n                                    case 7:\n                                        message.precision_fractional = reader.int32();\n                                        break;\n                                    case 8:\n                                        if (!(message.tags && message.tags.length))\n                                            message.tags = [];\n                                        message.tags.push(reader.string());\n                                        break;\n                                    case 9:\n                                        message.description = reader.string();\n                                        break;\n                                    case 10:\n                                        message.child = $root.syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor.decode(reader, reader.uint32());\n                                        break;\n                                    default:\n                                        reader.skipType(tag & 7);\n                                        break;\n                                    }\n                                }\n                                return message;\n                            };\n\n                            /**\n                             * Decodes a FixedPrecisionTensor message from the specified reader or buffer, length delimited.\n                             * @function decodeDelimited\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor\n                             * @static\n                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                             * @returns {syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor} FixedPrecisionTensor\n                             * @throws {Error} If the payload is not a reader or valid buffer\n                             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                             */\n                            FixedPrecisionTensor.decodeDelimited = function decodeDelimited(reader) {\n                                if (!(reader instanceof $Reader))\n                                    reader = new $Reader(reader);\n                                return this.decode(reader, reader.uint32());\n                            };\n\n                            /**\n                             * Verifies a FixedPrecisionTensor message.\n                             * @function verify\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor\n                             * @static\n                             * @param {Object.<string,*>} message Plain object to verify\n                             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                             */\n                            FixedPrecisionTensor.verify = function verify(message) {\n                                if (typeof message !== \"object\" || message === null)\n                                    return \"object expected\";\n                                if (message.id != null && message.hasOwnProperty(\"id\")) {\n                                    var error = $root.syft_proto.types.syft.v1.Id.verify(message.id);\n                                    if (error)\n                                        return \"id.\" + error;\n                                }\n                                if (message.field != null && message.hasOwnProperty(\"field\"))\n                                    if (!$util.isString(message.field))\n                                        return \"field: string expected\";\n                                if (message.dtype != null && message.hasOwnProperty(\"dtype\"))\n                                    if (!$util.isString(message.dtype))\n                                        return \"dtype: string expected\";\n                                if (message.base != null && message.hasOwnProperty(\"base\"))\n                                    if (!$util.isInteger(message.base))\n                                        return \"base: integer expected\";\n                                if (message.kappa != null && message.hasOwnProperty(\"kappa\"))\n                                    if (!$util.isInteger(message.kappa))\n                                        return \"kappa: integer expected\";\n                                if (message.precision_fractional != null && message.hasOwnProperty(\"precision_fractional\"))\n                                    if (!$util.isInteger(message.precision_fractional))\n                                        return \"precision_fractional: integer expected\";\n                                if (message.tags != null && message.hasOwnProperty(\"tags\")) {\n                                    if (!Array.isArray(message.tags))\n                                        return \"tags: array expected\";\n                                    for (var i = 0; i < message.tags.length; ++i)\n                                        if (!$util.isString(message.tags[i]))\n                                            return \"tags: string[] expected\";\n                                }\n                                if (message.description != null && message.hasOwnProperty(\"description\"))\n                                    if (!$util.isString(message.description))\n                                        return \"description: string expected\";\n                                if (message.child != null && message.hasOwnProperty(\"child\")) {\n                                    var error = $root.syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor.verify(message.child);\n                                    if (error)\n                                        return \"child.\" + error;\n                                }\n                                return null;\n                            };\n\n                            /**\n                             * Creates a FixedPrecisionTensor message from a plain object. Also converts values to their respective internal types.\n                             * @function fromObject\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor\n                             * @static\n                             * @param {Object.<string,*>} object Plain object\n                             * @returns {syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor} FixedPrecisionTensor\n                             */\n                            FixedPrecisionTensor.fromObject = function fromObject(object) {\n                                if (object instanceof $root.syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor)\n                                    return object;\n                                var message = new $root.syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor();\n                                if (object.id != null) {\n                                    if (typeof object.id !== \"object\")\n                                        throw TypeError(\".syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor.id: object expected\");\n                                    message.id = $root.syft_proto.types.syft.v1.Id.fromObject(object.id);\n                                }\n                                if (object.field != null)\n                                    message.field = String(object.field);\n                                if (object.dtype != null)\n                                    message.dtype = String(object.dtype);\n                                if (object.base != null)\n                                    message.base = object.base | 0;\n                                if (object.kappa != null)\n                                    message.kappa = object.kappa | 0;\n                                if (object.precision_fractional != null)\n                                    message.precision_fractional = object.precision_fractional | 0;\n                                if (object.tags) {\n                                    if (!Array.isArray(object.tags))\n                                        throw TypeError(\".syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor.tags: array expected\");\n                                    message.tags = [];\n                                    for (var i = 0; i < object.tags.length; ++i)\n                                        message.tags[i] = String(object.tags[i]);\n                                }\n                                if (object.description != null)\n                                    message.description = String(object.description);\n                                if (object.child != null) {\n                                    if (typeof object.child !== \"object\")\n                                        throw TypeError(\".syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor.child: object expected\");\n                                    message.child = $root.syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor.fromObject(object.child);\n                                }\n                                return message;\n                            };\n\n                            /**\n                             * Creates a plain object from a FixedPrecisionTensor message. Also converts values to other types if specified.\n                             * @function toObject\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor\n                             * @static\n                             * @param {syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor} message FixedPrecisionTensor\n                             * @param {$protobuf.IConversionOptions} [options] Conversion options\n                             * @returns {Object.<string,*>} Plain object\n                             */\n                            FixedPrecisionTensor.toObject = function toObject(message, options) {\n                                if (!options)\n                                    options = {};\n                                var object = {};\n                                if (options.arrays || options.defaults)\n                                    object.tags = [];\n                                if (options.defaults) {\n                                    object.id = null;\n                                    object.field = \"\";\n                                    object.dtype = \"\";\n                                    object.base = 0;\n                                    object.kappa = 0;\n                                    object.precision_fractional = 0;\n                                    object.description = \"\";\n                                    object.child = null;\n                                }\n                                if (message.id != null && message.hasOwnProperty(\"id\"))\n                                    object.id = $root.syft_proto.types.syft.v1.Id.toObject(message.id, options);\n                                if (message.field != null && message.hasOwnProperty(\"field\"))\n                                    object.field = message.field;\n                                if (message.dtype != null && message.hasOwnProperty(\"dtype\"))\n                                    object.dtype = message.dtype;\n                                if (message.base != null && message.hasOwnProperty(\"base\"))\n                                    object.base = message.base;\n                                if (message.kappa != null && message.hasOwnProperty(\"kappa\"))\n                                    object.kappa = message.kappa;\n                                if (message.precision_fractional != null && message.hasOwnProperty(\"precision_fractional\"))\n                                    object.precision_fractional = message.precision_fractional;\n                                if (message.tags && message.tags.length) {\n                                    object.tags = [];\n                                    for (var j = 0; j < message.tags.length; ++j)\n                                        object.tags[j] = message.tags[j];\n                                }\n                                if (message.description != null && message.hasOwnProperty(\"description\"))\n                                    object.description = message.description;\n                                if (message.child != null && message.hasOwnProperty(\"child\"))\n                                    object.child = $root.syft_proto.frameworks.torch.tensors.interpreters.v1.AdditiveSharingTensor.toObject(message.child, options);\n                                return object;\n                            };\n\n                            /**\n                             * Converts this FixedPrecisionTensor to JSON.\n                             * @function toJSON\n                             * @memberof syft_proto.frameworks.torch.tensors.interpreters.v1.FixedPrecisionTensor\n                             * @instance\n                             * @returns {Object.<string,*>} JSON object\n                             */\n                            FixedPrecisionTensor.prototype.toJSON = function toJSON() {\n                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                            };\n\n                            return FixedPrecisionTensor;\n                        })();\n\n                        return v1;\n                    })();\n\n                    return interpreters;\n                })();\n\n                return tensors;\n            })();\n\n            return torch;\n        })();\n\n        return frameworks;\n    })();\n\n    syft_proto.messaging = (function() {\n\n        /**\n         * Namespace messaging.\n         * @memberof syft_proto\n         * @namespace\n         */\n        var messaging = {};\n\n        messaging.v1 = (function() {\n\n            /**\n             * Namespace v1.\n             * @memberof syft_proto.messaging\n             * @namespace\n             */\n            var v1 = {};\n\n            v1.String = (function() {\n\n                /**\n                 * Properties of a String.\n                 * @memberof syft_proto.messaging.v1\n                 * @interface IString\n                 * @property {string|null} [child] String child\n                 * @property {Array.<string>|null} [tags] String tags\n                 * @property {string|null} [description] String description\n                 */\n\n                /**\n                 * Constructs a new String.\n                 * @memberof syft_proto.messaging.v1\n                 * @classdesc Represents a String.\n                 * @implements IString\n                 * @constructor\n                 * @param {syft_proto.messaging.v1.IString=} [properties] Properties to set\n                 */\n                function String(properties) {\n                    this.tags = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * String child.\n                 * @member {string} child\n                 * @memberof syft_proto.messaging.v1.String\n                 * @instance\n                 */\n                String.prototype.child = \"\";\n\n                /**\n                 * String tags.\n                 * @member {Array.<string>} tags\n                 * @memberof syft_proto.messaging.v1.String\n                 * @instance\n                 */\n                String.prototype.tags = $util.emptyArray;\n\n                /**\n                 * String description.\n                 * @member {string} description\n                 * @memberof syft_proto.messaging.v1.String\n                 * @instance\n                 */\n                String.prototype.description = \"\";\n\n                /**\n                 * Creates a new String instance using the specified properties.\n                 * @function create\n                 * @memberof syft_proto.messaging.v1.String\n                 * @static\n                 * @param {syft_proto.messaging.v1.IString=} [properties] Properties to set\n                 * @returns {syft_proto.messaging.v1.String} String instance\n                 */\n                String.create = function create(properties) {\n                    return new String(properties);\n                };\n\n                /**\n                 * Encodes the specified String message. Does not implicitly {@link syft_proto.messaging.v1.String.verify|verify} messages.\n                 * @function encode\n                 * @memberof syft_proto.messaging.v1.String\n                 * @static\n                 * @param {syft_proto.messaging.v1.IString} message String message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                String.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.child != null && message.hasOwnProperty(\"child\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.child);\n                    if (message.tags != null && message.tags.length)\n                        for (var i = 0; i < message.tags.length; ++i)\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.tags[i]);\n                    if (message.description != null && message.hasOwnProperty(\"description\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified String message, length delimited. Does not implicitly {@link syft_proto.messaging.v1.String.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof syft_proto.messaging.v1.String\n                 * @static\n                 * @param {syft_proto.messaging.v1.IString} message String message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                String.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a String message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof syft_proto.messaging.v1.String\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {syft_proto.messaging.v1.String} String\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                String.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.messaging.v1.String();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.child = reader.string();\n                            break;\n                        case 2:\n                            if (!(message.tags && message.tags.length))\n                                message.tags = [];\n                            message.tags.push(reader.string());\n                            break;\n                        case 3:\n                            message.description = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a String message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof syft_proto.messaging.v1.String\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {syft_proto.messaging.v1.String} String\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                String.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a String message.\n                 * @function verify\n                 * @memberof syft_proto.messaging.v1.String\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                String.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.child != null && message.hasOwnProperty(\"child\"))\n                        if (!$util.isString(message.child))\n                            return \"child: string expected\";\n                    if (message.tags != null && message.hasOwnProperty(\"tags\")) {\n                        if (!Array.isArray(message.tags))\n                            return \"tags: array expected\";\n                        for (var i = 0; i < message.tags.length; ++i)\n                            if (!$util.isString(message.tags[i]))\n                                return \"tags: string[] expected\";\n                    }\n                    if (message.description != null && message.hasOwnProperty(\"description\"))\n                        if (!$util.isString(message.description))\n                            return \"description: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a String message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof syft_proto.messaging.v1.String\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {syft_proto.messaging.v1.String} String\n                 */\n                String.fromObject = function fromObject(object) {\n                    if (object instanceof $root.syft_proto.messaging.v1.String)\n                        return object;\n                    var message = new $root.syft_proto.messaging.v1.String();\n                    if (object.child != null)\n                        message.child = String(object.child);\n                    if (object.tags) {\n                        if (!Array.isArray(object.tags))\n                            throw TypeError(\".syft_proto.messaging.v1.String.tags: array expected\");\n                        message.tags = [];\n                        for (var i = 0; i < object.tags.length; ++i)\n                            message.tags[i] = String(object.tags[i]);\n                    }\n                    if (object.description != null)\n                        message.description = String(object.description);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a String message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof syft_proto.messaging.v1.String\n                 * @static\n                 * @param {syft_proto.messaging.v1.String} message String\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                String.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.tags = [];\n                    if (options.defaults) {\n                        object.child = \"\";\n                        object.description = \"\";\n                    }\n                    if (message.child != null && message.hasOwnProperty(\"child\"))\n                        object.child = message.child;\n                    if (message.tags && message.tags.length) {\n                        object.tags = [];\n                        for (var j = 0; j < message.tags.length; ++j)\n                            object.tags[j] = message.tags[j];\n                    }\n                    if (message.description != null && message.hasOwnProperty(\"description\"))\n                        object.description = message.description;\n                    return object;\n                };\n\n                /**\n                 * Converts this String to JSON.\n                 * @function toJSON\n                 * @memberof syft_proto.messaging.v1.String\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                String.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return String;\n            })();\n\n            v1.SyftMessage = (function() {\n\n                /**\n                 * Properties of a SyftMessage.\n                 * @memberof syft_proto.messaging.v1\n                 * @interface ISyftMessage\n                 * @property {google.protobuf.IEmpty|null} [contents_empty_msg] SyftMessage contents_empty_msg\n                 * @property {syft_proto.messaging.v1.IForceObjectDeleteMessage|null} [contents_delete_msg] SyftMessage contents_delete_msg\n                 * @property {syft_proto.messaging.v1.IGetShapeMessage|null} [contents_get_shape_msg] SyftMessage contents_get_shape_msg\n                 * @property {syft_proto.messaging.v1.IIsNoneMessage|null} [contents_is_none_msg] SyftMessage contents_is_none_msg\n                 * @property {syft_proto.messaging.v1.IObjectMessage|null} [contents_object_msg] SyftMessage contents_object_msg\n                 * @property {syft_proto.messaging.v1.IObjectRequestMessage|null} [contents_object_request_msg] SyftMessage contents_object_request_msg\n                 * @property {syft_proto.messaging.v1.ITensorCommandMessage|null} [contents_tensor_cmd_msg] SyftMessage contents_tensor_cmd_msg\n                 * @property {syft_proto.messaging.v1.IPlanCommandMessage|null} [contents_plan_cmd_msg] SyftMessage contents_plan_cmd_msg\n                 * @property {syft_proto.messaging.v1.IWorkerCommandMessage|null} [contents_worker_cmd_msg] SyftMessage contents_worker_cmd_msg\n                 * @property {syft_proto.messaging.v1.ISearchMessage|null} [contents_search_msg] SyftMessage contents_search_msg\n                 */\n\n                /**\n                 * Constructs a new SyftMessage.\n                 * @memberof syft_proto.messaging.v1\n                 * @classdesc Represents a SyftMessage.\n                 * @implements ISyftMessage\n                 * @constructor\n                 * @param {syft_proto.messaging.v1.ISyftMessage=} [properties] Properties to set\n                 */\n                function SyftMessage(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * SyftMessage contents_empty_msg.\n                 * @member {google.protobuf.IEmpty|null|undefined} contents_empty_msg\n                 * @memberof syft_proto.messaging.v1.SyftMessage\n                 * @instance\n                 */\n                SyftMessage.prototype.contents_empty_msg = null;\n\n                /**\n                 * SyftMessage contents_delete_msg.\n                 * @member {syft_proto.messaging.v1.IForceObjectDeleteMessage|null|undefined} contents_delete_msg\n                 * @memberof syft_proto.messaging.v1.SyftMessage\n                 * @instance\n                 */\n                SyftMessage.prototype.contents_delete_msg = null;\n\n                /**\n                 * SyftMessage contents_get_shape_msg.\n                 * @member {syft_proto.messaging.v1.IGetShapeMessage|null|undefined} contents_get_shape_msg\n                 * @memberof syft_proto.messaging.v1.SyftMessage\n                 * @instance\n                 */\n                SyftMessage.prototype.contents_get_shape_msg = null;\n\n                /**\n                 * SyftMessage contents_is_none_msg.\n                 * @member {syft_proto.messaging.v1.IIsNoneMessage|null|undefined} contents_is_none_msg\n                 * @memberof syft_proto.messaging.v1.SyftMessage\n                 * @instance\n                 */\n                SyftMessage.prototype.contents_is_none_msg = null;\n\n                /**\n                 * SyftMessage contents_object_msg.\n                 * @member {syft_proto.messaging.v1.IObjectMessage|null|undefined} contents_object_msg\n                 * @memberof syft_proto.messaging.v1.SyftMessage\n                 * @instance\n                 */\n                SyftMessage.prototype.contents_object_msg = null;\n\n                /**\n                 * SyftMessage contents_object_request_msg.\n                 * @member {syft_proto.messaging.v1.IObjectRequestMessage|null|undefined} contents_object_request_msg\n                 * @memberof syft_proto.messaging.v1.SyftMessage\n                 * @instance\n                 */\n                SyftMessage.prototype.contents_object_request_msg = null;\n\n                /**\n                 * SyftMessage contents_tensor_cmd_msg.\n                 * @member {syft_proto.messaging.v1.ITensorCommandMessage|null|undefined} contents_tensor_cmd_msg\n                 * @memberof syft_proto.messaging.v1.SyftMessage\n                 * @instance\n                 */\n                SyftMessage.prototype.contents_tensor_cmd_msg = null;\n\n                /**\n                 * SyftMessage contents_plan_cmd_msg.\n                 * @member {syft_proto.messaging.v1.IPlanCommandMessage|null|undefined} contents_plan_cmd_msg\n                 * @memberof syft_proto.messaging.v1.SyftMessage\n                 * @instance\n                 */\n                SyftMessage.prototype.contents_plan_cmd_msg = null;\n\n                /**\n                 * SyftMessage contents_worker_cmd_msg.\n                 * @member {syft_proto.messaging.v1.IWorkerCommandMessage|null|undefined} contents_worker_cmd_msg\n                 * @memberof syft_proto.messaging.v1.SyftMessage\n                 * @instance\n                 */\n                SyftMessage.prototype.contents_worker_cmd_msg = null;\n\n                /**\n                 * SyftMessage contents_search_msg.\n                 * @member {syft_proto.messaging.v1.ISearchMessage|null|undefined} contents_search_msg\n                 * @memberof syft_proto.messaging.v1.SyftMessage\n                 * @instance\n                 */\n                SyftMessage.prototype.contents_search_msg = null;\n\n                // OneOf field names bound to virtual getters and setters\n                var $oneOfFields;\n\n                /**\n                 * SyftMessage contents.\n                 * @member {\"contents_empty_msg\"|\"contents_delete_msg\"|\"contents_get_shape_msg\"|\"contents_is_none_msg\"|\"contents_object_msg\"|\"contents_object_request_msg\"|\"contents_tensor_cmd_msg\"|\"contents_plan_cmd_msg\"|\"contents_worker_cmd_msg\"|\"contents_search_msg\"|undefined} contents\n                 * @memberof syft_proto.messaging.v1.SyftMessage\n                 * @instance\n                 */\n                Object.defineProperty(SyftMessage.prototype, \"contents\", {\n                    get: $util.oneOfGetter($oneOfFields = [\"contents_empty_msg\", \"contents_delete_msg\", \"contents_get_shape_msg\", \"contents_is_none_msg\", \"contents_object_msg\", \"contents_object_request_msg\", \"contents_tensor_cmd_msg\", \"contents_plan_cmd_msg\", \"contents_worker_cmd_msg\", \"contents_search_msg\"]),\n                    set: $util.oneOfSetter($oneOfFields)\n                });\n\n                /**\n                 * Creates a new SyftMessage instance using the specified properties.\n                 * @function create\n                 * @memberof syft_proto.messaging.v1.SyftMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.ISyftMessage=} [properties] Properties to set\n                 * @returns {syft_proto.messaging.v1.SyftMessage} SyftMessage instance\n                 */\n                SyftMessage.create = function create(properties) {\n                    return new SyftMessage(properties);\n                };\n\n                /**\n                 * Encodes the specified SyftMessage message. Does not implicitly {@link syft_proto.messaging.v1.SyftMessage.verify|verify} messages.\n                 * @function encode\n                 * @memberof syft_proto.messaging.v1.SyftMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.ISyftMessage} message SyftMessage message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SyftMessage.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.contents_empty_msg != null && message.hasOwnProperty(\"contents_empty_msg\"))\n                        $root.google.protobuf.Empty.encode(message.contents_empty_msg, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.contents_delete_msg != null && message.hasOwnProperty(\"contents_delete_msg\"))\n                        $root.syft_proto.messaging.v1.ForceObjectDeleteMessage.encode(message.contents_delete_msg, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    if (message.contents_get_shape_msg != null && message.hasOwnProperty(\"contents_get_shape_msg\"))\n                        $root.syft_proto.messaging.v1.GetShapeMessage.encode(message.contents_get_shape_msg, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                    if (message.contents_is_none_msg != null && message.hasOwnProperty(\"contents_is_none_msg\"))\n                        $root.syft_proto.messaging.v1.IsNoneMessage.encode(message.contents_is_none_msg, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                    if (message.contents_object_msg != null && message.hasOwnProperty(\"contents_object_msg\"))\n                        $root.syft_proto.messaging.v1.ObjectMessage.encode(message.contents_object_msg, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                    if (message.contents_object_request_msg != null && message.hasOwnProperty(\"contents_object_request_msg\"))\n                        $root.syft_proto.messaging.v1.ObjectRequestMessage.encode(message.contents_object_request_msg, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                    if (message.contents_tensor_cmd_msg != null && message.hasOwnProperty(\"contents_tensor_cmd_msg\"))\n                        $root.syft_proto.messaging.v1.TensorCommandMessage.encode(message.contents_tensor_cmd_msg, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                    if (message.contents_plan_cmd_msg != null && message.hasOwnProperty(\"contents_plan_cmd_msg\"))\n                        $root.syft_proto.messaging.v1.PlanCommandMessage.encode(message.contents_plan_cmd_msg, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n                    if (message.contents_worker_cmd_msg != null && message.hasOwnProperty(\"contents_worker_cmd_msg\"))\n                        $root.syft_proto.messaging.v1.WorkerCommandMessage.encode(message.contents_worker_cmd_msg, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n                    if (message.contents_search_msg != null && message.hasOwnProperty(\"contents_search_msg\"))\n                        $root.syft_proto.messaging.v1.SearchMessage.encode(message.contents_search_msg, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified SyftMessage message, length delimited. Does not implicitly {@link syft_proto.messaging.v1.SyftMessage.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof syft_proto.messaging.v1.SyftMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.ISyftMessage} message SyftMessage message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SyftMessage.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a SyftMessage message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof syft_proto.messaging.v1.SyftMessage\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {syft_proto.messaging.v1.SyftMessage} SyftMessage\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SyftMessage.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.messaging.v1.SyftMessage();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.contents_empty_msg = $root.google.protobuf.Empty.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.contents_delete_msg = $root.syft_proto.messaging.v1.ForceObjectDeleteMessage.decode(reader, reader.uint32());\n                            break;\n                        case 3:\n                            message.contents_get_shape_msg = $root.syft_proto.messaging.v1.GetShapeMessage.decode(reader, reader.uint32());\n                            break;\n                        case 4:\n                            message.contents_is_none_msg = $root.syft_proto.messaging.v1.IsNoneMessage.decode(reader, reader.uint32());\n                            break;\n                        case 5:\n                            message.contents_object_msg = $root.syft_proto.messaging.v1.ObjectMessage.decode(reader, reader.uint32());\n                            break;\n                        case 6:\n                            message.contents_object_request_msg = $root.syft_proto.messaging.v1.ObjectRequestMessage.decode(reader, reader.uint32());\n                            break;\n                        case 7:\n                            message.contents_tensor_cmd_msg = $root.syft_proto.messaging.v1.TensorCommandMessage.decode(reader, reader.uint32());\n                            break;\n                        case 8:\n                            message.contents_plan_cmd_msg = $root.syft_proto.messaging.v1.PlanCommandMessage.decode(reader, reader.uint32());\n                            break;\n                        case 9:\n                            message.contents_worker_cmd_msg = $root.syft_proto.messaging.v1.WorkerCommandMessage.decode(reader, reader.uint32());\n                            break;\n                        case 10:\n                            message.contents_search_msg = $root.syft_proto.messaging.v1.SearchMessage.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a SyftMessage message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof syft_proto.messaging.v1.SyftMessage\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {syft_proto.messaging.v1.SyftMessage} SyftMessage\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SyftMessage.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a SyftMessage message.\n                 * @function verify\n                 * @memberof syft_proto.messaging.v1.SyftMessage\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                SyftMessage.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    var properties = {};\n                    if (message.contents_empty_msg != null && message.hasOwnProperty(\"contents_empty_msg\")) {\n                        properties.contents = 1;\n                        {\n                            var error = $root.google.protobuf.Empty.verify(message.contents_empty_msg);\n                            if (error)\n                                return \"contents_empty_msg.\" + error;\n                        }\n                    }\n                    if (message.contents_delete_msg != null && message.hasOwnProperty(\"contents_delete_msg\")) {\n                        if (properties.contents === 1)\n                            return \"contents: multiple values\";\n                        properties.contents = 1;\n                        {\n                            var error = $root.syft_proto.messaging.v1.ForceObjectDeleteMessage.verify(message.contents_delete_msg);\n                            if (error)\n                                return \"contents_delete_msg.\" + error;\n                        }\n                    }\n                    if (message.contents_get_shape_msg != null && message.hasOwnProperty(\"contents_get_shape_msg\")) {\n                        if (properties.contents === 1)\n                            return \"contents: multiple values\";\n                        properties.contents = 1;\n                        {\n                            var error = $root.syft_proto.messaging.v1.GetShapeMessage.verify(message.contents_get_shape_msg);\n                            if (error)\n                                return \"contents_get_shape_msg.\" + error;\n                        }\n                    }\n                    if (message.contents_is_none_msg != null && message.hasOwnProperty(\"contents_is_none_msg\")) {\n                        if (properties.contents === 1)\n                            return \"contents: multiple values\";\n                        properties.contents = 1;\n                        {\n                            var error = $root.syft_proto.messaging.v1.IsNoneMessage.verify(message.contents_is_none_msg);\n                            if (error)\n                                return \"contents_is_none_msg.\" + error;\n                        }\n                    }\n                    if (message.contents_object_msg != null && message.hasOwnProperty(\"contents_object_msg\")) {\n                        if (properties.contents === 1)\n                            return \"contents: multiple values\";\n                        properties.contents = 1;\n                        {\n                            var error = $root.syft_proto.messaging.v1.ObjectMessage.verify(message.contents_object_msg);\n                            if (error)\n                                return \"contents_object_msg.\" + error;\n                        }\n                    }\n                    if (message.contents_object_request_msg != null && message.hasOwnProperty(\"contents_object_request_msg\")) {\n                        if (properties.contents === 1)\n                            return \"contents: multiple values\";\n                        properties.contents = 1;\n                        {\n                            var error = $root.syft_proto.messaging.v1.ObjectRequestMessage.verify(message.contents_object_request_msg);\n                            if (error)\n                                return \"contents_object_request_msg.\" + error;\n                        }\n                    }\n                    if (message.contents_tensor_cmd_msg != null && message.hasOwnProperty(\"contents_tensor_cmd_msg\")) {\n                        if (properties.contents === 1)\n                            return \"contents: multiple values\";\n                        properties.contents = 1;\n                        {\n                            var error = $root.syft_proto.messaging.v1.TensorCommandMessage.verify(message.contents_tensor_cmd_msg);\n                            if (error)\n                                return \"contents_tensor_cmd_msg.\" + error;\n                        }\n                    }\n                    if (message.contents_plan_cmd_msg != null && message.hasOwnProperty(\"contents_plan_cmd_msg\")) {\n                        if (properties.contents === 1)\n                            return \"contents: multiple values\";\n                        properties.contents = 1;\n                        {\n                            var error = $root.syft_proto.messaging.v1.PlanCommandMessage.verify(message.contents_plan_cmd_msg);\n                            if (error)\n                                return \"contents_plan_cmd_msg.\" + error;\n                        }\n                    }\n                    if (message.contents_worker_cmd_msg != null && message.hasOwnProperty(\"contents_worker_cmd_msg\")) {\n                        if (properties.contents === 1)\n                            return \"contents: multiple values\";\n                        properties.contents = 1;\n                        {\n                            var error = $root.syft_proto.messaging.v1.WorkerCommandMessage.verify(message.contents_worker_cmd_msg);\n                            if (error)\n                                return \"contents_worker_cmd_msg.\" + error;\n                        }\n                    }\n                    if (message.contents_search_msg != null && message.hasOwnProperty(\"contents_search_msg\")) {\n                        if (properties.contents === 1)\n                            return \"contents: multiple values\";\n                        properties.contents = 1;\n                        {\n                            var error = $root.syft_proto.messaging.v1.SearchMessage.verify(message.contents_search_msg);\n                            if (error)\n                                return \"contents_search_msg.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a SyftMessage message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof syft_proto.messaging.v1.SyftMessage\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {syft_proto.messaging.v1.SyftMessage} SyftMessage\n                 */\n                SyftMessage.fromObject = function fromObject(object) {\n                    if (object instanceof $root.syft_proto.messaging.v1.SyftMessage)\n                        return object;\n                    var message = new $root.syft_proto.messaging.v1.SyftMessage();\n                    if (object.contents_empty_msg != null) {\n                        if (typeof object.contents_empty_msg !== \"object\")\n                            throw TypeError(\".syft_proto.messaging.v1.SyftMessage.contents_empty_msg: object expected\");\n                        message.contents_empty_msg = $root.google.protobuf.Empty.fromObject(object.contents_empty_msg);\n                    }\n                    if (object.contents_delete_msg != null) {\n                        if (typeof object.contents_delete_msg !== \"object\")\n                            throw TypeError(\".syft_proto.messaging.v1.SyftMessage.contents_delete_msg: object expected\");\n                        message.contents_delete_msg = $root.syft_proto.messaging.v1.ForceObjectDeleteMessage.fromObject(object.contents_delete_msg);\n                    }\n                    if (object.contents_get_shape_msg != null) {\n                        if (typeof object.contents_get_shape_msg !== \"object\")\n                            throw TypeError(\".syft_proto.messaging.v1.SyftMessage.contents_get_shape_msg: object expected\");\n                        message.contents_get_shape_msg = $root.syft_proto.messaging.v1.GetShapeMessage.fromObject(object.contents_get_shape_msg);\n                    }\n                    if (object.contents_is_none_msg != null) {\n                        if (typeof object.contents_is_none_msg !== \"object\")\n                            throw TypeError(\".syft_proto.messaging.v1.SyftMessage.contents_is_none_msg: object expected\");\n                        message.contents_is_none_msg = $root.syft_proto.messaging.v1.IsNoneMessage.fromObject(object.contents_is_none_msg);\n                    }\n                    if (object.contents_object_msg != null) {\n                        if (typeof object.contents_object_msg !== \"object\")\n                            throw TypeError(\".syft_proto.messaging.v1.SyftMessage.contents_object_msg: object expected\");\n                        message.contents_object_msg = $root.syft_proto.messaging.v1.ObjectMessage.fromObject(object.contents_object_msg);\n                    }\n                    if (object.contents_object_request_msg != null) {\n                        if (typeof object.contents_object_request_msg !== \"object\")\n                            throw TypeError(\".syft_proto.messaging.v1.SyftMessage.contents_object_request_msg: object expected\");\n                        message.contents_object_request_msg = $root.syft_proto.messaging.v1.ObjectRequestMessage.fromObject(object.contents_object_request_msg);\n                    }\n                    if (object.contents_tensor_cmd_msg != null) {\n                        if (typeof object.contents_tensor_cmd_msg !== \"object\")\n                            throw TypeError(\".syft_proto.messaging.v1.SyftMessage.contents_tensor_cmd_msg: object expected\");\n                        message.contents_tensor_cmd_msg = $root.syft_proto.messaging.v1.TensorCommandMessage.fromObject(object.contents_tensor_cmd_msg);\n                    }\n                    if (object.contents_plan_cmd_msg != null) {\n                        if (typeof object.contents_plan_cmd_msg !== \"object\")\n                            throw TypeError(\".syft_proto.messaging.v1.SyftMessage.contents_plan_cmd_msg: object expected\");\n                        message.contents_plan_cmd_msg = $root.syft_proto.messaging.v1.PlanCommandMessage.fromObject(object.contents_plan_cmd_msg);\n                    }\n                    if (object.contents_worker_cmd_msg != null) {\n                        if (typeof object.contents_worker_cmd_msg !== \"object\")\n                            throw TypeError(\".syft_proto.messaging.v1.SyftMessage.contents_worker_cmd_msg: object expected\");\n                        message.contents_worker_cmd_msg = $root.syft_proto.messaging.v1.WorkerCommandMessage.fromObject(object.contents_worker_cmd_msg);\n                    }\n                    if (object.contents_search_msg != null) {\n                        if (typeof object.contents_search_msg !== \"object\")\n                            throw TypeError(\".syft_proto.messaging.v1.SyftMessage.contents_search_msg: object expected\");\n                        message.contents_search_msg = $root.syft_proto.messaging.v1.SearchMessage.fromObject(object.contents_search_msg);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a SyftMessage message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof syft_proto.messaging.v1.SyftMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.SyftMessage} message SyftMessage\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                SyftMessage.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (message.contents_empty_msg != null && message.hasOwnProperty(\"contents_empty_msg\")) {\n                        object.contents_empty_msg = $root.google.protobuf.Empty.toObject(message.contents_empty_msg, options);\n                        if (options.oneofs)\n                            object.contents = \"contents_empty_msg\";\n                    }\n                    if (message.contents_delete_msg != null && message.hasOwnProperty(\"contents_delete_msg\")) {\n                        object.contents_delete_msg = $root.syft_proto.messaging.v1.ForceObjectDeleteMessage.toObject(message.contents_delete_msg, options);\n                        if (options.oneofs)\n                            object.contents = \"contents_delete_msg\";\n                    }\n                    if (message.contents_get_shape_msg != null && message.hasOwnProperty(\"contents_get_shape_msg\")) {\n                        object.contents_get_shape_msg = $root.syft_proto.messaging.v1.GetShapeMessage.toObject(message.contents_get_shape_msg, options);\n                        if (options.oneofs)\n                            object.contents = \"contents_get_shape_msg\";\n                    }\n                    if (message.contents_is_none_msg != null && message.hasOwnProperty(\"contents_is_none_msg\")) {\n                        object.contents_is_none_msg = $root.syft_proto.messaging.v1.IsNoneMessage.toObject(message.contents_is_none_msg, options);\n                        if (options.oneofs)\n                            object.contents = \"contents_is_none_msg\";\n                    }\n                    if (message.contents_object_msg != null && message.hasOwnProperty(\"contents_object_msg\")) {\n                        object.contents_object_msg = $root.syft_proto.messaging.v1.ObjectMessage.toObject(message.contents_object_msg, options);\n                        if (options.oneofs)\n                            object.contents = \"contents_object_msg\";\n                    }\n                    if (message.contents_object_request_msg != null && message.hasOwnProperty(\"contents_object_request_msg\")) {\n                        object.contents_object_request_msg = $root.syft_proto.messaging.v1.ObjectRequestMessage.toObject(message.contents_object_request_msg, options);\n                        if (options.oneofs)\n                            object.contents = \"contents_object_request_msg\";\n                    }\n                    if (message.contents_tensor_cmd_msg != null && message.hasOwnProperty(\"contents_tensor_cmd_msg\")) {\n                        object.contents_tensor_cmd_msg = $root.syft_proto.messaging.v1.TensorCommandMessage.toObject(message.contents_tensor_cmd_msg, options);\n                        if (options.oneofs)\n                            object.contents = \"contents_tensor_cmd_msg\";\n                    }\n                    if (message.contents_plan_cmd_msg != null && message.hasOwnProperty(\"contents_plan_cmd_msg\")) {\n                        object.contents_plan_cmd_msg = $root.syft_proto.messaging.v1.PlanCommandMessage.toObject(message.contents_plan_cmd_msg, options);\n                        if (options.oneofs)\n                            object.contents = \"contents_plan_cmd_msg\";\n                    }\n                    if (message.contents_worker_cmd_msg != null && message.hasOwnProperty(\"contents_worker_cmd_msg\")) {\n                        object.contents_worker_cmd_msg = $root.syft_proto.messaging.v1.WorkerCommandMessage.toObject(message.contents_worker_cmd_msg, options);\n                        if (options.oneofs)\n                            object.contents = \"contents_worker_cmd_msg\";\n                    }\n                    if (message.contents_search_msg != null && message.hasOwnProperty(\"contents_search_msg\")) {\n                        object.contents_search_msg = $root.syft_proto.messaging.v1.SearchMessage.toObject(message.contents_search_msg, options);\n                        if (options.oneofs)\n                            object.contents = \"contents_search_msg\";\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this SyftMessage to JSON.\n                 * @function toJSON\n                 * @memberof syft_proto.messaging.v1.SyftMessage\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                SyftMessage.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return SyftMessage;\n            })();\n\n            v1.IsNoneMessage = (function() {\n\n                /**\n                 * Properties of an IsNoneMessage.\n                 * @memberof syft_proto.messaging.v1\n                 * @interface IIsNoneMessage\n                 * @property {syft_proto.types.syft.v1.IId|null} [object_id] IsNoneMessage object_id\n                 */\n\n                /**\n                 * Constructs a new IsNoneMessage.\n                 * @memberof syft_proto.messaging.v1\n                 * @classdesc Represents an IsNoneMessage.\n                 * @implements IIsNoneMessage\n                 * @constructor\n                 * @param {syft_proto.messaging.v1.IIsNoneMessage=} [properties] Properties to set\n                 */\n                function IsNoneMessage(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * IsNoneMessage object_id.\n                 * @member {syft_proto.types.syft.v1.IId|null|undefined} object_id\n                 * @memberof syft_proto.messaging.v1.IsNoneMessage\n                 * @instance\n                 */\n                IsNoneMessage.prototype.object_id = null;\n\n                /**\n                 * Creates a new IsNoneMessage instance using the specified properties.\n                 * @function create\n                 * @memberof syft_proto.messaging.v1.IsNoneMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.IIsNoneMessage=} [properties] Properties to set\n                 * @returns {syft_proto.messaging.v1.IsNoneMessage} IsNoneMessage instance\n                 */\n                IsNoneMessage.create = function create(properties) {\n                    return new IsNoneMessage(properties);\n                };\n\n                /**\n                 * Encodes the specified IsNoneMessage message. Does not implicitly {@link syft_proto.messaging.v1.IsNoneMessage.verify|verify} messages.\n                 * @function encode\n                 * @memberof syft_proto.messaging.v1.IsNoneMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.IIsNoneMessage} message IsNoneMessage message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                IsNoneMessage.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.object_id != null && message.hasOwnProperty(\"object_id\"))\n                        $root.syft_proto.types.syft.v1.Id.encode(message.object_id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified IsNoneMessage message, length delimited. Does not implicitly {@link syft_proto.messaging.v1.IsNoneMessage.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof syft_proto.messaging.v1.IsNoneMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.IIsNoneMessage} message IsNoneMessage message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                IsNoneMessage.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes an IsNoneMessage message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof syft_proto.messaging.v1.IsNoneMessage\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {syft_proto.messaging.v1.IsNoneMessage} IsNoneMessage\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                IsNoneMessage.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.messaging.v1.IsNoneMessage();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.object_id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes an IsNoneMessage message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof syft_proto.messaging.v1.IsNoneMessage\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {syft_proto.messaging.v1.IsNoneMessage} IsNoneMessage\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                IsNoneMessage.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies an IsNoneMessage message.\n                 * @function verify\n                 * @memberof syft_proto.messaging.v1.IsNoneMessage\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                IsNoneMessage.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.object_id != null && message.hasOwnProperty(\"object_id\")) {\n                        var error = $root.syft_proto.types.syft.v1.Id.verify(message.object_id);\n                        if (error)\n                            return \"object_id.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates an IsNoneMessage message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof syft_proto.messaging.v1.IsNoneMessage\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {syft_proto.messaging.v1.IsNoneMessage} IsNoneMessage\n                 */\n                IsNoneMessage.fromObject = function fromObject(object) {\n                    if (object instanceof $root.syft_proto.messaging.v1.IsNoneMessage)\n                        return object;\n                    var message = new $root.syft_proto.messaging.v1.IsNoneMessage();\n                    if (object.object_id != null) {\n                        if (typeof object.object_id !== \"object\")\n                            throw TypeError(\".syft_proto.messaging.v1.IsNoneMessage.object_id: object expected\");\n                        message.object_id = $root.syft_proto.types.syft.v1.Id.fromObject(object.object_id);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from an IsNoneMessage message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof syft_proto.messaging.v1.IsNoneMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.IsNoneMessage} message IsNoneMessage\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                IsNoneMessage.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.object_id = null;\n                    if (message.object_id != null && message.hasOwnProperty(\"object_id\"))\n                        object.object_id = $root.syft_proto.types.syft.v1.Id.toObject(message.object_id, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this IsNoneMessage to JSON.\n                 * @function toJSON\n                 * @memberof syft_proto.messaging.v1.IsNoneMessage\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                IsNoneMessage.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return IsNoneMessage;\n            })();\n\n            v1.ObjectMessage = (function() {\n\n                /**\n                 * Properties of an ObjectMessage.\n                 * @memberof syft_proto.messaging.v1\n                 * @interface IObjectMessage\n                 * @property {syft_proto.types.torch.v1.ITorchTensor|null} [tensor] ObjectMessage tensor\n                 */\n\n                /**\n                 * Constructs a new ObjectMessage.\n                 * @memberof syft_proto.messaging.v1\n                 * @classdesc Represents an ObjectMessage.\n                 * @implements IObjectMessage\n                 * @constructor\n                 * @param {syft_proto.messaging.v1.IObjectMessage=} [properties] Properties to set\n                 */\n                function ObjectMessage(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * ObjectMessage tensor.\n                 * @member {syft_proto.types.torch.v1.ITorchTensor|null|undefined} tensor\n                 * @memberof syft_proto.messaging.v1.ObjectMessage\n                 * @instance\n                 */\n                ObjectMessage.prototype.tensor = null;\n\n                /**\n                 * Creates a new ObjectMessage instance using the specified properties.\n                 * @function create\n                 * @memberof syft_proto.messaging.v1.ObjectMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.IObjectMessage=} [properties] Properties to set\n                 * @returns {syft_proto.messaging.v1.ObjectMessage} ObjectMessage instance\n                 */\n                ObjectMessage.create = function create(properties) {\n                    return new ObjectMessage(properties);\n                };\n\n                /**\n                 * Encodes the specified ObjectMessage message. Does not implicitly {@link syft_proto.messaging.v1.ObjectMessage.verify|verify} messages.\n                 * @function encode\n                 * @memberof syft_proto.messaging.v1.ObjectMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.IObjectMessage} message ObjectMessage message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ObjectMessage.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.tensor != null && message.hasOwnProperty(\"tensor\"))\n                        $root.syft_proto.types.torch.v1.TorchTensor.encode(message.tensor, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified ObjectMessage message, length delimited. Does not implicitly {@link syft_proto.messaging.v1.ObjectMessage.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof syft_proto.messaging.v1.ObjectMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.IObjectMessage} message ObjectMessage message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ObjectMessage.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes an ObjectMessage message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof syft_proto.messaging.v1.ObjectMessage\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {syft_proto.messaging.v1.ObjectMessage} ObjectMessage\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ObjectMessage.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.messaging.v1.ObjectMessage();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.tensor = $root.syft_proto.types.torch.v1.TorchTensor.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes an ObjectMessage message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof syft_proto.messaging.v1.ObjectMessage\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {syft_proto.messaging.v1.ObjectMessage} ObjectMessage\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ObjectMessage.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies an ObjectMessage message.\n                 * @function verify\n                 * @memberof syft_proto.messaging.v1.ObjectMessage\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                ObjectMessage.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.tensor != null && message.hasOwnProperty(\"tensor\")) {\n                        var error = $root.syft_proto.types.torch.v1.TorchTensor.verify(message.tensor);\n                        if (error)\n                            return \"tensor.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates an ObjectMessage message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof syft_proto.messaging.v1.ObjectMessage\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {syft_proto.messaging.v1.ObjectMessage} ObjectMessage\n                 */\n                ObjectMessage.fromObject = function fromObject(object) {\n                    if (object instanceof $root.syft_proto.messaging.v1.ObjectMessage)\n                        return object;\n                    var message = new $root.syft_proto.messaging.v1.ObjectMessage();\n                    if (object.tensor != null) {\n                        if (typeof object.tensor !== \"object\")\n                            throw TypeError(\".syft_proto.messaging.v1.ObjectMessage.tensor: object expected\");\n                        message.tensor = $root.syft_proto.types.torch.v1.TorchTensor.fromObject(object.tensor);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from an ObjectMessage message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof syft_proto.messaging.v1.ObjectMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.ObjectMessage} message ObjectMessage\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                ObjectMessage.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.tensor = null;\n                    if (message.tensor != null && message.hasOwnProperty(\"tensor\"))\n                        object.tensor = $root.syft_proto.types.torch.v1.TorchTensor.toObject(message.tensor, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this ObjectMessage to JSON.\n                 * @function toJSON\n                 * @memberof syft_proto.messaging.v1.ObjectMessage\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                ObjectMessage.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return ObjectMessage;\n            })();\n\n            v1.TensorCommandMessage = (function() {\n\n                /**\n                 * Properties of a TensorCommandMessage.\n                 * @memberof syft_proto.messaging.v1\n                 * @interface ITensorCommandMessage\n                 * @property {syft_proto.execution.v1.IComputationAction|null} [computation] TensorCommandMessage computation\n                 * @property {syft_proto.execution.v1.ICommunicationAction|null} [communication] TensorCommandMessage communication\n                 */\n\n                /**\n                 * Constructs a new TensorCommandMessage.\n                 * @memberof syft_proto.messaging.v1\n                 * @classdesc Represents a TensorCommandMessage.\n                 * @implements ITensorCommandMessage\n                 * @constructor\n                 * @param {syft_proto.messaging.v1.ITensorCommandMessage=} [properties] Properties to set\n                 */\n                function TensorCommandMessage(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * TensorCommandMessage computation.\n                 * @member {syft_proto.execution.v1.IComputationAction|null|undefined} computation\n                 * @memberof syft_proto.messaging.v1.TensorCommandMessage\n                 * @instance\n                 */\n                TensorCommandMessage.prototype.computation = null;\n\n                /**\n                 * TensorCommandMessage communication.\n                 * @member {syft_proto.execution.v1.ICommunicationAction|null|undefined} communication\n                 * @memberof syft_proto.messaging.v1.TensorCommandMessage\n                 * @instance\n                 */\n                TensorCommandMessage.prototype.communication = null;\n\n                // OneOf field names bound to virtual getters and setters\n                var $oneOfFields;\n\n                /**\n                 * TensorCommandMessage action.\n                 * @member {\"computation\"|\"communication\"|undefined} action\n                 * @memberof syft_proto.messaging.v1.TensorCommandMessage\n                 * @instance\n                 */\n                Object.defineProperty(TensorCommandMessage.prototype, \"action\", {\n                    get: $util.oneOfGetter($oneOfFields = [\"computation\", \"communication\"]),\n                    set: $util.oneOfSetter($oneOfFields)\n                });\n\n                /**\n                 * Creates a new TensorCommandMessage instance using the specified properties.\n                 * @function create\n                 * @memberof syft_proto.messaging.v1.TensorCommandMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.ITensorCommandMessage=} [properties] Properties to set\n                 * @returns {syft_proto.messaging.v1.TensorCommandMessage} TensorCommandMessage instance\n                 */\n                TensorCommandMessage.create = function create(properties) {\n                    return new TensorCommandMessage(properties);\n                };\n\n                /**\n                 * Encodes the specified TensorCommandMessage message. Does not implicitly {@link syft_proto.messaging.v1.TensorCommandMessage.verify|verify} messages.\n                 * @function encode\n                 * @memberof syft_proto.messaging.v1.TensorCommandMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.ITensorCommandMessage} message TensorCommandMessage message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TensorCommandMessage.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.computation != null && message.hasOwnProperty(\"computation\"))\n                        $root.syft_proto.execution.v1.ComputationAction.encode(message.computation, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.communication != null && message.hasOwnProperty(\"communication\"))\n                        $root.syft_proto.execution.v1.CommunicationAction.encode(message.communication, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified TensorCommandMessage message, length delimited. Does not implicitly {@link syft_proto.messaging.v1.TensorCommandMessage.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof syft_proto.messaging.v1.TensorCommandMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.ITensorCommandMessage} message TensorCommandMessage message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                TensorCommandMessage.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a TensorCommandMessage message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof syft_proto.messaging.v1.TensorCommandMessage\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {syft_proto.messaging.v1.TensorCommandMessage} TensorCommandMessage\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TensorCommandMessage.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.messaging.v1.TensorCommandMessage();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.computation = $root.syft_proto.execution.v1.ComputationAction.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.communication = $root.syft_proto.execution.v1.CommunicationAction.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a TensorCommandMessage message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof syft_proto.messaging.v1.TensorCommandMessage\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {syft_proto.messaging.v1.TensorCommandMessage} TensorCommandMessage\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                TensorCommandMessage.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a TensorCommandMessage message.\n                 * @function verify\n                 * @memberof syft_proto.messaging.v1.TensorCommandMessage\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                TensorCommandMessage.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    var properties = {};\n                    if (message.computation != null && message.hasOwnProperty(\"computation\")) {\n                        properties.action = 1;\n                        {\n                            var error = $root.syft_proto.execution.v1.ComputationAction.verify(message.computation);\n                            if (error)\n                                return \"computation.\" + error;\n                        }\n                    }\n                    if (message.communication != null && message.hasOwnProperty(\"communication\")) {\n                        if (properties.action === 1)\n                            return \"action: multiple values\";\n                        properties.action = 1;\n                        {\n                            var error = $root.syft_proto.execution.v1.CommunicationAction.verify(message.communication);\n                            if (error)\n                                return \"communication.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a TensorCommandMessage message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof syft_proto.messaging.v1.TensorCommandMessage\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {syft_proto.messaging.v1.TensorCommandMessage} TensorCommandMessage\n                 */\n                TensorCommandMessage.fromObject = function fromObject(object) {\n                    if (object instanceof $root.syft_proto.messaging.v1.TensorCommandMessage)\n                        return object;\n                    var message = new $root.syft_proto.messaging.v1.TensorCommandMessage();\n                    if (object.computation != null) {\n                        if (typeof object.computation !== \"object\")\n                            throw TypeError(\".syft_proto.messaging.v1.TensorCommandMessage.computation: object expected\");\n                        message.computation = $root.syft_proto.execution.v1.ComputationAction.fromObject(object.computation);\n                    }\n                    if (object.communication != null) {\n                        if (typeof object.communication !== \"object\")\n                            throw TypeError(\".syft_proto.messaging.v1.TensorCommandMessage.communication: object expected\");\n                        message.communication = $root.syft_proto.execution.v1.CommunicationAction.fromObject(object.communication);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a TensorCommandMessage message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof syft_proto.messaging.v1.TensorCommandMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.TensorCommandMessage} message TensorCommandMessage\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                TensorCommandMessage.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (message.computation != null && message.hasOwnProperty(\"computation\")) {\n                        object.computation = $root.syft_proto.execution.v1.ComputationAction.toObject(message.computation, options);\n                        if (options.oneofs)\n                            object.action = \"computation\";\n                    }\n                    if (message.communication != null && message.hasOwnProperty(\"communication\")) {\n                        object.communication = $root.syft_proto.execution.v1.CommunicationAction.toObject(message.communication, options);\n                        if (options.oneofs)\n                            object.action = \"communication\";\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this TensorCommandMessage to JSON.\n                 * @function toJSON\n                 * @memberof syft_proto.messaging.v1.TensorCommandMessage\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                TensorCommandMessage.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return TensorCommandMessage;\n            })();\n\n            v1.ForceObjectDeleteMessage = (function() {\n\n                /**\n                 * Properties of a ForceObjectDeleteMessage.\n                 * @memberof syft_proto.messaging.v1\n                 * @interface IForceObjectDeleteMessage\n                 * @property {syft_proto.types.syft.v1.IId|null} [object_id] ForceObjectDeleteMessage object_id\n                 */\n\n                /**\n                 * Constructs a new ForceObjectDeleteMessage.\n                 * @memberof syft_proto.messaging.v1\n                 * @classdesc Represents a ForceObjectDeleteMessage.\n                 * @implements IForceObjectDeleteMessage\n                 * @constructor\n                 * @param {syft_proto.messaging.v1.IForceObjectDeleteMessage=} [properties] Properties to set\n                 */\n                function ForceObjectDeleteMessage(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * ForceObjectDeleteMessage object_id.\n                 * @member {syft_proto.types.syft.v1.IId|null|undefined} object_id\n                 * @memberof syft_proto.messaging.v1.ForceObjectDeleteMessage\n                 * @instance\n                 */\n                ForceObjectDeleteMessage.prototype.object_id = null;\n\n                /**\n                 * Creates a new ForceObjectDeleteMessage instance using the specified properties.\n                 * @function create\n                 * @memberof syft_proto.messaging.v1.ForceObjectDeleteMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.IForceObjectDeleteMessage=} [properties] Properties to set\n                 * @returns {syft_proto.messaging.v1.ForceObjectDeleteMessage} ForceObjectDeleteMessage instance\n                 */\n                ForceObjectDeleteMessage.create = function create(properties) {\n                    return new ForceObjectDeleteMessage(properties);\n                };\n\n                /**\n                 * Encodes the specified ForceObjectDeleteMessage message. Does not implicitly {@link syft_proto.messaging.v1.ForceObjectDeleteMessage.verify|verify} messages.\n                 * @function encode\n                 * @memberof syft_proto.messaging.v1.ForceObjectDeleteMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.IForceObjectDeleteMessage} message ForceObjectDeleteMessage message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ForceObjectDeleteMessage.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.object_id != null && message.hasOwnProperty(\"object_id\"))\n                        $root.syft_proto.types.syft.v1.Id.encode(message.object_id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified ForceObjectDeleteMessage message, length delimited. Does not implicitly {@link syft_proto.messaging.v1.ForceObjectDeleteMessage.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof syft_proto.messaging.v1.ForceObjectDeleteMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.IForceObjectDeleteMessage} message ForceObjectDeleteMessage message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ForceObjectDeleteMessage.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a ForceObjectDeleteMessage message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof syft_proto.messaging.v1.ForceObjectDeleteMessage\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {syft_proto.messaging.v1.ForceObjectDeleteMessage} ForceObjectDeleteMessage\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ForceObjectDeleteMessage.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.messaging.v1.ForceObjectDeleteMessage();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.object_id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a ForceObjectDeleteMessage message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof syft_proto.messaging.v1.ForceObjectDeleteMessage\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {syft_proto.messaging.v1.ForceObjectDeleteMessage} ForceObjectDeleteMessage\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ForceObjectDeleteMessage.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a ForceObjectDeleteMessage message.\n                 * @function verify\n                 * @memberof syft_proto.messaging.v1.ForceObjectDeleteMessage\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                ForceObjectDeleteMessage.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.object_id != null && message.hasOwnProperty(\"object_id\")) {\n                        var error = $root.syft_proto.types.syft.v1.Id.verify(message.object_id);\n                        if (error)\n                            return \"object_id.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a ForceObjectDeleteMessage message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof syft_proto.messaging.v1.ForceObjectDeleteMessage\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {syft_proto.messaging.v1.ForceObjectDeleteMessage} ForceObjectDeleteMessage\n                 */\n                ForceObjectDeleteMessage.fromObject = function fromObject(object) {\n                    if (object instanceof $root.syft_proto.messaging.v1.ForceObjectDeleteMessage)\n                        return object;\n                    var message = new $root.syft_proto.messaging.v1.ForceObjectDeleteMessage();\n                    if (object.object_id != null) {\n                        if (typeof object.object_id !== \"object\")\n                            throw TypeError(\".syft_proto.messaging.v1.ForceObjectDeleteMessage.object_id: object expected\");\n                        message.object_id = $root.syft_proto.types.syft.v1.Id.fromObject(object.object_id);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a ForceObjectDeleteMessage message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof syft_proto.messaging.v1.ForceObjectDeleteMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.ForceObjectDeleteMessage} message ForceObjectDeleteMessage\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                ForceObjectDeleteMessage.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.object_id = null;\n                    if (message.object_id != null && message.hasOwnProperty(\"object_id\"))\n                        object.object_id = $root.syft_proto.types.syft.v1.Id.toObject(message.object_id, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this ForceObjectDeleteMessage to JSON.\n                 * @function toJSON\n                 * @memberof syft_proto.messaging.v1.ForceObjectDeleteMessage\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                ForceObjectDeleteMessage.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return ForceObjectDeleteMessage;\n            })();\n\n            v1.GetShapeMessage = (function() {\n\n                /**\n                 * Properties of a GetShapeMessage.\n                 * @memberof syft_proto.messaging.v1\n                 * @interface IGetShapeMessage\n                 * @property {syft_proto.types.syft.v1.IId|null} [object_id] GetShapeMessage object_id\n                 */\n\n                /**\n                 * Constructs a new GetShapeMessage.\n                 * @memberof syft_proto.messaging.v1\n                 * @classdesc Represents a GetShapeMessage.\n                 * @implements IGetShapeMessage\n                 * @constructor\n                 * @param {syft_proto.messaging.v1.IGetShapeMessage=} [properties] Properties to set\n                 */\n                function GetShapeMessage(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * GetShapeMessage object_id.\n                 * @member {syft_proto.types.syft.v1.IId|null|undefined} object_id\n                 * @memberof syft_proto.messaging.v1.GetShapeMessage\n                 * @instance\n                 */\n                GetShapeMessage.prototype.object_id = null;\n\n                /**\n                 * Creates a new GetShapeMessage instance using the specified properties.\n                 * @function create\n                 * @memberof syft_proto.messaging.v1.GetShapeMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.IGetShapeMessage=} [properties] Properties to set\n                 * @returns {syft_proto.messaging.v1.GetShapeMessage} GetShapeMessage instance\n                 */\n                GetShapeMessage.create = function create(properties) {\n                    return new GetShapeMessage(properties);\n                };\n\n                /**\n                 * Encodes the specified GetShapeMessage message. Does not implicitly {@link syft_proto.messaging.v1.GetShapeMessage.verify|verify} messages.\n                 * @function encode\n                 * @memberof syft_proto.messaging.v1.GetShapeMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.IGetShapeMessage} message GetShapeMessage message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                GetShapeMessage.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.object_id != null && message.hasOwnProperty(\"object_id\"))\n                        $root.syft_proto.types.syft.v1.Id.encode(message.object_id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified GetShapeMessage message, length delimited. Does not implicitly {@link syft_proto.messaging.v1.GetShapeMessage.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof syft_proto.messaging.v1.GetShapeMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.IGetShapeMessage} message GetShapeMessage message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                GetShapeMessage.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a GetShapeMessage message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof syft_proto.messaging.v1.GetShapeMessage\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {syft_proto.messaging.v1.GetShapeMessage} GetShapeMessage\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                GetShapeMessage.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.messaging.v1.GetShapeMessage();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.object_id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a GetShapeMessage message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof syft_proto.messaging.v1.GetShapeMessage\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {syft_proto.messaging.v1.GetShapeMessage} GetShapeMessage\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                GetShapeMessage.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a GetShapeMessage message.\n                 * @function verify\n                 * @memberof syft_proto.messaging.v1.GetShapeMessage\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                GetShapeMessage.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.object_id != null && message.hasOwnProperty(\"object_id\")) {\n                        var error = $root.syft_proto.types.syft.v1.Id.verify(message.object_id);\n                        if (error)\n                            return \"object_id.\" + error;\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a GetShapeMessage message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof syft_proto.messaging.v1.GetShapeMessage\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {syft_proto.messaging.v1.GetShapeMessage} GetShapeMessage\n                 */\n                GetShapeMessage.fromObject = function fromObject(object) {\n                    if (object instanceof $root.syft_proto.messaging.v1.GetShapeMessage)\n                        return object;\n                    var message = new $root.syft_proto.messaging.v1.GetShapeMessage();\n                    if (object.object_id != null) {\n                        if (typeof object.object_id !== \"object\")\n                            throw TypeError(\".syft_proto.messaging.v1.GetShapeMessage.object_id: object expected\");\n                        message.object_id = $root.syft_proto.types.syft.v1.Id.fromObject(object.object_id);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a GetShapeMessage message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof syft_proto.messaging.v1.GetShapeMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.GetShapeMessage} message GetShapeMessage\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                GetShapeMessage.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults)\n                        object.object_id = null;\n                    if (message.object_id != null && message.hasOwnProperty(\"object_id\"))\n                        object.object_id = $root.syft_proto.types.syft.v1.Id.toObject(message.object_id, options);\n                    return object;\n                };\n\n                /**\n                 * Converts this GetShapeMessage to JSON.\n                 * @function toJSON\n                 * @memberof syft_proto.messaging.v1.GetShapeMessage\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                GetShapeMessage.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return GetShapeMessage;\n            })();\n\n            v1.ObjectRequestMessage = (function() {\n\n                /**\n                 * Properties of an ObjectRequestMessage.\n                 * @memberof syft_proto.messaging.v1\n                 * @interface IObjectRequestMessage\n                 * @property {syft_proto.types.syft.v1.IId|null} [object_id] ObjectRequestMessage object_id\n                 * @property {string|null} [reason] ObjectRequestMessage reason\n                 */\n\n                /**\n                 * Constructs a new ObjectRequestMessage.\n                 * @memberof syft_proto.messaging.v1\n                 * @classdesc Represents an ObjectRequestMessage.\n                 * @implements IObjectRequestMessage\n                 * @constructor\n                 * @param {syft_proto.messaging.v1.IObjectRequestMessage=} [properties] Properties to set\n                 */\n                function ObjectRequestMessage(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * ObjectRequestMessage object_id.\n                 * @member {syft_proto.types.syft.v1.IId|null|undefined} object_id\n                 * @memberof syft_proto.messaging.v1.ObjectRequestMessage\n                 * @instance\n                 */\n                ObjectRequestMessage.prototype.object_id = null;\n\n                /**\n                 * ObjectRequestMessage reason.\n                 * @member {string} reason\n                 * @memberof syft_proto.messaging.v1.ObjectRequestMessage\n                 * @instance\n                 */\n                ObjectRequestMessage.prototype.reason = \"\";\n\n                /**\n                 * Creates a new ObjectRequestMessage instance using the specified properties.\n                 * @function create\n                 * @memberof syft_proto.messaging.v1.ObjectRequestMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.IObjectRequestMessage=} [properties] Properties to set\n                 * @returns {syft_proto.messaging.v1.ObjectRequestMessage} ObjectRequestMessage instance\n                 */\n                ObjectRequestMessage.create = function create(properties) {\n                    return new ObjectRequestMessage(properties);\n                };\n\n                /**\n                 * Encodes the specified ObjectRequestMessage message. Does not implicitly {@link syft_proto.messaging.v1.ObjectRequestMessage.verify|verify} messages.\n                 * @function encode\n                 * @memberof syft_proto.messaging.v1.ObjectRequestMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.IObjectRequestMessage} message ObjectRequestMessage message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ObjectRequestMessage.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.object_id != null && message.hasOwnProperty(\"object_id\"))\n                        $root.syft_proto.types.syft.v1.Id.encode(message.object_id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    if (message.reason != null && message.hasOwnProperty(\"reason\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.reason);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified ObjectRequestMessage message, length delimited. Does not implicitly {@link syft_proto.messaging.v1.ObjectRequestMessage.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof syft_proto.messaging.v1.ObjectRequestMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.IObjectRequestMessage} message ObjectRequestMessage message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ObjectRequestMessage.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes an ObjectRequestMessage message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof syft_proto.messaging.v1.ObjectRequestMessage\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {syft_proto.messaging.v1.ObjectRequestMessage} ObjectRequestMessage\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ObjectRequestMessage.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.messaging.v1.ObjectRequestMessage();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.object_id = $root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32());\n                            break;\n                        case 2:\n                            message.reason = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes an ObjectRequestMessage message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof syft_proto.messaging.v1.ObjectRequestMessage\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {syft_proto.messaging.v1.ObjectRequestMessage} ObjectRequestMessage\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ObjectRequestMessage.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies an ObjectRequestMessage message.\n                 * @function verify\n                 * @memberof syft_proto.messaging.v1.ObjectRequestMessage\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                ObjectRequestMessage.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.object_id != null && message.hasOwnProperty(\"object_id\")) {\n                        var error = $root.syft_proto.types.syft.v1.Id.verify(message.object_id);\n                        if (error)\n                            return \"object_id.\" + error;\n                    }\n                    if (message.reason != null && message.hasOwnProperty(\"reason\"))\n                        if (!$util.isString(message.reason))\n                            return \"reason: string expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates an ObjectRequestMessage message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof syft_proto.messaging.v1.ObjectRequestMessage\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {syft_proto.messaging.v1.ObjectRequestMessage} ObjectRequestMessage\n                 */\n                ObjectRequestMessage.fromObject = function fromObject(object) {\n                    if (object instanceof $root.syft_proto.messaging.v1.ObjectRequestMessage)\n                        return object;\n                    var message = new $root.syft_proto.messaging.v1.ObjectRequestMessage();\n                    if (object.object_id != null) {\n                        if (typeof object.object_id !== \"object\")\n                            throw TypeError(\".syft_proto.messaging.v1.ObjectRequestMessage.object_id: object expected\");\n                        message.object_id = $root.syft_proto.types.syft.v1.Id.fromObject(object.object_id);\n                    }\n                    if (object.reason != null)\n                        message.reason = String(object.reason);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from an ObjectRequestMessage message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof syft_proto.messaging.v1.ObjectRequestMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.ObjectRequestMessage} message ObjectRequestMessage\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                ObjectRequestMessage.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.object_id = null;\n                        object.reason = \"\";\n                    }\n                    if (message.object_id != null && message.hasOwnProperty(\"object_id\"))\n                        object.object_id = $root.syft_proto.types.syft.v1.Id.toObject(message.object_id, options);\n                    if (message.reason != null && message.hasOwnProperty(\"reason\"))\n                        object.reason = message.reason;\n                    return object;\n                };\n\n                /**\n                 * Converts this ObjectRequestMessage to JSON.\n                 * @function toJSON\n                 * @memberof syft_proto.messaging.v1.ObjectRequestMessage\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                ObjectRequestMessage.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return ObjectRequestMessage;\n            })();\n\n            v1.PlanCommandMessage = (function() {\n\n                /**\n                 * Properties of a PlanCommandMessage.\n                 * @memberof syft_proto.messaging.v1\n                 * @interface IPlanCommandMessage\n                 * @property {string|null} [command_name] PlanCommandMessage command_name\n                 * @property {Array.<syft_proto.types.syft.v1.IArg>|null} [args] PlanCommandMessage args\n                 */\n\n                /**\n                 * Constructs a new PlanCommandMessage.\n                 * @memberof syft_proto.messaging.v1\n                 * @classdesc Represents a PlanCommandMessage.\n                 * @implements IPlanCommandMessage\n                 * @constructor\n                 * @param {syft_proto.messaging.v1.IPlanCommandMessage=} [properties] Properties to set\n                 */\n                function PlanCommandMessage(properties) {\n                    this.args = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * PlanCommandMessage command_name.\n                 * @member {string} command_name\n                 * @memberof syft_proto.messaging.v1.PlanCommandMessage\n                 * @instance\n                 */\n                PlanCommandMessage.prototype.command_name = \"\";\n\n                /**\n                 * PlanCommandMessage args.\n                 * @member {Array.<syft_proto.types.syft.v1.IArg>} args\n                 * @memberof syft_proto.messaging.v1.PlanCommandMessage\n                 * @instance\n                 */\n                PlanCommandMessage.prototype.args = $util.emptyArray;\n\n                /**\n                 * Creates a new PlanCommandMessage instance using the specified properties.\n                 * @function create\n                 * @memberof syft_proto.messaging.v1.PlanCommandMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.IPlanCommandMessage=} [properties] Properties to set\n                 * @returns {syft_proto.messaging.v1.PlanCommandMessage} PlanCommandMessage instance\n                 */\n                PlanCommandMessage.create = function create(properties) {\n                    return new PlanCommandMessage(properties);\n                };\n\n                /**\n                 * Encodes the specified PlanCommandMessage message. Does not implicitly {@link syft_proto.messaging.v1.PlanCommandMessage.verify|verify} messages.\n                 * @function encode\n                 * @memberof syft_proto.messaging.v1.PlanCommandMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.IPlanCommandMessage} message PlanCommandMessage message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PlanCommandMessage.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.command_name != null && message.hasOwnProperty(\"command_name\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.command_name);\n                    if (message.args != null && message.args.length)\n                        for (var i = 0; i < message.args.length; ++i)\n                            $root.syft_proto.types.syft.v1.Arg.encode(message.args[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified PlanCommandMessage message, length delimited. Does not implicitly {@link syft_proto.messaging.v1.PlanCommandMessage.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof syft_proto.messaging.v1.PlanCommandMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.IPlanCommandMessage} message PlanCommandMessage message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                PlanCommandMessage.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a PlanCommandMessage message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof syft_proto.messaging.v1.PlanCommandMessage\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {syft_proto.messaging.v1.PlanCommandMessage} PlanCommandMessage\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PlanCommandMessage.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.messaging.v1.PlanCommandMessage();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.command_name = reader.string();\n                            break;\n                        case 2:\n                            if (!(message.args && message.args.length))\n                                message.args = [];\n                            message.args.push($root.syft_proto.types.syft.v1.Arg.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a PlanCommandMessage message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof syft_proto.messaging.v1.PlanCommandMessage\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {syft_proto.messaging.v1.PlanCommandMessage} PlanCommandMessage\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                PlanCommandMessage.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a PlanCommandMessage message.\n                 * @function verify\n                 * @memberof syft_proto.messaging.v1.PlanCommandMessage\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                PlanCommandMessage.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.command_name != null && message.hasOwnProperty(\"command_name\"))\n                        if (!$util.isString(message.command_name))\n                            return \"command_name: string expected\";\n                    if (message.args != null && message.hasOwnProperty(\"args\")) {\n                        if (!Array.isArray(message.args))\n                            return \"args: array expected\";\n                        for (var i = 0; i < message.args.length; ++i) {\n                            var error = $root.syft_proto.types.syft.v1.Arg.verify(message.args[i]);\n                            if (error)\n                                return \"args.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a PlanCommandMessage message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof syft_proto.messaging.v1.PlanCommandMessage\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {syft_proto.messaging.v1.PlanCommandMessage} PlanCommandMessage\n                 */\n                PlanCommandMessage.fromObject = function fromObject(object) {\n                    if (object instanceof $root.syft_proto.messaging.v1.PlanCommandMessage)\n                        return object;\n                    var message = new $root.syft_proto.messaging.v1.PlanCommandMessage();\n                    if (object.command_name != null)\n                        message.command_name = String(object.command_name);\n                    if (object.args) {\n                        if (!Array.isArray(object.args))\n                            throw TypeError(\".syft_proto.messaging.v1.PlanCommandMessage.args: array expected\");\n                        message.args = [];\n                        for (var i = 0; i < object.args.length; ++i) {\n                            if (typeof object.args[i] !== \"object\")\n                                throw TypeError(\".syft_proto.messaging.v1.PlanCommandMessage.args: object expected\");\n                            message.args[i] = $root.syft_proto.types.syft.v1.Arg.fromObject(object.args[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a PlanCommandMessage message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof syft_proto.messaging.v1.PlanCommandMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.PlanCommandMessage} message PlanCommandMessage\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                PlanCommandMessage.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.args = [];\n                    if (options.defaults)\n                        object.command_name = \"\";\n                    if (message.command_name != null && message.hasOwnProperty(\"command_name\"))\n                        object.command_name = message.command_name;\n                    if (message.args && message.args.length) {\n                        object.args = [];\n                        for (var j = 0; j < message.args.length; ++j)\n                            object.args[j] = $root.syft_proto.types.syft.v1.Arg.toObject(message.args[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this PlanCommandMessage to JSON.\n                 * @function toJSON\n                 * @memberof syft_proto.messaging.v1.PlanCommandMessage\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                PlanCommandMessage.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return PlanCommandMessage;\n            })();\n\n            v1.WorkerCommandMessage = (function() {\n\n                /**\n                 * Properties of a WorkerCommandMessage.\n                 * @memberof syft_proto.messaging.v1\n                 * @interface IWorkerCommandMessage\n                 * @property {string|null} [command_name] WorkerCommandMessage command_name\n                 * @property {Array.<syft_proto.types.syft.v1.IArg>|null} [args] WorkerCommandMessage args\n                 */\n\n                /**\n                 * Constructs a new WorkerCommandMessage.\n                 * @memberof syft_proto.messaging.v1\n                 * @classdesc Represents a WorkerCommandMessage.\n                 * @implements IWorkerCommandMessage\n                 * @constructor\n                 * @param {syft_proto.messaging.v1.IWorkerCommandMessage=} [properties] Properties to set\n                 */\n                function WorkerCommandMessage(properties) {\n                    this.args = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * WorkerCommandMessage command_name.\n                 * @member {string} command_name\n                 * @memberof syft_proto.messaging.v1.WorkerCommandMessage\n                 * @instance\n                 */\n                WorkerCommandMessage.prototype.command_name = \"\";\n\n                /**\n                 * WorkerCommandMessage args.\n                 * @member {Array.<syft_proto.types.syft.v1.IArg>} args\n                 * @memberof syft_proto.messaging.v1.WorkerCommandMessage\n                 * @instance\n                 */\n                WorkerCommandMessage.prototype.args = $util.emptyArray;\n\n                /**\n                 * Creates a new WorkerCommandMessage instance using the specified properties.\n                 * @function create\n                 * @memberof syft_proto.messaging.v1.WorkerCommandMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.IWorkerCommandMessage=} [properties] Properties to set\n                 * @returns {syft_proto.messaging.v1.WorkerCommandMessage} WorkerCommandMessage instance\n                 */\n                WorkerCommandMessage.create = function create(properties) {\n                    return new WorkerCommandMessage(properties);\n                };\n\n                /**\n                 * Encodes the specified WorkerCommandMessage message. Does not implicitly {@link syft_proto.messaging.v1.WorkerCommandMessage.verify|verify} messages.\n                 * @function encode\n                 * @memberof syft_proto.messaging.v1.WorkerCommandMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.IWorkerCommandMessage} message WorkerCommandMessage message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                WorkerCommandMessage.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.command_name != null && message.hasOwnProperty(\"command_name\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.command_name);\n                    if (message.args != null && message.args.length)\n                        for (var i = 0; i < message.args.length; ++i)\n                            $root.syft_proto.types.syft.v1.Arg.encode(message.args[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified WorkerCommandMessage message, length delimited. Does not implicitly {@link syft_proto.messaging.v1.WorkerCommandMessage.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof syft_proto.messaging.v1.WorkerCommandMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.IWorkerCommandMessage} message WorkerCommandMessage message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                WorkerCommandMessage.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a WorkerCommandMessage message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof syft_proto.messaging.v1.WorkerCommandMessage\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {syft_proto.messaging.v1.WorkerCommandMessage} WorkerCommandMessage\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                WorkerCommandMessage.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.messaging.v1.WorkerCommandMessage();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.command_name = reader.string();\n                            break;\n                        case 2:\n                            if (!(message.args && message.args.length))\n                                message.args = [];\n                            message.args.push($root.syft_proto.types.syft.v1.Arg.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a WorkerCommandMessage message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof syft_proto.messaging.v1.WorkerCommandMessage\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {syft_proto.messaging.v1.WorkerCommandMessage} WorkerCommandMessage\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                WorkerCommandMessage.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a WorkerCommandMessage message.\n                 * @function verify\n                 * @memberof syft_proto.messaging.v1.WorkerCommandMessage\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                WorkerCommandMessage.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.command_name != null && message.hasOwnProperty(\"command_name\"))\n                        if (!$util.isString(message.command_name))\n                            return \"command_name: string expected\";\n                    if (message.args != null && message.hasOwnProperty(\"args\")) {\n                        if (!Array.isArray(message.args))\n                            return \"args: array expected\";\n                        for (var i = 0; i < message.args.length; ++i) {\n                            var error = $root.syft_proto.types.syft.v1.Arg.verify(message.args[i]);\n                            if (error)\n                                return \"args.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a WorkerCommandMessage message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof syft_proto.messaging.v1.WorkerCommandMessage\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {syft_proto.messaging.v1.WorkerCommandMessage} WorkerCommandMessage\n                 */\n                WorkerCommandMessage.fromObject = function fromObject(object) {\n                    if (object instanceof $root.syft_proto.messaging.v1.WorkerCommandMessage)\n                        return object;\n                    var message = new $root.syft_proto.messaging.v1.WorkerCommandMessage();\n                    if (object.command_name != null)\n                        message.command_name = String(object.command_name);\n                    if (object.args) {\n                        if (!Array.isArray(object.args))\n                            throw TypeError(\".syft_proto.messaging.v1.WorkerCommandMessage.args: array expected\");\n                        message.args = [];\n                        for (var i = 0; i < object.args.length; ++i) {\n                            if (typeof object.args[i] !== \"object\")\n                                throw TypeError(\".syft_proto.messaging.v1.WorkerCommandMessage.args: object expected\");\n                            message.args[i] = $root.syft_proto.types.syft.v1.Arg.fromObject(object.args[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a WorkerCommandMessage message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof syft_proto.messaging.v1.WorkerCommandMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.WorkerCommandMessage} message WorkerCommandMessage\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                WorkerCommandMessage.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.args = [];\n                    if (options.defaults)\n                        object.command_name = \"\";\n                    if (message.command_name != null && message.hasOwnProperty(\"command_name\"))\n                        object.command_name = message.command_name;\n                    if (message.args && message.args.length) {\n                        object.args = [];\n                        for (var j = 0; j < message.args.length; ++j)\n                            object.args[j] = $root.syft_proto.types.syft.v1.Arg.toObject(message.args[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this WorkerCommandMessage to JSON.\n                 * @function toJSON\n                 * @memberof syft_proto.messaging.v1.WorkerCommandMessage\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                WorkerCommandMessage.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return WorkerCommandMessage;\n            })();\n\n            v1.SearchMessage = (function() {\n\n                /**\n                 * Properties of a SearchMessage.\n                 * @memberof syft_proto.messaging.v1\n                 * @interface ISearchMessage\n                 * @property {Array.<syft_proto.types.syft.v1.IId>|null} [query] SearchMessage query\n                 */\n\n                /**\n                 * Constructs a new SearchMessage.\n                 * @memberof syft_proto.messaging.v1\n                 * @classdesc Represents a SearchMessage.\n                 * @implements ISearchMessage\n                 * @constructor\n                 * @param {syft_proto.messaging.v1.ISearchMessage=} [properties] Properties to set\n                 */\n                function SearchMessage(properties) {\n                    this.query = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * SearchMessage query.\n                 * @member {Array.<syft_proto.types.syft.v1.IId>} query\n                 * @memberof syft_proto.messaging.v1.SearchMessage\n                 * @instance\n                 */\n                SearchMessage.prototype.query = $util.emptyArray;\n\n                /**\n                 * Creates a new SearchMessage instance using the specified properties.\n                 * @function create\n                 * @memberof syft_proto.messaging.v1.SearchMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.ISearchMessage=} [properties] Properties to set\n                 * @returns {syft_proto.messaging.v1.SearchMessage} SearchMessage instance\n                 */\n                SearchMessage.create = function create(properties) {\n                    return new SearchMessage(properties);\n                };\n\n                /**\n                 * Encodes the specified SearchMessage message. Does not implicitly {@link syft_proto.messaging.v1.SearchMessage.verify|verify} messages.\n                 * @function encode\n                 * @memberof syft_proto.messaging.v1.SearchMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.ISearchMessage} message SearchMessage message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SearchMessage.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.query != null && message.query.length)\n                        for (var i = 0; i < message.query.length; ++i)\n                            $root.syft_proto.types.syft.v1.Id.encode(message.query[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified SearchMessage message, length delimited. Does not implicitly {@link syft_proto.messaging.v1.SearchMessage.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof syft_proto.messaging.v1.SearchMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.ISearchMessage} message SearchMessage message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                SearchMessage.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a SearchMessage message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof syft_proto.messaging.v1.SearchMessage\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {syft_proto.messaging.v1.SearchMessage} SearchMessage\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SearchMessage.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.syft_proto.messaging.v1.SearchMessage();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.query && message.query.length))\n                                message.query = [];\n                            message.query.push($root.syft_proto.types.syft.v1.Id.decode(reader, reader.uint32()));\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a SearchMessage message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof syft_proto.messaging.v1.SearchMessage\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {syft_proto.messaging.v1.SearchMessage} SearchMessage\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                SearchMessage.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a SearchMessage message.\n                 * @function verify\n                 * @memberof syft_proto.messaging.v1.SearchMessage\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                SearchMessage.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.query != null && message.hasOwnProperty(\"query\")) {\n                        if (!Array.isArray(message.query))\n                            return \"query: array expected\";\n                        for (var i = 0; i < message.query.length; ++i) {\n                            var error = $root.syft_proto.types.syft.v1.Id.verify(message.query[i]);\n                            if (error)\n                                return \"query.\" + error;\n                        }\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a SearchMessage message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof syft_proto.messaging.v1.SearchMessage\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {syft_proto.messaging.v1.SearchMessage} SearchMessage\n                 */\n                SearchMessage.fromObject = function fromObject(object) {\n                    if (object instanceof $root.syft_proto.messaging.v1.SearchMessage)\n                        return object;\n                    var message = new $root.syft_proto.messaging.v1.SearchMessage();\n                    if (object.query) {\n                        if (!Array.isArray(object.query))\n                            throw TypeError(\".syft_proto.messaging.v1.SearchMessage.query: array expected\");\n                        message.query = [];\n                        for (var i = 0; i < object.query.length; ++i) {\n                            if (typeof object.query[i] !== \"object\")\n                                throw TypeError(\".syft_proto.messaging.v1.SearchMessage.query: object expected\");\n                            message.query[i] = $root.syft_proto.types.syft.v1.Id.fromObject(object.query[i]);\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a SearchMessage message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof syft_proto.messaging.v1.SearchMessage\n                 * @static\n                 * @param {syft_proto.messaging.v1.SearchMessage} message SearchMessage\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                SearchMessage.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.query = [];\n                    if (message.query && message.query.length) {\n                        object.query = [];\n                        for (var j = 0; j < message.query.length; ++j)\n                            object.query[j] = $root.syft_proto.types.syft.v1.Id.toObject(message.query[j], options);\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this SearchMessage to JSON.\n                 * @function toJSON\n                 * @memberof syft_proto.messaging.v1.SearchMessage\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                SearchMessage.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return SearchMessage;\n            })();\n\n            return v1;\n        })();\n\n        return messaging;\n    })();\n\n    return syft_proto;\n})();\n\n$root.google = (function() {\n\n    /**\n     * Namespace google.\n     * @exports google\n     * @namespace\n     */\n    var google = {};\n\n    google.protobuf = (function() {\n\n        /**\n         * Namespace protobuf.\n         * @memberof google\n         * @namespace\n         */\n        var protobuf = {};\n\n        protobuf.Empty = (function() {\n\n            /**\n             * Properties of an Empty.\n             * @memberof google.protobuf\n             * @interface IEmpty\n             */\n\n            /**\n             * Constructs a new Empty.\n             * @memberof google.protobuf\n             * @classdesc Represents an Empty.\n             * @implements IEmpty\n             * @constructor\n             * @param {google.protobuf.IEmpty=} [properties] Properties to set\n             */\n            function Empty(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Creates a new Empty instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.Empty\n             * @static\n             * @param {google.protobuf.IEmpty=} [properties] Properties to set\n             * @returns {google.protobuf.Empty} Empty instance\n             */\n            Empty.create = function create(properties) {\n                return new Empty(properties);\n            };\n\n            /**\n             * Encodes the specified Empty message. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.Empty\n             * @static\n             * @param {google.protobuf.IEmpty} message Empty message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Empty.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Empty message, length delimited. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.Empty\n             * @static\n             * @param {google.protobuf.IEmpty} message Empty message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Empty.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an Empty message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.Empty\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.Empty} Empty\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Empty.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Empty();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an Empty message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.Empty\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.Empty} Empty\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Empty.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an Empty message.\n             * @function verify\n             * @memberof google.protobuf.Empty\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Empty.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                return null;\n            };\n\n            /**\n             * Creates an Empty message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof google.protobuf.Empty\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {google.protobuf.Empty} Empty\n             */\n            Empty.fromObject = function fromObject(object) {\n                if (object instanceof $root.google.protobuf.Empty)\n                    return object;\n                return new $root.google.protobuf.Empty();\n            };\n\n            /**\n             * Creates a plain object from an Empty message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.Empty\n             * @static\n             * @param {google.protobuf.Empty} message Empty\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Empty.toObject = function toObject() {\n                return {};\n            };\n\n            /**\n             * Converts this Empty to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.Empty\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Empty.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Empty;\n        })();\n\n        return protobuf;\n    })();\n\n    return google;\n})();\n\nmodule.exports = $root;\n","'use strict';\r\nconst proto_info = require('../proto.json');\r\nexports.proto_info = proto_info;\r\n\r\nconst root = require('./protobuf');\r\nexports.protobuf = root;\r\n","import { getPbId } from '../protobuf';\n\n/**\n * Protocol stores a squence of actions. A Protocol's sequence of actions can\n * be sent to remote workers while the Protocol keeps a reference to the actions.\n * This way, to operate on remote input, only a single message with references\n * of the Protocol as well as the pointers is required for a worker to perform\n * the actions.\n *\n * Protocol contains a mix of ComputationActions and CommunicationActions.\n * Therefore, Protocol can act as a cross-worker and is different from Plan, which\n * contains pure mathematical operations.\n *\n * Note: Protocol is currently not used in syft.js.\n */\nexport default class Protocol {\n  /**\n   * @param {number} id - Id of the PointerTensor.\n   * @param {Array.<string>} tags - Tags for Protocol.\n   * @param {string} description - Description for Protocol.\n   * @param {Array.<Plan>} planAssigments - Array of Plans that Protocol should execute.\n   * @param {*} workersResolved\n   */\n  constructor(id, tags, description, planAssigments, workersResolved) {\n    this.id = id;\n    this.tags = tags;\n    this.description = description;\n    this.plans = planAssigments;\n    this.workersResolved = workersResolved;\n  }\n\n  /**\n   * Reconstructs a Protocol object from the protobuf message.\n   * Note that this method might take a worker-specific argument in the future.\n   *\n   * @static\n   * @param {*} worker - Reserved placeholder for worker-specific arguments.\n   * @param {protobuf.syft_proto.execution.v1.Protocol} pb - Protobuf object for Protocol.\n   * @returns {Protocol}\n   */\n  static unbufferize(worker, pb) {\n    const planAssignments = [];\n    if (pb.plan_assignments) {\n      pb.plan_assignments.forEach((item) => {\n        planAssignments.push([getPbId(item.worker_id), getPbId(item.plan_id)]);\n      });\n    }\n    return new Protocol(\n      getPbId(pb.id),\n      pb.tags,\n      pb.description,\n      planAssignments,\n      pb.workers_resolved\n    );\n  }\n}\n","import { getPbId, unbufferize } from '../protobuf';\n\n/**\n * Plan stores a sequence of actions (ComputationAction) in its role.\n * A worker is assigned plans and executes the actions stored in the plans.\n */\nexport class Plan {\n  /**\n   * @hideconstructor\n   * @param {string} id - Id of the Plan.\n   * @param {string} name - Name of the Plan.\n   * @param {Array.<Role>} [role=[]] Array of Roles.\n   * @param {Array.<string>} [tags=[]] - Tags for Plan.\n   * @param {string|null} [description=null] Description for Plan.\n   */\n  constructor(id, name, role = [], tags = [], description = null) {\n    this.id = id;\n    this.name = name;\n    this.role = role;\n    this.tags = tags;\n    this.description = description;\n  }\n\n  /**\n   * Reconstructs a Plan object from the protobuf message.\n   * Note that this method take a worker-specific argument in the future.\n   * @private\n   * @param {*} worker - Reserved placeholder for worker-specific arguments.\n   * @param {protobuf.syft_proto.execution.v1.Plan} pb - Protobuf object for Role.\n   * @returns {Plan}\n   */\n  static unbufferize(worker, pb) {\n    const id = getPbId(pb.id);\n\n    return new Plan(\n      id,\n      pb.name,\n      unbufferize(worker, pb.role),\n      pb.tags,\n      pb.description\n    );\n  }\n\n  /**\n   * Executes the Plan and returns its output.\n   *\n   * The order, type and number of arguments must match to arguments defined in the PySyft Plan.\n   *\n   * @param {Syft} worker\n   * @param {...(tf.Tensor|number)} data\n   * @returns {Promise<Array.<tf.Tensor>>}\n   */\n  async execute(worker, ...data) {\n    return this.role.execute(worker, ...data);\n  }\n}\n\n/**\n * Object that describes Plan input.\n * Parameters known to `PlanTrainer`\n * (like training data, model parameters, batch size, etc.)\n * are mapped into Plan arguments according to this object.\n *\n * @param {string} type - Input argument type.\n * @param {string} [name] - Optional argument name.\n * @param {number} [index] - Optional argument index (to take from array).\n * @param {*} [value] - Argument value.\n */\nexport class PlanInputSpec {\n  /**\n   * Represents training data (substituted with PlanTrainer's `data` batch)\n   * @constant\n   */\n  static TYPE_DATA = 'data';\n\n  /**\n   * Represents training targets aka labels (substituted with PlanTrainer's `target` batch)\n   * @constant\n   */\n  static TYPE_TARGET = 'target';\n\n  /**\n   * Represents batch size (substituted with PlanTrainer's `batchSize`).\n   * @constant\n   */\n  static TYPE_BATCH_SIZE = 'batchSize';\n\n  /**\n   * Represents parameter from client config configured in FL model, `name` argument is required (substituted with parameter from PlanTrainer's `clientConfig`).\n   * @constant\n   */\n  static TYPE_CLIENT_CONFIG_PARAM = 'clientConfigParam';\n\n  /**\n   * Represents any value, `value` argument is required.\n   * @constant\n   */\n  static TYPE_VALUE = 'value';\n\n  /**\n   * Represents model parameter (substituted with `SyftModel` contents).\n   * @constant\n   */\n  static TYPE_MODEL_PARAM = 'modelParam';\n\n  constructor(type, name = null, index = null, value = null) {\n    this.type = type;\n    this.name = name;\n    this.index = index;\n    this.value = value;\n  }\n\n  /**\n   * Creates list of Plan arguments according to specified `specs`.\n   *\n   * @private\n   * @param {[PlanInputSpec]} specs - Plan arguments specifications.\n   * @param {Object} data - Dictionary containing Plan arguments.\n   * @returns {[]}\n   */\n  static resolve(specs, data) {\n    const args = [];\n    for (const spec of specs) {\n      if (spec.type === this.TYPE_VALUE) {\n        args.push(spec.value);\n      } else if (spec.index !== null) {\n        args.push(data[spec.type][spec.index]);\n      } else if (spec.name !== null) {\n        args.push(data[spec.type][spec.name]);\n      } else if (spec.type === this.TYPE_CLIENT_CONFIG_PARAM) {\n        args.push(data[spec.type][spec.name]);\n      } else {\n        args.push(data[spec.type]);\n      }\n    }\n    return args;\n  }\n}\n\n/**\n * Object that describes Plan output.\n * Values returned from Plan\n * (like loss, accuracy, model parameters, etc.)\n * are mapped into `PlanTrainer`'s internal state according to this object.\n *\n * @param {string} type - Output variable type.\n * @param {string} [name] - Optional name.\n * @param {number} [index] - Optional index (to put into array).\n */\nexport class PlanOutputSpec {\n  /**\n   * Represents loss value (maps to PlanTrainer's loss).\n   * @constant\n   */\n  static TYPE_LOSS = 'loss';\n  /**\n   * Represents metric value, name is required (maps to PlanTrainer's metrics dictionary).\n   * @constant\n   */\n  static TYPE_METRIC = 'metric';\n  /**\n   * Represents model parameter (maps to `SyftModel` parameters)\n   * @constant\n   */\n  static TYPE_MODEL_PARAM = 'modelParam';\n\n  constructor(type, name = null, index = null) {\n    this.type = type;\n    this.name = name;\n    this.index = index;\n  }\n\n  /**\n   * Creates dictionary of Plan output values according to `specs`.\n   *\n   * @private\n   * @param {[PlanOutputSpec]} specs - Specifications of Plan output variables.\n   * @param {[*]} data - Plan output.\n   * @returns {Object}\n   */\n  static resolve(specs, data) {\n    const out = {};\n    let i = 0;\n    for (const spec of specs) {\n      if (spec.index !== null) {\n        if (typeof out[spec.type] === 'undefined') {\n          out[spec.type] = [];\n        }\n        out[spec.type][spec.index] = data[i];\n      } else if (spec.name !== null) {\n        if (typeof out[spec.type] === 'undefined') {\n          out[spec.type] = {};\n        }\n        out[spec.type][spec.name] = data[i];\n      } else {\n        out[spec.type] = data[i];\n      }\n      i++;\n    }\n    return out;\n  }\n}\n","import * as tf from '@tensorflow/tfjs-core';\n\n/**\n * ObjectRegistry stores a map of {id -> object} and a map of {id -> gc},\n * where gc denotes if the object of given id will be garbage collected.\n */\nexport default class ObjectRegistry {\n  /**\n   * @property {Object.<string, Object>} objects - a map of {id: object}\n   * @property {Object.<string, boolean>} gc - a map of {id: boolean} that determines if the object of id will be garbage collected\n   */\n  constructor() {\n    this.objects = {};\n    this.gc = {};\n  }\n\n  set(id, obj, gc = false) {\n    // Remove the current id and object in the objects map before replacing them\n    if (this.objects[id] instanceof tf.Tensor) {\n      this.objects[id].dispose();\n      delete this.objects[id];\n    }\n    this.objects[id] = obj;\n    this.gc[id] = gc;\n  }\n\n  setGc(id, gc) {\n    this.gc[id] = gc;\n  }\n\n  get(id) {\n    return this.objects[id];\n  }\n\n  has(id) {\n    return Object.hasOwnProperty.call(this.objects, id);\n  }\n\n  clear() {\n    for (let key of Object.keys(this.objects)) {\n      if (this.gc[key] && this.objects[key] instanceof tf.Tensor) {\n        this.objects[key].dispose();\n      }\n    }\n    this.objects = {};\n    this.gc = {};\n  }\n\n  /**\n   * Loads the objects from an existing ObjectRegistry and stores them in this.objects\n   * @param {ObjectRegistry} objectRegistry\n   */\n  load(objectRegistry) {\n    for (let key of Object.keys(objectRegistry.objects)) {\n      this.set(key, objectRegistry.get(key));\n    }\n  }\n}\n","import { getPbId, unbufferize } from '../protobuf';\nimport ObjectRegistry from '../object-registry';\nimport { NotEnoughArgsError } from '../_errors';\n\n/**\n * Role encapsulates a list of ComputationActions that are executed in a Plan.\n *\n * Concretely, a worker is assigned a Role, which includes actions that the\n * worker should perform.\n */\nexport class Role {\n  /**\n   * @param {string} id - Id of the Role.\n   * @param {Array.<ComputationAction>} [actions=[]] - Array of actions to be executed.\n   * @param {State} [state=null]\n   * @param {Object.<string,Placeholder>} [placeholders={}] - Array of Placeholders that contain tensors.\n   * @param {Array.<PlaceholderId>} [input_placeholder_ids=[]] - Array of PlaceholderIds for input values.\n   * @param {Array.<PlaceholderId>} [output_placeholder_ids=[]] - Array of PlaceholderIds for output values.\n   * @param {Array.<string>} [tags=[]] - Tags for Role.\n   * @param {string|null} [description=null] Description for Role.\n   */\n  constructor(\n    id,\n    actions = [],\n    state = null,\n    placeholders = {},\n    input_placeholder_ids = [],\n    output_placeholder_ids = [],\n    tags = [],\n    description = null\n  ) {\n    this.id = id;\n    this.actions = actions;\n    this.state = state;\n    this.placeholders = placeholders;\n    this.input_placeholder_ids = input_placeholder_ids;\n    this.output_placeholder_ids = output_placeholder_ids;\n    this.tags = tags;\n    this.description = description;\n  }\n\n  /**\n   * Reconstructs a Role object from the protobuf message.\n   * Note that this method might take a worker-specific argument in the future.\n   *\n   * @static\n   * @param {*} worker - Reserved placeholder for worker-specific arguments.\n   * @param {protobuf.syft_proto.execution.v1.Role} pb - Protobuf object for Role.\n   * @returns {Role}\n   */\n  static unbufferize(worker, pb) {\n    let placeholdersArray = unbufferize(worker, pb.placeholders);\n    let placeholders = {};\n    for (let ph of placeholdersArray) {\n      placeholders[ph.id] = ph;\n    }\n\n    return new Role(\n      getPbId(pb.id),\n      unbufferize(worker, pb.actions),\n      unbufferize(worker, pb.state),\n      placeholders,\n      pb.input_placeholder_ids.map(getPbId),\n      pb.output_placeholder_ids.map(getPbId),\n      pb.tags,\n      pb.description\n    );\n  }\n\n  /**\n   * @returns {Array.<Placeholder>} - Input Placeholders\n   */\n  getInputPlaceholders() {\n    return this.input_placeholder_ids.map((id) => this.placeholders[id]);\n  }\n\n  /**\n   * @returns {Array.<Placeholder>} - Output Placeholders\n   */\n  getOutputPlaceholders() {\n    return this.output_placeholder_ids.map((id) => this.placeholders[id]);\n  }\n\n  /**\n   * Executes the actions in the Role with a given worker.\n   * @param {Syft} worker\n   * @param {...(tf.Tensor)} data\n   * @returns {Promise<Array>}\n   */\n  async execute(worker, ...data) {\n    // Create local scope\n    const planScope = new ObjectRegistry();\n    planScope.load(worker.objects);\n\n    const inputPlaceholders = this.getInputPlaceholders(),\n      outputPlaceholders = this.getOutputPlaceholders(),\n      argsLength = inputPlaceholders.length;\n\n    // If the number of arguments supplied does not match the number of arguments required\n    if (data.length !== argsLength)\n      throw new NotEnoughArgsError(data.length, argsLength);\n\n    // Add each argument to local scope\n    data.forEach((datum, i) => {\n      planScope.set(inputPlaceholders[i].id, datum);\n    });\n\n    // Load state tensors to worker\n    if (this.state && this.state.tensors) {\n      this.state.placeholders.forEach((ph, idx) => {\n        planScope.set(ph.id, this.state.tensors[idx]);\n      });\n    }\n\n    // Execute the plan\n    for (const action of this.actions) {\n      // The result of the current operation\n      const result = await action.execute(planScope);\n\n      // Place the result of the current operation into this.objects at the 0th item in returnIds\n      // All intermediate tensors will be garbage collected by default\n      if (result) {\n        if (action.returnIds.length > 0) {\n          planScope.set(action.returnIds[0], result, true);\n        } else if (action.returnPlaceholderIds.length > 0) {\n          planScope.set(action.returnPlaceholderIds[0].id, result, true);\n        }\n      }\n    }\n\n    // Resolve all of the requested resultId's as specified by the Plan\n    const resolvedResultingTensors = [];\n    outputPlaceholders.forEach((placeholder) => {\n      resolvedResultingTensors.push(planScope.get(placeholder.id));\n      // Do not gc output tensors\n      planScope.setGc(placeholder.id, false);\n    });\n\n    // Clean up intermediate plan variables.\n    planScope.clear();\n\n    // Return resolved tensors to the worker\n    return resolvedResultingTensors;\n  }\n}\n","import { protobuf, unbufferize } from '../protobuf';\n\n/**\n * State stores a list of tensors. In Syft.JS, State is used to\n * serialize and store model weights.\n */\nexport class State {\n  /**\n   * @hideconstructor\n   * @param {Array.<Placeholder>} [placeholders=null] - Array of Placeholders.\n   * @param {Array.<TorchTensor>} [tensors=null] - Array of TorchTensors.\n   */\n  constructor(placeholders = null, tensors = null) {\n    this.placeholders = placeholders;\n    this.tensors = tensors;\n  }\n\n  /**\n   * Converts an Array of TorchTensor to tf.Tensor.\n   * @returns {Array.<tf.Tensor>}\n   */\n  getTfTensors() {\n    return this.tensors.map((t) => t.toTfTensor());\n  }\n\n  /**\n   * Reconstructs a State object from the protobuf message.\n   * Note that this method take a worker-specific argument in the future.\n   * @static\n   * @param {*} worker - Reserved placeholder for worker-specific arguments.\n   * @param {protobuf.syft_proto.execution.v1.State} pb - Protobuf object for State.\n   * @returns {State}\n   */\n  static unbufferize(worker, pb) {\n    const tensors = pb.tensors.map((stateTensor) => {\n      // unwrap StateTensor\n      return unbufferize(worker, stateTensor[stateTensor.tensor]);\n    });\n\n    return new State(unbufferize(worker, pb.placeholders), tensors);\n  }\n\n  /**\n   * Bufferizes the State object, its tensors and placeholders to\n   * a protobuf State object.\n   *\n   * Note that this method should take a worker-specific argument in the future.\n   * @param {*} worker - Reserved placeholder for worker-specific arguments.\n   * @returns {protobuf.syft_proto.execution.v1.State}\n   */\n  bufferize(worker) {\n    const tensorsPb = this.tensors.map((tensor) =>\n      protobuf.syft_proto.execution.v1.StateTensor.create({\n        torch_tensor: tensor.bufferize(worker),\n      })\n    );\n    const placeholdersPb = this.placeholders.map((ph) => ph.bufferize());\n    return protobuf.syft_proto.execution.v1.State.create({\n      placeholders: placeholdersPb,\n      tensors: tensorsPb,\n    });\n  }\n}\n","import { unbufferize } from '../protobuf';\nimport Logger from '../logger';\n\n/**\n * Message enables comunicating between PySyft and Syft workers.\n * Message is the parent class to all other Message types.\n *\n * All Message types are currently are currently not in use.\n *\n * @property {*} contents - For storing unbufferized message data.\n * @property {Logger} logger - For logging information.\n */\nexport class Message {\n  constructor(contents) {\n    if (contents) {\n      this.contents = contents;\n    }\n    this.logger = new Logger();\n  }\n}\n\n/**\n * ObjectMessage is used to send an object as message between PySyft and Syft workers.\n * @extends Message\n */\nexport class ObjectMessage extends Message {\n  constructor(contents) {\n    super(contents);\n  }\n\n  /**\n   * Unbufferizes and maps data from protobuf object to JS object.\n   *\n   * @static\n   * @param {*} worker - Reserved placeholder for worker-specific arguments when messaging with PySyft.\n   * @param {protobuf.syft_proto.messaging.v1.ObjectMessage} pb - Protobuf object.\n   * @returns {ObjectMessage}\n   */\n  static unbufferize(worker, pb) {\n    const tensor = unbufferize(worker, pb.tensor);\n    return new ObjectMessage(tensor);\n  }\n}\n\n// TODO when types will be availbale in protobuf\n\n/*\nexport class ObjectRequestMessage extends Message {\n  constructor(contents) {\n    super(contents);\n  }\n}\n\nexport class IsNoneMessage extends Message {\n  constructor(contents) {\n    super(contents);\n  }\n}\n\nexport class GetShapeMessage extends Message {\n  constructor(contents) {\n    super(contents);\n  }\n}\n\nexport class ForceObjectDeleteMessage extends Message {\n  constructor(contents) {\n    super(contents);\n  }\n}\n\nexport class SearchMessage extends Message {\n  constructor(contents) {\n    super(contents);\n  }\n}\n\nexport class PlanCommandMessage extends Message {\n  constructor(commandName, message) {\n    super();\n\n    this.commandName = commandName;\n    this.message = message;\n  }\n}\n*/\n","import { getPbId, unbufferize, protobuf, pbId } from '../protobuf';\nimport * as tf from '@tensorflow/tfjs-core';\n\nexport class TorchTensor {\n  constructor(\n    id,\n    contents,\n    shape,\n    dtype,\n    chain = null,\n    gradChain = null,\n    tags = [],\n    description = null\n  ) {\n    this.id = id;\n    this.shape = shape;\n    this.dtype = dtype;\n    this.contents = contents;\n    this.chain = chain;\n    this.gradChain = gradChain;\n    this.tags = tags;\n    this.description = description;\n    this._tfTensor = null;\n  }\n\n  toTfTensor() {\n    if (!this._tfTensor) {\n      this._tfTensor = tf.tensor(this.contents, this.shape, this.dtype);\n    }\n    return this._tfTensor;\n  }\n\n  static unbufferize(worker, pb) {\n    if (\n      pb.serializer !==\n      protobuf.syft_proto.types.torch.v1.TorchTensor.Serializer.SERIALIZER_ALL\n    ) {\n      throw new Error(\n        `Tensor serializer ${pb.serializer} is not supported in syft.js`\n      );\n    }\n\n    // unwrap TensorData\n    const tensorData = pb.contents_data;\n    const dtype = tensorData.dtype;\n    const shape = tensorData.shape.dims;\n    const contents = tensorData[`contents_${dtype}`];\n\n    return new TorchTensor(\n      getPbId(pb.id),\n      contents,\n      shape,\n      dtype,\n      unbufferize(worker, pb.chain),\n      unbufferize(worker, pb.grad_chain),\n      pb.tags,\n      pb.description\n    );\n  }\n\n  bufferize(/* worker */) {\n    const tensorData = {\n      shape: protobuf.syft_proto.types.torch.v1.Size.create({\n        dims: this.shape,\n      }),\n      dtype: this.dtype,\n    };\n    tensorData[`contents_${this.dtype}`] = this.contents;\n    const pbTensorData = protobuf.syft_proto.types.torch.v1.TensorData.create(\n      tensorData\n    );\n    return protobuf.syft_proto.types.torch.v1.TorchTensor.create({\n      id: pbId(this.id),\n      serializer:\n        protobuf.syft_proto.types.torch.v1.TorchTensor.Serializer\n          .SERIALIZER_ALL,\n      contents_data: pbTensorData,\n      tags: this.tags,\n      description: this.description,\n    });\n  }\n\n  /**\n   * Returns new `TorchTensor` created from `tf.Tensor`.\n   *\n   * @param {tf.Tensor} tensor - Tensor.\n   * @return {Promise<TorchTensor>}\n   */\n  static async fromTfTensor(tensor) {\n    const flat = tensor.flatten();\n    const array = await flat.array();\n    flat.dispose();\n    const t = new TorchTensor(tensor.id, array, tensor.shape, tensor.dtype);\n    t._tfTensor = tensor;\n    return t;\n  }\n}\n\nexport class TorchSize {\n  constructor(size) {\n    this.size = size;\n  }\n}\n\nexport class TorchParameter {\n  constructor(id, tensor, requiresGrad, grad) {\n    this.id = id;\n    this.tensor = tensor;\n    this.requiresGrad = requiresGrad;\n    this.grad = grad;\n  }\n\n  static unbufferize(worker, pb) {\n    return new TorchParameter(\n      getPbId(pb.id),\n      unbufferize(worker, pb.tensor),\n      pb.requires_grad,\n      unbufferize(worker, pb.grad)\n    );\n  }\n\n  toTfTensor() {\n    return this.tensor.toTfTensor();\n  }\n}\n","import { protobuf, getPbId, pbId } from '../protobuf';\n\n/**\n * PlaceholderId identifies which Placeholder tensors should be used as\n * inputs and outputs of Actions inside a Plan.\n *\n * @property {string} id - Unbufferized, unique id for a Placeholder object.\n */\nexport class PlaceholderId {\n  constructor(id) {\n    this.id = id;\n  }\n\n  /**\n   * Reconstructs a PlaceholderId object from the protobuf message.\n   * Note that this method might take a worker-specific argument in the future.\n   *\n   * @static\n   * @param {*} worker - Reserved placeholder for worker-specific arguments.\n   * @param {protobuf.syft_proto.types.syft.v1.Id} pb - Protobuf object for Id.\n   * @returns {PlaceholderId}\n   */\n  static unbufferize(worker, pb) {\n    return new PlaceholderId(getPbId(pb.id));\n  }\n\n  /**\n   * Save the Id string into a protobuf PlaceholderId message.\n   * Note that this method might take a worker-specific argument in the future.\n   *\n   * @returns {protobuf.syft_proto.execution.v1.PlaceholderId}\n   */\n  bufferize(/* worker */) {\n    return protobuf.syft_proto.execution.v1.PlaceholderId.create({\n      id: pbId(this.id),\n    });\n  }\n}\n\n/**\n * Placeholder acts as a tensor. It is replaced by actual tensors after actions\n * are acted on it and can be used to trace the actions from a Plan. A Placeholder\n * has a PlaceholderId that uniquely identifies itself.\n *\n * @property {string} id - Unbufferized Id object.\n */\nexport class Placeholder {\n  constructor(id, tags = [], description = null, expected_shape = null) {\n    this.id = id;\n    this.tags = tags;\n    this.description = description;\n    this.expected_shape = expected_shape;\n  }\n\n  /**\n   * Reconstructs a Placeholder object from the protobuf message.\n   * Note that this method might take a worker-specific argument in the future.\n   *\n   * @static\n   * @param {*} worker - Reserved placeholder for worker-specific arguments.\n   * @param {protobuf.syft_proto.execution.v1.Placeholder} pb - Protobuf object for Placeholder.\n   * @returns {Placeholder}\n   */\n  static unbufferize(worker, pb) {\n    let expected_shape = null;\n    if (\n      pb.expected_shape &&\n      Array.isArray(pb.expected_shape.dims) &&\n      pb.expected_shape.dims.length > 0\n    ) {\n      // Unwrap Shape\n      expected_shape = pb.expected_shape.dims;\n    }\n\n    return new Placeholder(\n      getPbId(pb.id),\n      pb.tags || [],\n      pb.description,\n      expected_shape\n    );\n  }\n\n  /**\n   * Bufferizes the Placeholder object to a protobuf Placeholder object.\n   * Note that this method should take a worker-specific argument in the future.\n   *\n   * @returns {protobuf.syft_proto.execution.v1.Placeholder}\n   */\n  bufferize(/* worker */) {\n    return protobuf.syft_proto.execution.v1.Placeholder.create({\n      id: pbId(this.id),\n      tags: this.tags,\n      description: this.description,\n      expected_shape: protobuf.syft_proto.types.syft.v1.Shape.create(\n        this.expected_shape\n      ),\n    });\n  }\n}\n","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","/**\n * PointerTensor points to a remote tensor and forwards all API calls\n * to its remote tensor. A PointerTensor mimic the entire API of a normal\n * tensor, but instead of computing a tensor function (such as addition,\n * subtraction, etc.) locally, PointerTensor forwards the computation to\n * a remote machine as specified by self.locationId.\n *\n * Note that PointerTensor is currently not supported. Support for communication\n * between workers comes from Protocol.\n */\nexport default class PointerTensor {\n  /**\n   * @param {number} id - Id of the PointerTensor.\n   * @param {number} idAtLocation - Id of the remote tensor being pointed at.\n   * @param {string} locationId - Id of the location where the remote tensor resides.\n   * @param {string} pointToAttr - String value to specify if the PointerTensor should point to an attribute of the remote tensor such as .child or .grad.\n   * @param {Array.<number>} shape - Size of the tensor the pointer points to.\n   * @param {boolean} garbageCollectData - If True, delete the remote tensor when the PointerTensor is removed.\n   */\n  constructor(\n    id,\n    idAtLocation,\n    locationId,\n    pointToAttr,\n    shape,\n    garbageCollectData\n  ) {\n    this.id = id;\n    this.idAtLocation = idAtLocation;\n    this.locationId = locationId;\n    this.pointToAttr = pointToAttr;\n    this.shape = shape;\n    this.garbageCollectData = garbageCollectData;\n  }\n}\n","import { unbufferize } from '../protobuf';\nimport PointerTensor from './pointer-tensor';\nimport { Placeholder, PlaceholderId } from './placeholder';\nimport * as tf from '@tensorflow/tfjs-core';\nimport { TorchParameter, TorchTensor } from './torch';\nimport { CannotFindCommandError, MissingVariableError } from '../_errors';\n\n/**\n * ComputationAction describes mathematical operations performed on tensors.\n *\n * @param {string} command - The name of the method to be invoked (e.g. \"torch.abs\").\n * @param {string|PointerTensor|PlaceholderId|TorchTensor} target - The object to invoke the method on.\n * @param {*} args - The arguments to the method call.\n * @param {Object} kwargs - The keyword arguments to the method call.\n * @param {Array.<string>} returnIds - List of ids for action results.\n * @param {Array.<PlaceholderId>} returnPlaceholderIds - List of PlaceholderIds returned from the action.\n */\nexport class ComputationAction {\n  constructor(command, target, args, kwargs, returnIds, returnPlaceholderIds) {\n    this.command = command;\n    this.target = target;\n    this.args = args;\n    this.kwargs = kwargs;\n    this.returnIds = returnIds;\n    this.returnPlaceholderIds = returnPlaceholderIds;\n  }\n\n  /**\n   * Reconstructs a ComputationAction object from a protobuf message.\n   * Note that this method might take a worker-specific argument in the future.\n   *\n   * @static\n   * @param {*} worker - Reserved placeholder for worker-specific arguments.\n   * @param {protobuf.syft_proto.execution.v1.ComputationAction} pb - Protobuf object for ComputationAction.\n   * @returns {ComputationAction}\n   */\n  static unbufferize(worker, pb) {\n    return new ComputationAction(\n      pb.command,\n      unbufferize(worker, pb[pb.target]),\n      unbufferize(worker, pb.args),\n      unbufferize(worker, pb.kwargs),\n      unbufferize(worker, pb.return_ids),\n      unbufferize(worker, pb.return_placeholder_ids)\n    );\n  }\n\n  /**\n   * Execute the ComputationAction with given worker.\n   * @param {ObjectRegistry} scope - Local scope provided by the Role on executing the Plan and its actions.\n   * @returns {Promise<Array.<tf.Tensor|number>>}\n   */\n  async execute(scope) {\n    // Helper function to determine if all PointerTensors/Placeholders in \"this.args\" also exist as tensors in \"objects\"\n    const haveValuesForAllArgs = (args) => {\n      let enoughInfo = true;\n\n      args.forEach((arg) => {\n        if (\n          (arg instanceof PointerTensor && !scope.has(arg.idAtLocation)) ||\n          (arg instanceof Placeholder && !scope.has(arg.id)) ||\n          (arg instanceof PlaceholderId && !scope.has(arg.id))\n        ) {\n          enoughInfo = false;\n        }\n      });\n\n      return enoughInfo;\n    };\n\n    const toTFTensor = (tensor) => {\n      if (tensor instanceof tf.Tensor) {\n        return tensor;\n      } else if (tensor instanceof TorchTensor) {\n        return tensor.toTfTensor();\n      } else if (tensor instanceof TorchParameter) {\n        return tensor.tensor.toTfTensor();\n      } else if (typeof tensor === 'number') {\n        return tensor;\n      }\n      return null;\n    };\n\n    const getTensorByRef = (reference) => {\n      let tensor = null;\n      if (reference instanceof PlaceholderId) {\n        tensor = scope.get(reference.id);\n      } else if (reference instanceof Placeholder) {\n        tensor = scope.get(reference.id);\n      } else if (reference instanceof PointerTensor) {\n        tensor = scope.get(reference.idAtLocation);\n      }\n      tensor = toTFTensor(tensor);\n      return tensor;\n    };\n\n    // Helper function to get all operable tensors from PointerTensors in \"this.args\"\n    const pullTensorsFromArgs = (args) => {\n      const resolvedArgs = [];\n\n      args.forEach((arg) => {\n        const tensorByRef = getTensorByRef(arg);\n        if (tensorByRef) {\n          resolvedArgs.push(toTFTensor(tensorByRef));\n        } else {\n          // Try to convert to tensor\n          const tensor = toTFTensor(arg);\n          if (tensor !== null) {\n            resolvedArgs.push(toTFTensor(arg));\n          } else {\n            // Keep as is.\n            resolvedArgs.push(arg);\n          }\n        }\n      });\n\n      return resolvedArgs;\n    };\n\n    const args = this.args;\n    let self = null;\n\n    if (this.target) {\n      // Resolve \"self\" if it's present\n      self = getTensorByRef(this.target);\n      if (!self) {\n        throw new MissingVariableError();\n      }\n    }\n\n    if (!haveValuesForAllArgs(args)) {\n      throw new MissingVariableError();\n    }\n\n    const resolvedArgs = pullTensorsFromArgs(args);\n    const functionName = this.command.split('.').pop();\n\n    // If target exists, check if target contains the specific function and return computed results\n    if (self) {\n      if (!(functionName in self)) {\n        throw new CannotFindCommandError(`tensor.${functionName}`);\n      } else {\n        return self[functionName](...resolvedArgs);\n      }\n    }\n\n    // Else, check if tfjs contains the specific function and return computed results\n    if (!(functionName in tf)) {\n      throw new CannotFindCommandError(functionName);\n    } else {\n      return tf[functionName](...resolvedArgs, ...Object.values(this.kwargs));\n    }\n  }\n}\n","import { protobuf } from 'syft-proto';\nimport Protocol from '../types/protocol';\nimport { Plan } from '../types/plan';\nimport { Role } from '../types/role';\nimport { State } from '../types/state';\nimport { ObjectMessage } from '../types/message';\nimport { TorchParameter, TorchTensor } from '../types/torch';\nimport { Placeholder, PlaceholderId } from '../types/placeholder';\nimport { ComputationAction } from '../types/computation-action';\n\nlet PB_CLASS_MAP, PB_TO_UNBUFFERIZER;\n\n// Because of cyclic dependencies between Protocol/etc modules and protobuf module\n// Protocol/etc classes are undefined at the moment when this module is imported\nexport const initMappings = () => {\n  PB_CLASS_MAP = [\n    [Protocol, protobuf.syft_proto.execution.v1.Protocol],\n    [Plan, protobuf.syft_proto.execution.v1.Plan],\n    [Role, protobuf.syft_proto.execution.v1.Role],\n    [State, protobuf.syft_proto.execution.v1.State],\n    [ComputationAction, protobuf.syft_proto.execution.v1.ComputationAction],\n    [Placeholder, protobuf.syft_proto.execution.v1.Placeholder],\n    [PlaceholderId, protobuf.syft_proto.execution.v1.PlaceholderId],\n    [ObjectMessage, protobuf.syft_proto.messaging.v1.ObjectMessage],\n    [TorchTensor, protobuf.syft_proto.types.torch.v1.TorchTensor],\n    [TorchParameter, protobuf.syft_proto.types.torch.v1.Parameter],\n  ];\n\n  PB_TO_UNBUFFERIZER = PB_CLASS_MAP.reduce((map, item) => {\n    map[item[1]] = item[0].unbufferize;\n    return map;\n  }, {});\n};\n\nexport { PB_CLASS_MAP, PB_TO_UNBUFFERIZER };\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","import { NoDetailerError, ProtobufUnserializeFailedError } from '../_errors';\nimport { initMappings, PB_TO_UNBUFFERIZER } from './mapping';\nimport { protobuf } from 'syft-proto';\nimport Long from 'long';\nimport { base64Decode } from '../utils/base64';\n\nexport { protobuf };\n\nexport const unbufferize = (worker, pbObj) => {\n  if (!PB_TO_UNBUFFERIZER) {\n    initMappings();\n  }\n\n  if (\n    pbObj === undefined ||\n    pbObj === null ||\n    ['number', 'string', 'boolean'].includes(typeof pbObj)\n  ) {\n    return pbObj;\n  }\n\n  const pbType = pbObj.constructor;\n\n  // automatically unbufferize repeated fields\n  if (Array.isArray(pbObj)) {\n    return pbObj.map((item) => unbufferize(worker, item));\n  }\n\n  // automatically unbufferize map fields\n  if (pbType.name === 'Object') {\n    let res = {};\n    for (let key of Object.keys(pbObj)) {\n      res[key] = unbufferize(worker, pbObj[key]);\n    }\n    return res;\n  }\n\n  // automatically unbufferize Id\n  if (pbType === protobuf.syft_proto.types.syft.v1.Id) {\n    return getPbId(pbObj);\n  }\n\n  // automatically unwrap Arg\n  if (pbType === protobuf.syft_proto.types.syft.v1.Arg) {\n    if (pbObj.arg === 'arg_int' && pbObj[pbObj.arg] instanceof Long) {\n      // protobuf int64 is represented as Long\n      return pbObj[pbObj.arg].toNumber();\n    } else {\n      return unbufferize(worker, pbObj[pbObj.arg]);\n    }\n  }\n\n  // automatically unwrap ArgList\n  if (pbType === protobuf.syft_proto.types.syft.v1.ArgList) {\n    return unbufferize(worker, pbObj.args);\n  }\n\n  const unbufferizer = PB_TO_UNBUFFERIZER[pbType];\n  if (typeof unbufferizer === 'undefined') {\n    throw new NoDetailerError(pbType.name);\n  }\n  return unbufferizer(worker, pbObj);\n};\n\n/**\n * Converts binary in the form of ArrayBuffer or base64 string to syft class\n * @param worker\n * @param bin\n * @param pbType\n * @returns {Object}\n */\nexport const unserialize = (worker, bin, pbType) => {\n  const buff =\n    typeof bin === 'string'\n      ? base64Decode(bin)\n      : bin instanceof ArrayBuffer\n      ? new Uint8Array(bin)\n      : bin;\n  let pbObj;\n  try {\n    pbObj = pbType.decode(buff);\n  } catch (e) {\n    throw new ProtobufUnserializeFailedError(pbType.name, e.message);\n  }\n  return unbufferize(worker, pbObj);\n};\n\n/**\n * Converts syft class to protobuf-serialized binary\n * @param worker\n * @param obj\n * @returns {ArrayBuffer}\n */\nexport const serialize = (worker, obj) => {\n  const pbObj = obj.bufferize(worker);\n  const pbType = pbObj.constructor;\n  const err = pbType.verify(pbObj);\n  if (err) {\n    throw new Error(err);\n  }\n  const bin = pbType.encode(pbObj).finish();\n  return new Uint8Array(bin).buffer;\n};\n\nexport const getPbId = (field) => {\n  // convert int64 to string\n  return field[field.id].toString();\n};\n\nexport const pbId = (value) => {\n  if (typeof value === 'number') {\n    return protobuf.syft_proto.types.syft.v1.Id.create({ id_int: value });\n  } else if (typeof value === 'string') {\n    return protobuf.syft_proto.types.syft.v1.Id.create({ id_str: value });\n  }\n};\n","import { unserialize, protobuf, serialize } from './protobuf';\nimport { State } from './types/state';\nimport { TorchTensor } from './types/torch';\nimport { Placeholder } from './types/placeholder';\nimport { ModelLoadFailedError } from './_errors';\n\n/**\n * Model parameters as stored in the PyGrid.\n *\n * @property {[tf.Tensor]} params - Array of Model parameters.\n */\nexport default class SyftModel {\n  /**\n   * @hideconstructor\n   * @param {Object} options\n   * @param {Syft} options.worker - Instance of Syft client.\n   * @param {ArrayBuffer} options.serializedModelParameters - Serialized Model parameters as returned by PyGrid.\n   * @param {[tf.Tensor]} options.modelParameters - Serialized Model parameters as returned by PyGrid.\n   */\n  constructor({\n    worker,\n    serializedModelParameters = null,\n    modelParameters = null,\n  }) {\n    this.worker = worker;\n    if (serializedModelParameters) {\n      // Convert model from binary and store model weights in the syft class State\n      try {\n        const state = unserialize(\n          worker,\n          serializedModelParameters,\n          protobuf.syft_proto.execution.v1.State\n        );\n        this.params = state.getTfTensors();\n      } catch (e) {\n        throw new ModelLoadFailedError(e.message);\n      }\n    }\n    if (modelParameters) {\n      this.params = modelParameters;\n    }\n  }\n\n  /**\n   * Returns model serialized to protobuf.\n   *\n   * @return {Promise<ArrayBuffer>}\n   */\n  async toProtobuf() {\n    const placeholders = [],\n      tensors = [];\n    for (let i = 0; i < this.params.length; i++) {\n      placeholders.push(new Placeholder(i, [`#${i}`, `#state-${i}`]));\n      tensors.push(await TorchTensor.fromTfTensor(this.params[i]));\n    }\n    const state = new State(placeholders, tensors);\n    return serialize(this.worker, state);\n  }\n\n  /**\n   * Calculates difference between 2 versions of the Model parameters\n   * and returns serialized `diff` that can be submitted to PyGrid.\n   *\n   * @param {Array.<tf.Tensor>} updatedModelParams - Array of model parameters (tensors).\n   * @returns {Promise<ArrayBuffer>} Protobuf-serialized `diff`.\n   */\n  async createSerializedDiff(updatedModelParams) {\n    const placeholders = [],\n      tensors = [];\n\n    // Store model weight differences in a new State and convert to protobuf-serialized binary\n    for (let i = 0; i < updatedModelParams.length; i++) {\n      let paramDiff = this.params[i].sub(updatedModelParams[i]);\n      placeholders.push(new Placeholder(i, [`#${i}`, `#state-${i}`]));\n      tensors.push(await TorchTensor.fromTfTensor(paramDiff));\n    }\n    const state = new State(placeholders, tensors);\n    const bin = serialize(this.worker, state);\n\n    // Free up memory\n    tensors.forEach((t) => t._tfTensor.dispose());\n\n    return bin;\n  }\n\n  /**\n   * Calculates difference between 2 versions of the Model\n   * and returns serialized `diff` that can be submitted to PyGrid.\n   *\n   * @param {SyftModel} model - Model to compare with.\n   * @returns {Promise<ArrayBuffer>} Protobuf-serialized `diff`.\n   */\n  async createSerializedDiffFromModel(model) {\n    return this.createSerializedDiff(model.params);\n  }\n}\n","/**\n * Base transformation class.\n *\n * @param {...Object} options - Each argument is an options dict for an individual input\n */\nexport class Transform {\n  constructor(...options) {\n    this.options = options;\n  }\n\n  apply(...items) {\n    return items.map((item, idx) => {\n      if (!this.options[idx]) {\n        return item;\n      }\n      return this.applyToItem(item, this.options[idx]);\n    });\n  }\n\n  applyToItem(item /* options */) {\n    // no-op\n    return item;\n  }\n}\n\n/**\n * Composes multiple transforms into one.\n *\n * @param {Transform[]} transforms - Array of transforms\n */\nexport class Compose extends Transform {\n  constructor(transforms) {\n    super();\n    this.transforms = transforms;\n  }\n\n  apply(...data) {\n    let _data = data;\n    for (let transform of this.transforms) {\n      _data = transform.apply(..._data);\n    }\n    return _data;\n  }\n}\n","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}\n\nmodule.exports = _toArray;","import * as tf from '@tensorflow/tfjs-core';\nimport { Transform } from '../core';\n\n/**\n * Converts numeric data to tfjs tensor of specified shape and dtype.\n *\n * @param {...Object} options - Options dict per each input\n * @param {Number[]} options.shape - Tensor shape\n * @param {String} options.dtype - Tensor dtype\n */\nexport class ToTensor extends Transform {\n  applyToItem(item, options) {\n    const { shape = null, dtype = null } = options || {};\n    return tf.tensor(item, shape, dtype);\n  }\n}\n\n/**\n * Scales tensor using mean/std.\n *\n * @param {...Object} options - Options dict per each input\n * @param {Number[]} options.mean - Mean (one item per channel)\n * @param {Number[]} options.std - Std (one item per channel)\n */\nexport class Normalize extends Transform {\n  applyToItem(item, options) {\n    const { mean, std } = options;\n    const channels = mean.length;\n    let dataChannels, dataShape;\n    if (item.rank <= 1) {\n      dataChannels = 1;\n      dataShape = item.shape;\n    } else {\n      [dataChannels, ...dataShape] = item.shape;\n    }\n\n    if (channels !== 1 && dataChannels !== channels) {\n      throw new TypeError('Number of channels does not match');\n    }\n\n    let result;\n    if (channels > 1) {\n      const means = [];\n      const stds = [];\n      for (let i = 0; i < channels; i++) {\n        means.push(tf.zeros(dataShape).add(mean[i]));\n        stds.push(tf.zeros(dataShape).add(std[i]));\n      }\n      result = item.sub(tf.stack(means)).div(tf.stack(stds));\n    } else {\n      result = item.sub(mean[0]).div(std[0]);\n    }\n    return result;\n  }\n}\n\n/**\n * One-hot encoding of tensor.\n *\n * @param {...Object} options - Options dict per each input\n * @param {Number} options.depth - Number of classes for one-hot encoding\n * @param {Boolean} options.squeeze - Do not add extra dimension\n */\nexport class OneHot extends Transform {\n  applyToItem(item, options) {\n    const { depth, squeeze = false } = options;\n    const oneHot = tf.oneHot(item, depth);\n    if (squeeze) {\n      return tf.squeeze(oneHot);\n    }\n    return oneHot;\n  }\n}\n","/**\n * Abstract class for Dataset.\n * `getItem` method and `length` getter must be defined in the child class.\n *\n * @example\n * class MyDataset extends Dataset {\n *   constructor() {\n *     super();\n *     this.data = [1, 2, 3, 4, 5].map(i => tf.tensor(i));\n *     this.labels = [0, 0, 1, 0, 1].map(i => tf.tensor(i));\n *   }\n *\n *   getItem(index) {\n *     return [this.data[index], this.labels[index]];\n *   }\n *\n *   get length() {\n *     return this.data.length;\n *   }\n * }\n *\n * const ds = new MyDataset();\n * ds[0][0].print() // => Tensor 1\n * ds[0][1].print() // => Tensor 0\n *\n * @property {Function} getItem - Returns a sample\n * @property {Number} length - Length of the datasets\n * @abstract\n */\nexport class Dataset {\n  constructor() {\n    if (new.target === Dataset) {\n      throw new TypeError('Dataset is abstract, extend it');\n    }\n    if (this.getItem === undefined) {\n      throw new TypeError('Override getItem method');\n    }\n    if (\n      Object.getOwnPropertyDescriptor(Object.getPrototypeOf(this), 'length')\n        .get === undefined\n    ) {\n      throw new TypeError('Override length getter');\n    }\n\n    // Make dataset[x] work\n    const subscriptableHandler = {\n      get: function (target, prop /* receiver */) {\n        const possibleIdx = parseInt(prop);\n        if (Number.isInteger(possibleIdx) && possibleIdx >= 0) {\n          return target.getItem(prop);\n        } else {\n          return Reflect.get(...arguments);\n        }\n      },\n    };\n\n    return new Proxy(this, subscriptableHandler);\n  }\n}\n","/**\n * Abstract Sampler class.\n * Sampler produces indices for fetching samples from the Dataset.\n *\n * @private\n */\nexport class Sampler {\n  constructor(dataset) {\n    if (new.target === Sampler) {\n      throw new TypeError('Sampler is abstract, extend it');\n    }\n    if (this[Symbol.iterator] === undefined) {\n      throw new TypeError('Override iterator method');\n    }\n    if (\n      Object.getOwnPropertyDescriptor(Object.getPrototypeOf(this), 'length')\n        .get === undefined\n    ) {\n      throw new TypeError('Override length getter');\n    }\n    this.dataset = dataset;\n  }\n}\n\n/**\n * Sequential sampler produces indices in sequential order.\n\n * @private\n * @param {Dataset} dataset\n */\nexport class SequentialSampler extends Sampler {\n  constructor(dataset) {\n    super(dataset);\n  }\n\n  *[Symbol.iterator]() {\n    for (let i = 0; i < this.dataset.length; i++) {\n      yield i;\n    }\n  }\n\n  get length() {\n    return this.dataset.length;\n  }\n}\n\n/**\n * Random sampler produces random indices drawn from uniform distribution.\n *\n * @private\n * @param {Dataset} dataset\n */\nexport class RandomSampler extends Sampler {\n  constructor(dataset) {\n    super(dataset);\n  }\n\n  *[Symbol.iterator]() {\n    // Create & shuffle list of dataset indices\n    const indices = [...Array(this.dataset.length).keys()];\n    for (let i = indices.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [indices[i], indices[j]] = [indices[j], indices[i]];\n    }\n\n    yield* indices;\n  }\n\n  get length() {\n    return this.dataset.length;\n  }\n}\n\n/**\n * Batch sampler produces batched indices of other samplers.\n *\n * @private\n * @param {Sampler} sampler - Sampler to use for batching\n * @param {Number} batchSize - Batch size\n * @param {Boolean} dropLast - Whether the last undersized batch should be omitted\n */\nexport class BatchSampler extends Sampler {\n  constructor(sampler, batchSize, dropLast) {\n    super();\n    this.sampler = sampler;\n    this.batchSize = batchSize;\n    this.dropLast = dropLast;\n  }\n\n  *[Symbol.iterator]() {\n    let batch = [];\n    for (let idx of this.sampler) {\n      batch.push(idx);\n      if (batch.length === this.batchSize) {\n        yield batch;\n        batch = [];\n      }\n    }\n    if (batch.length > 0 && !this.dropLast) {\n      yield batch;\n    }\n  }\n\n  get length() {\n    return Math[this.dropLast ? 'floor' : 'ceil'](\n      this.sampler.length / this.batchSize\n    );\n  }\n}\n","/**\n * Base class for dataset fetchers.\n * Fetcher takes index or list of indices and returns collated samples from the dataset.\n *\n * @private\n * @param {Dataset} dataset - Dataset to fetch from\n * @param {Function} collateFn - Collate function\n * @param {Boolean} dropLast - If the last batch needs to be dropped\n */\nclass BaseDatasetFetcher {\n  constructor(dataset, collateFn, dropLast) {\n    this.dataset = dataset;\n    this.collateFn = collateFn;\n    this.dropLast = dropLast;\n  }\n\n  fetch(/* index */) {}\n}\n\n/**\n * Map-style dataset fetcher.\n * Assumes that a dataset sample can be accessed by specific index,\n * i.e. it is not iterable-style dataset.\n *\n * @private\n */\nexport class MapDatasetFetcher extends BaseDatasetFetcher {\n  constructor(dataset, collateFn, dropLast) {\n    super(dataset, collateFn, dropLast);\n  }\n\n  /**\n   * Fetches a sample or batch of samples from the dataset.\n   *\n   * @param {Number[]|Number} indices\n   * @return {*}\n   */\n  fetch(indices) {\n    let data;\n    if (Array.isArray(indices)) {\n      data = indices.map((idx) => this.dataset.getItem(idx));\n    } else {\n      data = this.dataset.getItem(indices);\n    }\n    return this.collateFn(data);\n  }\n}\n","import * as tf from '@tensorflow/tfjs-core';\n\n/**\n * Collates list of samples into one tensor.\n * When sample is a list or dictionary of tensors:\n *  `[[sampleA1, sampleB1], [sampleA2, sampleB2], ... ]`\n *  `[{a: sampleA1, b: sampleB1}, {a: sampleA2, b: sampleB2}, ... ]`\n * result is a list or dict of collated samples:\n *  `[batchA, batchB]`\n *  `{a: batchA, b: batchB}`\n *\n * @param {Array<tf.Tensor>|Array<Array<tf.Tensor>>|Object} batch - List of data samples to collate\n * @return {tf.Tensor|{}|tf.Tensor[]}\n */\nexport const tfjs_collate = (batch) => {\n  const elem = batch[0];\n  if (elem instanceof tf.Tensor) {\n    // List of Tensors to stack\n    return tf.stack(batch, 0);\n  } else if (Array.isArray(elem)) {\n    // Sample is a list, we need to collate each element of it\n    const params = [];\n    for (let i = 0; i < elem.length; i++) {\n      params.push(tfjs_collate(batch.map((item) => item[i])));\n    }\n    return params;\n  } else if (typeof batch === 'object' && !!batch) {\n    // Sample is an object, we need to collate each property of it\n    const dict = {};\n    for (let key of Object.keys(elem)) {\n      dict[key] = tfjs_collate(batch.map((item) => item[key]));\n    }\n    return dict;\n  }\n};\n","import { SequentialSampler, BatchSampler, RandomSampler } from './sampler';\nimport { MapDatasetFetcher } from './fetch';\nimport { tfjs_collate } from './collate';\n\n/**\n * DataLoader controls fetching the data from the Dataset,\n * including shuffling and batching.\n * Implements iterable protocol to iterate over data samples.\n *\n * Note: currently it only supports tf.Tensor data in the dataset,\n * and collates batches using TFJS.\n *\n * @example\n * const loader = new DataLoader({dataset, batchSize: 32})\n * consle.log('number of batches: ', loader.length)\n * for (let batch of loader) {\n *   // ...\n * }\n *\n * @param {Object} parameters\n * @param {Dataset} parameters.dataset - Dataset to load\n * @param {Number} parameters.batchSize - Batch size for batching\n * @param {Boolean} parameters.shuffle - Shuffle the Dataset\n * @param {Boolean} parameters.dropLast - Skip the last chunk if it is smaller than the `batchSize`\n *\n * @property {Number} length - Data length.\n */\nexport class DataLoader {\n  constructor({ dataset, batchSize = 1, shuffle = true, dropLast = false }) {\n    this.dataset = dataset;\n    this.batchSize = batchSize;\n    this.shuffle = shuffle;\n    this.dropLast = dropLast;\n\n    if (this.shuffle) {\n      this.sampler = new RandomSampler(this.dataset);\n    } else {\n      this.sampler = new SequentialSampler(this.dataset);\n    }\n\n    this.batchSampler = new BatchSampler(\n      this.sampler,\n      this.batchSize,\n      this.dropLast\n    );\n\n    // Default collate function supports TFJS only\n    this.collateFn = tfjs_collate;\n  }\n\n  /**\n   * Iterator producing data batches.\n   * @return {*}\n   */\n  *[Symbol.iterator]() {\n    const iterator = new SimpleDataloaderIterator(this);\n    yield* iterator;\n  }\n\n  /**\n   * Returns indices sampler.\n   * @private\n   * @return {Sampler}\n   */\n  get indexSampler() {\n    return this.batchSampler;\n  }\n\n  get length() {\n    return this.indexSampler.length;\n  }\n}\n\n/**\n * Base class for DataLoader iterator.\n *\n * @private\n * @param {DataLoader} loader - DataLoader to iterate\n */\nclass BaseDataLoaderIterator {\n  constructor(loader) {\n    this.indexSampler = loader.indexSampler;\n    this.collateFn = loader.collateFn;\n    this.datasetFetcher = new MapDatasetFetcher(\n      loader.dataset,\n      loader.collateFn,\n      loader.dropLast\n    );\n  }\n}\n\n/**\n * Simple Dataloader iterator that sequentially fetches\n * dataset samples as a single worker.\n *\n * @private\n * @param {DataLoader} loader - DataLoader to iterate\n */\nclass SimpleDataloaderIterator extends BaseDataLoaderIterator {\n  constructor(loader) {\n    super(loader);\n  }\n\n  *[Symbol.iterator]() {\n    for (let index of this.indexSampler) {\n      yield this.datasetFetcher.fetch(index);\n    }\n  }\n}\n","import EventObserver from './events';\nimport Logger from './logger';\nimport { PlanInputSpec, PlanOutputSpec } from './types/plan';\nimport SyftModel from './syft-model';\nimport { base64Encode, base64Decode } from './utils/base64';\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport { DataLoader } from './data';\n\n/**\n * Class that contains training loop logic.\n *\n * @property {SyftModel} originalModel - Original model.\n * @property {SyftModel} currentModel - Trained model.\n * @property {number} epoch - Current epoch.\n * @property {number} batchIdx - Current batch.\n * @property {boolean} stopped - Is the training currently stopped.\n */\nexport class PlanTrainer {\n  static EVENT_TRAINING_START = 'start';\n  static EVENT_TRAINING_END = 'end';\n  static EVENT_TRAINING_STOP = 'stop';\n  static EVENT_EPOCH_START = 'epochStart';\n  static EVENT_EPOCH_END = 'epochEnd';\n  static EVENT_BATCH_START = 'batchStart';\n  static EVENT_BATCH_END = 'batchEnd';\n\n  /**\n   * @hideconstructor\n   * @param {Object} parameters - Dictionary of training parameters.\n   * @param {Syft} parameters.worker - Syft Worker.\n   * @param {Plan} parameters.plan - Training Plan to execute.\n   * @param {[PlanInputSpec]} parameters.inputs - Plan input specification.\n   * @param {[PlanOutputSpec]} parameters.outputs - Plan output specification.\n   * @param {SyftModel} parameters.model - Model to train.\n   * @param {DataLoader|tf.Tensor} parameters.data - DataLoader or plain tensor containing training data.\n   * @param {tf.Tensor} [parameters.target] - Training labels (optional if `data` is DataLoader).\n   * @param {number} parameters.epochs - Number of epochs.\n   * @param {number} [parameters.batchSize] - Batch size. Optional if `data` is DataLoader.\n   * @param {number} [parameters.stepsPerEpoch] - Optional max number of steps in epoch.\n   * @param {Object} [parameters.clientConfig] - Optional dictionary of additional client configuration parameters.\n   * @param {Object} [parameters.checkpoint] - Checkpoint.\n   * @param {Object} [parameters.events] - Optional dictionary of events.\n   * @param {Function} [parameters.events.start] - Training start event handler.\n   * @param {Function} [parameters.events.end] - Training end event handler.\n   * @param {Function} [parameters.events.stop] - Training stop event handler.\n   * @param {Function} [parameters.events.epochStart] - Training epoch start event handler.\n   * @param {Function} [parameters.events.epochEnd] - Training epoch end event handler.\n   * @param {Function} [parameters.events.batchStart] - Training batch start event handler.\n   * @param {Function} [parameters.events.batchEnd] - Training batch end event handler.\n   */\n  constructor({\n    worker,\n    plan,\n    inputs,\n    outputs,\n    model,\n    data,\n    target,\n    epochs,\n    batchSize,\n    stepsPerEpoch = null,\n    clientConfig = {},\n    checkpoint = null,\n    events = {},\n  }) {\n    this.worker = worker;\n\n    this.plan = plan;\n    this.planInputs = inputs;\n    this.planOutputs = outputs;\n\n    this.originalModel = model;\n\n    this.data = data;\n    this.target = target;\n\n    this.epochs = epochs || 1;\n    this.batchSize = data instanceof DataLoader ? data.batchSize : batchSize;\n    this.stepsPerEpoch = stepsPerEpoch;\n    this.clientConfig = clientConfig;\n    this.events = events;\n\n    this.logger = new Logger();\n    this.observer = new EventObserver();\n\n    // State\n    this.currentModel = null;\n    this.epoch = 0;\n    this.batchIdx = 0;\n    this.stopped = false;\n\n    // Register event handlers.\n    if (events && typeof events === 'object') {\n      for (let eventName of Object.keys(events)) {\n        this.on(eventName, events[eventName]);\n      }\n    }\n\n    if (checkpoint) {\n      this.applyCheckpoint(checkpoint);\n    }\n  }\n\n  /**\n   * Registers an event listener to the PlanTrainer's event observer.\n   *\n   * Available events: `start`, `end`, `epochStart`, `epochEnd`, `batchStart`, `batchEnd`.\n   *\n   * @param {string} event - Event name.\n   * @param {Function} handler - Event listener.\n   */\n  on(event, handler) {\n    let events = [\n      PlanTrainer.EVENT_TRAINING_START,\n      PlanTrainer.EVENT_TRAINING_END,\n      PlanTrainer.EVENT_TRAINING_STOP,\n      PlanTrainer.EVENT_EPOCH_START,\n      PlanTrainer.EVENT_EPOCH_END,\n      PlanTrainer.EVENT_BATCH_START,\n      PlanTrainer.EVENT_BATCH_END,\n    ];\n    if (events.includes(event)) {\n      this.observer.subscribe(event, handler.bind(this));\n    }\n  }\n\n  /**\n   * Starts the training loop.\n   *\n   * @fires PlanTrainer#start\n   * @fires PlanTrainer#end\n   * @fires PlanTrainer#stop\n   * @fires PlanTrainer#epochStart\n   * @fires PlanTrainer#epochEnd\n   * @fires PlanTrainer#batchStart\n   * @fires PlanTrainer#batchEnd\n   */\n  async start(resume = false) {\n    let startEpoch = 0;\n    let startBatch = 0;\n    let startModel = this.originalModel;\n\n    if (this.stopped && resume) {\n      this.stopped = false;\n      startEpoch = this.epoch;\n      startBatch = this.batchIdx;\n      startModel = this.currentModel;\n    }\n\n    // Copy model params to preserve original.\n    let modelParams = startModel.params.map((p) => p.clone());\n\n    /**\n     * `start` event.\n     * Triggered on training start.\n     * @event PlanTrainer#start\n     * @type {Object}\n     */\n    this.observer.broadcast(PlanTrainer.EVENT_TRAINING_START, {});\n\n    // Main training loop.\n    for (let epoch = startEpoch; epoch < this.epochs; epoch++) {\n      this.epoch = epoch;\n      this.batchIdx = startBatch;\n      // Reset start batch after it is used\n      startBatch = 0;\n\n      /**\n       * `epochStart` event.\n       * Triggered before epoch start.\n       * @event PlanTrainer#epochStart\n       * @type {Object}\n       * @property {number} epoch - Current epoch.\n       */\n      this.observer.broadcast(PlanTrainer.EVENT_EPOCH_START, { epoch });\n      if (this._isStopped()) {\n        return;\n      }\n\n      let batch;\n      while ((batch = this._nextBatch()) !== undefined) {\n        /**\n         * `batchStart` event.\n         * Triggered before batch start.\n         * @event PlanTrainer#batchStart\n         * @type {Object}\n         * @property {number} epoch - Current epoch.\n         * @property {number} batch - Current batch.\n         */\n        this.observer.broadcast(PlanTrainer.EVENT_BATCH_START, {\n          epoch,\n          batch: this.batchIdx,\n        });\n        if (this._isStopped()) {\n          return;\n        }\n\n        // Prepare data for Plan arguments\n        let argData = {};\n        argData[PlanInputSpec.TYPE_BATCH_SIZE] = this.batchSize;\n        argData[PlanInputSpec.TYPE_MODEL_PARAM] = modelParams;\n        argData[PlanInputSpec.TYPE_CLIENT_CONFIG_PARAM] = this.clientConfig;\n        if (this.data instanceof DataLoader) {\n          argData[PlanInputSpec.TYPE_DATA] = batch;\n        } else {\n          argData[PlanInputSpec.TYPE_DATA] = batch[0];\n          argData[PlanInputSpec.TYPE_TARGET] = batch[1];\n        }\n\n        // Execute the Plan\n        const planArgs = PlanInputSpec.resolve(this.planInputs, argData);\n        const planRawOutput = await this.plan.execute(this.worker, ...planArgs);\n        const output = PlanOutputSpec.resolve(this.planOutputs, planRawOutput);\n\n        // Set updated model params for the next run.\n        if (\n          Object.hasOwnProperty.call(output, PlanOutputSpec.TYPE_MODEL_PARAM)\n        ) {\n          const updatedModelParams = output[PlanOutputSpec.TYPE_MODEL_PARAM];\n          for (let i = 0; i < updatedModelParams.length; i++) {\n            modelParams[i].dispose();\n            modelParams[i] = updatedModelParams[i];\n          }\n        }\n\n        // Update current model.\n        this.currentModel = new SyftModel({\n          worker: this.worker,\n          modelParameters: modelParams,\n        });\n\n        // Populate loss/metrics into status.\n        const status = { epoch, batch: this.batchIdx };\n        if (Object.hasOwnProperty.call(output, PlanOutputSpec.TYPE_LOSS)) {\n          status['loss'] = await output[PlanOutputSpec.TYPE_LOSS].array();\n        }\n        if (Object.hasOwnProperty.call(output, PlanOutputSpec.TYPE_METRIC)) {\n          status['metrics'] = {};\n          for (let metric of Object.keys(output[PlanOutputSpec.TYPE_METRIC])) {\n            status['metrics'][metric] = await output[\n              PlanOutputSpec.TYPE_METRIC\n            ][metric].array();\n          }\n        }\n\n        // Free mem.\n        batch.map((item) => item.dispose());\n\n        /**\n         * `batchEnd` event.\n         * Triggered after batch end.\n         * @event PlanTrainer#batchEnd\n         * @type {Object}\n         * @property {number} epoch - Current epoch.\n         * @property {number} batch - Current batch.\n         * @property {number} [loss] - Batch loss.\n         * @property {Object} [metrics] - Dictionary containing metrics (if any defined in the `outputs`).\n         */\n        this.observer.broadcast(PlanTrainer.EVENT_BATCH_END, status);\n\n        // Process other browser events.\n        await tf.nextFrame();\n\n        // Limits number of steps per epoch\n        if (\n          typeof this.stepsPerEpoch === 'number' &&\n          this.batchIdx >= this.stepsPerEpoch\n        ) {\n          break;\n        }\n\n        this.batchIdx++;\n      }\n\n      /**\n       * `epochEnd` event.\n       * Triggered after epoch end.\n       * @event PlanTrainer#epochEnd\n       * @property {number} epoch - Current epoch.\n       */\n      this.observer.broadcast(PlanTrainer.EVENT_EPOCH_END, { epoch });\n    }\n\n    /**\n     * `end` event.\n     * Triggered after training end.\n     * @event PlanTrainer#end\n     */\n    this.observer.broadcast(PlanTrainer.EVENT_TRAINING_END, {});\n  }\n\n  /**\n   * @private\n   */\n  _isStopped() {\n    // Stop training\n    if (this.stopped) {\n      /**\n       * `stop` event.\n       * Triggered when training was stopped.\n       * @event PlanTrainer#stop\n       * @property {Object}\n       */\n      this.observer.broadcast(PlanTrainer.EVENT_TRAINING_STOP, {});\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Returns the next batch of data from DataLoader or tensor.\n   * @return {tf.Tensor[]|undefined}\n   * @private\n   */\n  _nextBatch() {\n    if (this.data instanceof DataLoader) {\n      if (!this.dataIterator) {\n        this.dataIterator = this.data[Symbol.iterator]();\n      }\n\n      // Stop if current batch is larger than data length\n      if (this.batchIdx >= this.data.length) {\n        return undefined;\n      }\n\n      return this.dataIterator.next().value;\n    } else {\n      // Number of batches in data\n      const numBatches = Math.floor(this.data.shape[0] / this.batchSize);\n      // Stop if current batch is larger than data length\n      if (this.batchIdx >= numBatches) {\n        return undefined;\n      }\n\n      // Slice a batch.\n      const dataBatch = tf.slice(\n        this.data,\n        this.batchIdx * this.batchSize,\n        this.batchSize\n      );\n      const targetBatch = tf.slice(\n        this.target,\n        this.batchIdx * this.batchSize,\n        this.batchSize\n      );\n      return [dataBatch, targetBatch];\n    }\n  }\n\n  /**\n   * Stops training loop and returns training checkpoint.\n   *\n   * @returns {Promise<PlanTrainerCheckpoint>}\n   */\n  stop() {\n    return new Promise((resolve) => {\n      this.observer.subscribe(\n        PlanTrainer.EVENT_TRAINING_STOP,\n        () => {\n          resolve(this.createCheckpoint());\n        },\n        1\n      );\n      this.stopped = true;\n    });\n  }\n\n  /**\n   * Resume stopped training process.\n   */\n  async resume() {\n    if (this.stopped) {\n      await this.start(true);\n    }\n  }\n\n  /**\n   * Creates checkpoint using current training state.\n   *\n   * @return {PlanTrainerCheckpoint}\n   */\n  createCheckpoint() {\n    return new PlanTrainerCheckpoint({\n      epochs: this.epochs,\n      stepsPerEpoch: this.stepsPerEpoch,\n      batchSize: this.batchSize,\n      clientConfig: this.clientConfig,\n      originalModel: this.originalModel,\n      epoch: this.epoch,\n      batch: this.batchIdx,\n      currentModel: this.currentModel,\n    });\n  }\n\n  /**\n   * Restores `PlanTrainer` state from checkpoint.\n   *\n   * @param {PlanTrainerCheckpoint} checkpoint\n   */\n  applyCheckpoint(checkpoint) {\n    // Set values from checkpoint\n    this.epochs = checkpoint.epochs;\n    this.epoch = checkpoint.epoch;\n    this.stepsPerEpoch = checkpoint.stepsPerEpoch;\n    this.batchIdx = checkpoint.batch;\n    this.batchSize = checkpoint.batchSize;\n    this.currentModel = checkpoint.currentModel;\n    this.clientConfig = checkpoint.clientConfig;\n\n    // Mark training as stopped\n    this.stopped = true;\n  }\n}\n\n/**\n * Object that stores `PlanTrainer` state, to resume training from it.\n *\n * @param {Object} parameters - Dictionary of parameters\n * @param {number} parameters.epochs - Total number of epochs\n * @param {number} [parameters.stepsPerEpoch] - Max steps per epoch\n * @param {number} parameters.batchSize - Batch size\n * @param {Object} parameters.clientConfig - Client config\n * @param {number} parameters.epoch - Current epoch\n * @param {number} parameters.batch - Current batch number\n * @param {SyftModel} parameters.currentModel - Current state of the Model\n */\nexport class PlanTrainerCheckpoint {\n  constructor({\n    epochs,\n    stepsPerEpoch,\n    batchSize,\n    clientConfig,\n    epoch,\n    batch,\n    currentModel,\n  }) {\n    this.epochs = epochs;\n    this.stepsPerEpoch = stepsPerEpoch;\n    this.batchSize = batchSize;\n    this.clientConfig = clientConfig;\n    this.epoch = epoch;\n    this.batch = batch;\n    this.currentModel = currentModel;\n  }\n\n  /**\n   * Returns `PlanTrainerCheckpoint` serialized to plain Object.\n   *\n   * @return {Promise<Object>}\n   */\n  async toJSON() {\n    return {\n      epochs: this.epochs,\n      stepsPerEpoch: this.stepsPerEpoch,\n      batchSize: this.batchSize,\n      clientConfig: this.clientConfig || {},\n      epoch: this.epoch,\n      batch: this.batch,\n      currentModelBase64: base64Encode(await this.currentModel.toProtobuf()),\n    };\n  }\n\n  /**\n   * Creates `PlanTrainerCheckpoint` from object.\n   *\n   * @param {Syft} worker - Syft Worker\n   * @param {Object} obj - Object containing checkpoint data\n   * @return {PlanTrainerCheckpoint}\n   */\n  static fromJSON(worker, obj) {\n    const currentModel = new SyftModel({\n      worker,\n      serializedModelParameters: base64Decode(obj.currentModelBase64),\n    });\n    return new PlanTrainerCheckpoint({\n      ...obj,\n      currentModel,\n    });\n  }\n}\n","import EventObserver from './events';\nimport { protobuf, unserialize } from './protobuf';\nimport { base64Encode } from './utils/base64';\nimport { CYCLE_STATUS_ACCEPTED, CYCLE_STATUS_REJECTED } from './_constants';\nimport { GridUnknownCycleStatusError, PlanLoadFailedError } from './_errors';\nimport SyftModel from './syft-model';\nimport Logger from './logger';\nimport { PlanTrainer } from './plan-trainer';\n\n/**\n * Job represents a single training cycle done by the client.\n *\n * @property {Object.<string, Plan>} plans - Plans dictionary.\n * @property {Object.<string, Protocol>} protocols - [not implemented] Protocols dictionary.\n * @property {SyftModel} model - Model.\n */\nexport default class Job {\n  /**\n   * @hideconstructor\n   * @param {object} options\n   * @param {Syft} options.worker - Instance of Syft client.\n   * @param {string} options.modelName - Model name.\n   * @param {string} options.modelVersion - Model version.\n   * @param {string} options.authToken - Authentication token for the model.\n   * @param {GridAPIClient} options.gridClient - Instance of GridAPIClient.\n   */\n  constructor({ worker, modelName, modelVersion, authToken, gridClient }) {\n    this.worker = worker;\n    this.modelName = modelName;\n    this.modelVersion = modelVersion;\n    this.authToken = authToken;\n    this.grid = gridClient;\n    this.logger = new Logger();\n    this.observer = new EventObserver();\n\n    // Parameters to be loaded from PyGrid\n    this.worker_id = null;\n    this.requires_speed_test = false;\n    this.model = null;\n    this.plans = {};\n    this.protocols = {};\n    // Parameter for hosting request_key\n    this.cycleParams = {};\n    this.clientConfig = {};\n  }\n\n  /**\n   * Registers an event listener to the Job's event observer.\n   *\n   * Available events: `accepted`, `rejected`, `error`.\n   *\n   * @param {string} event - Event name.\n   * @param {Function} handler - Event listener.\n   */\n  on(event, handler) {\n    if (['accepted', 'rejected', 'error'].includes(event)) {\n      this.observer.subscribe(event, handler.bind(this));\n    }\n  }\n\n  /**\n   * Initializes the Job with provided training cycle params and\n   * downloads the model, plans, and protocols from PyGrid.\n   *\n   * @private\n   * @param {Object} cycleParams\n   * @returns {Promise<void>}\n   */\n  async initCycle(cycleParams) {\n    this.logger.log(\n      `Cycle initialization with params: ${JSON.stringify(cycleParams)}`\n    );\n    this.cycleParams = cycleParams;\n    this.clientConfig = cycleParams.client_config;\n\n    // Load model\n    const modelData = await this.grid.getModel(\n      this.worker_id,\n      cycleParams.request_key,\n      cycleParams.model_id\n    );\n    this.model = new SyftModel({\n      worker: this.worker,\n      serializedModelParameters: modelData,\n    });\n\n    // Load all plans\n    for (let planName of Object.keys(cycleParams.plans)) {\n      const planId = cycleParams.plans[planName];\n      const planBinary = await this.grid.getPlan(\n        this.worker_id,\n        cycleParams.request_key,\n        planId\n      );\n      try {\n        this.plans[planName] = unserialize(\n          this.worker,\n          planBinary,\n          protobuf.syft_proto.execution.v1.Plan\n        );\n      } catch (e) {\n        throw new PlanLoadFailedError(planName, e.message);\n      }\n    }\n\n    // Load all protocols\n    for (let protocolName of Object.keys(cycleParams.protocols)) {\n      const protocolId = cycleParams.protocols[protocolName];\n      const protocolBinary = await this.grid.getProtocol(\n        this.worker_id,\n        cycleParams.request_key,\n        protocolId\n      );\n      this.protocols[protocolName] = unserialize(\n        this.worker,\n        protocolBinary,\n        protobuf.syft_proto.execution.v1.Protocol\n      );\n    }\n  }\n\n  /**\n   * Starts the Job by executing following actions:\n   *  * Authenticates for given FL model.\n   *  * Meters connection speed to PyGrid (if requested by PyGrid).\n   *  * Registers into training cycle on PyGrid.\n   *  * Retrieves cycle and client parameters.\n   *  * Downloads the model, plans, protocols from PyGrid.\n   *  * Fires `accepted` event on success.\n   *\n   * @fires Job#accepted\n   * @fires Job#rejected\n   * @fires Job#error\n   * @returns {Promise<void>}\n   */\n  async start() {\n    let cycleParams;\n\n    try {\n      // Authenticate\n      const authResponse = await this.grid.authenticate(\n        this.modelName,\n        this.modelVersion,\n        this.authToken\n      );\n      this.worker_id = authResponse.worker_id;\n      // True if PyGrid requested to meter the speed\n      this.requires_speed_test = authResponse.requires_speed_test || false;\n\n      let [ping, download, upload] = [0, 0, 0];\n      // Test connection speed if required\n      if (this.requires_speed_test) {\n        ({ ping, download, upload } = await this.grid.getConnectionSpeed(\n          this.worker_id\n        ));\n      }\n\n      // Client request to join an active federated learning cycle on PyGrid\n      cycleParams = await this.grid.requestCycle(\n        this.worker_id,\n        this.modelName,\n        this.modelVersion,\n        ping,\n        download,\n        upload\n      );\n\n      // If the client's job request is accepted, load the model, plans, protocols, etc.\n      if (cycleParams.status === CYCLE_STATUS_ACCEPTED) {\n        this.logger.log(\n          `Accepted into cycle with params: ${JSON.stringify(\n            cycleParams,\n            null,\n            2\n          )}`\n        );\n        await this.initCycle(cycleParams);\n      }\n\n      // Throw an error if the request is neither accepted nor rejected\n      if (\n        ![CYCLE_STATUS_ACCEPTED, CYCLE_STATUS_REJECTED].includes(\n          cycleParams.status\n        )\n      ) {\n        throw new GridUnknownCycleStatusError(cycleParams.status);\n      }\n    } catch (error) {\n      /**\n       * `error` event.\n       * Triggered for plethora of error conditions.\n       *\n       * @event Job#error\n       */\n      this.observer.broadcast('error', error);\n      return;\n    }\n\n    // Trigger accepted or rejected event outside try/catch.\n    switch (cycleParams.status) {\n      case CYCLE_STATUS_ACCEPTED:\n        /**\n         * `accepted` event.\n         * Triggered when PyGrid accepts the client into training cycle.\n         *\n         * @event Job#accepted\n         * @type {Object}\n         * @property {SyftModel} model - Instance of SyftModel.\n         * @property {Object} clientConfig - Client configuration returned by PyGrid.\n         */\n        this.observer.broadcast('accepted', {\n          model: this.model,\n          clientConfig: this.clientConfig,\n        });\n        break;\n\n      case CYCLE_STATUS_REJECTED:\n        this.logger.log(\n          `Rejected from cycle with timeout: ${cycleParams.timeout}`\n        );\n\n        /**\n         * `rejected` event.\n         * Triggered when PyGrid rejects the client.\n         *\n         * @event Job#rejected\n         * @type {Object}\n         * @property {number|null} timeout - Time in seconds to retry. Empty when the FL model is not trainable anymore.\n         */\n        this.observer.broadcast('rejected', {\n          timeout: cycleParams.timeout,\n        });\n        break;\n    }\n  }\n\n  /**\n   * Alias for `Job.start`\n   *\n   * @see Job.start\n   * @returns {Promise<void>}\n   */\n  async request() {\n    return this.start();\n  }\n\n  /**\n   * Submits the model diff to PyGrid.\n   *\n   * @param {ArrayBuffer} diff - Serialized difference between original and trained model parameters.\n   * @returns {Promise<void>}\n   */\n  async report(diff) {\n    await this.grid.submitReport(\n      this.worker_id,\n      this.cycleParams.request_key,\n      base64Encode(diff)\n    );\n  }\n\n  /**\n   * Trains the model against specified plan and using specified parameters.\n   * Returns `PlanTrainer` object to have a handle on training process.\n   *\n   * @param {string} trainingPlan - Training Plan name.\n   * @param {Object} parameters - Dictionary of training parameters.\n   * @param {[PlanInputSpec]}  parameters.inputs - List of training Plan input arguments\n   * @param {[PlanOutputSpec]} parameters.outputs - List of training Plan outputs\n   * @param {tf.Tensor} parameters.data - Tensor containing training data\n   * @param {tf.Tensor} parameters.target - Tensor containing training targets\n   * @param {number} [parameters.epochs] - Epochs to train (if not specified, taken from Job)\n   * @param {number} [parameters.batchSize] - Batch size (if not specified, taken from Job)\n   * @param {number} [parameters.stepsPerEpoch] - Max number of steps per epoch (if not specified, taken from Job)\n   * @param {PlanTrainerCheckpoint} [parameters.checkpoint] - Checkpoint\n   * @param {Object} [parameters.events] - List of event listeners\n   * @param {Function} [parameters.events.start] - On training start listener\n   * @param {Function} [parameters.events.end] - On training end listener\n   * @param {Function} [parameters.events.epochStart] - On epoch start listener\n   * @param {Function} [parameters.events.epochEnd] - On epoch end listener\n   * @param {Function} [parameters.events.batchStart] - On batch start listener\n   * @param {Function} [parameters.events.batchEnd] - On batch end listener\n   * @returns {PlanTrainer}\n   */\n  train(trainingPlan, parameters) {\n    const trainingParams = {\n      clientConfig: this.clientConfig,\n      batchSize: this.clientConfig.batch_size,\n      epochs: this.clientConfig.max_epochs || 1,\n      stepsPerEpoch: this.clientConfig.max_updates || null,\n      ...parameters,\n    };\n\n    const trainer = new PlanTrainer({\n      worker: this.worker,\n      plan: this.plans[trainingPlan],\n      model: this.model,\n      ...trainingParams,\n    });\n\n    // For convenience of assigning event handlers, start training in the next macrotask\n    setTimeout(() => {\n      trainer.start(typeof parameters.checkpoint !== 'undefined');\n    }, 0);\n    return trainer;\n  }\n}\n","import EventObserver from './events';\nimport Logger from './logger';\nimport GridAPIClient from './grid-api-client';\nimport Job from './job';\nimport ObjectRegistry from './object-registry';\n\n/**\n * Syft client for model-centric federated learning.\n *\n * @param {Object} options\n * @param {string} options.url - Full URL to PyGrid app (`ws` and `http` schemas supported).\n * @param {boolean} options.verbose - Whether to enable logging and allow unsecured PyGrid connection.\n * @param {Object} options.peerConfig - [not implemented] WebRTC peer config used with RTCPeerConnection.\n *\n * @example\n *\n * const client = new Syft({url: \"ws://localhost:5000\", verbose: true})\n * const job = client.newJob({modelName: \"mnist\", modelVersion: \"1.0.0\"})\n * job.on('accepted', async ({model, clientConfig}) => {\n *   // Execute training\n *   const training = this.train('...', { ... })\n *   training.on('end', async () => {\n *     const diff = await model.createSerializedDiffFromModel(training.currentModel)\n *     await this.report(diff)\n *   }\n * })\n * job.on('rejected', ({timeout}) => {\n *   // Retry later or stop\n * })\n * job.on('error', (err) => {\n *   // Handle errors\n * })\n * job.request()\n */\nexport default class Syft {\n  constructor({ url, verbose, peerConfig }) {\n    // Create verbose logging if verbose value is true\n    this.logger = new Logger('syft.js', verbose);\n\n    // Force connection to be secure if verbose value is false\n    this.verbose = verbose;\n    this.gridClient = new GridAPIClient({ url, allowInsecureUrl: verbose });\n\n    // Create objects registry\n    this.objects = new ObjectRegistry();\n\n    // Create event listeners\n    this.observer = new EventObserver();\n\n    this.peerConfig = peerConfig;\n  }\n\n  /**\n   * Instantiates the new Job with given options.\n   *\n   * @param {Object} options\n   * @param {string} options.modelName - FL Model name.\n   * @param {string} options.modelVersion - FL Model version.\n   * @param {string} options.authToken - FL Model authentication token.\n   * @returns {Job}\n   */\n  newJob({ modelName, modelVersion, authToken }) {\n    return new Job({\n      worker: this,\n      modelName,\n      modelVersion,\n      authToken,\n      gridClient: this.gridClient,\n    });\n  }\n}\n"],"names":["SOCKET_STATUS","SOCKET_PING","GET_PROTOCOL","CYCLE_STATUS_ACCEPTED","CYCLE_STATUS_REJECTED","WEBRTC_JOIN_ROOM","WEBRTC_INTERNAL_MESSAGE","WEBRTC_PEER_LEFT","WEBRTC_DATACHANNEL_CHUNK_SIZE","WEBRTC_DATACHANNEL_MAX_BUFFER","WEBRTC_DATACHANNEL_BUFFER_TIMEOUT","WEBRTC_DATACHANNEL_MAX_BUFFER_TIMEOUTS","WEBRTC_PEER_CONFIG","iceServers","urls","WEBRTC_PEER_OPTIONS","optional","DtlsSrtpKeyAgreement","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","EventObserver","observers","type","func","expires","push","eventType","this","filter","data","forEach","observer","Logger","system","verbose","message","output","Date","now","console","log","_arrayWithHoles","arr","Array","isArray","_iterableToArrayLimit","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","value","err","_arrayLikeToArray","len","arr2","_unsupportedIterableToArray","o","minLen","arrayLikeToArray","n","toString","call","slice","constructor","name","from","test","_nonIterableRest","_slicedToArray","arrayWithHoles","iterableToArrayLimit","unsupportedIterableToArray","nonIterableRest","runtime","exports","Op","hasOwn","hasOwnProperty","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","makeInvokeMethod","state","GenStateSuspendedStart","invoke","method","arg","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","GenStateSuspendedYield","fn","obj","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","ensureDefaultToStringTag","object","defaultValue","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","resolve","reject","result","__await","then","unwrapped","error","previousPromise","enqueue","callInvokeWithMethodAndArg","info","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","Function","require$$0","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","createRandomBuffer","size","int32BuffSize","Math","ceil","buff","Uint32Array","int32Max","pow","randomInt32","random","int32ChunkSize","setTimeout","fillNextChunk","offset","min","buffer","SpeedTest","downloadUrl","uploadUrl","pingUrl","maxUploadSizeMb","maxTestTimeSec","bwAvgWindow","bwLowJitterThreshold","bwMaxLowJitterConsecutiveMeasures","xhr","isUpload","timeoutHandler","prevTime","prevSize","avgCollector","AvgCollector","avgWindow","_this","lowJitterThreshold","maxLowJitterConsecutiveMeasures","req","upload","clearTimeout","onprogress","onload","onerror","abort","getAvg","onreadystatechange","readyState","e","loaded","time","deltaTime","speed","Number","isFinite","collect","XMLHttpRequest","meterXhr","open","send","currXhr","_this2","runPing","startTime","ping","measuresCount","prevAvg","avg","lowJitterConsecutiveMeasures","_setPrototypeOf","p","_inherits","subClass","superClass","_typeof","_assertThisInitialized","ReferenceError","_possibleConstructorReturn","assertThisInitialized","_getPrototypeOf","_isNativeFunction","indexOf","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","_construct","Parent","Class","isNativeReflectConstruct","a","bind","_wrapNativeSuper","_cache","Map","isNativeFunction","has","get","set","Wrapper","NoDetailerError","d","NotEnoughArgsError","passed","expected","MissingVariableError","CannotFindCommandError","command","GridUnknownCycleStatusError","status","GridError","ModelLoadFailedError","PlanLoadFailedError","planName","ProtobufUnserializeFailedError","pbType","chars","lookup","Uint8Array","charCodeAt","arraybuffer","bytes","base64","substring","encoded1","encoded2","encoded3","encoded4","bufferLength","ArrayBuffer","base64Decode","str","decode","base64Encode","array","encode","HTTP_PATH_VERB","GridAPIClient","url","allowInsecureUrl","transport","match","wsUrl","httpUrl","replace","ws","wsMessages","logger","responseTimeout","_handleWsMessage","_handleWsError","_handleWsClose","modelName","modelVersion","authToken","_send","model_name","model_version","auth_token","response","workerId","download","worker_id","model","version","requestKey","modelId","_sendHttp","request_key","model_id","planId","plan_id","receive_operations_as","protocolId","diff","speedTest","encodeURIComponent","getPing","all","getDownloadSpeed","getUploadSpeed","path","_sendWs","query","map","k","join","fetch","mode","headers","body","JSON","stringify","ok","statusText","json","res","_initWs","request_id","cleanUp","unsubscribe","onError","onClose","event","onMessage","subscribe","WebSocket","onopen","onclose","onmessage","parse","handler","broadcast","_defineProperty","asPromise","ctx","params","index","pending","executor","callback","string","b64","s64","start","end","t","parts","chunk","j","b","String","fromCharCode","invalidEncoding","c","EventEmitter","_listeners","on","evt","off","listeners","splice","emit","factory","Float32Array","f32","f8b","le","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","round","exponent","floor","LN2","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","utf8","utf8_length","read","utf8_read","write","utf8_write","c1","c2","pool","alloc","SIZE","MAX","slab","pool_alloc","LongBits","zero","toNumber","zzEncode","zzDecode","zeroHash","fromNumber","util","isString","Long","parseInt","fromString","low","high","unsigned","toLong","Boolean","fromHash","hash","toHash","mask","part0","part1","part2","merge","dst","src","ifNotSet","newError","CustomError","properties","captureStackTrace","stack","require$$1","require$$2","float","require$$3","require$$4","require$$5","require$$6","require$$7","global","window","emptyArray","freeze","emptyObject","isNode","process","versions","node","isInteger","isObject","isset","isSet","prop","Buffer","utf8Write","_Buffer_from","_Buffer_allocUnsafe","newBuffer","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","bits","fromBits","lcFirst","toLowerCase","ProtocolError","oneOfGetter","getOneOf","fieldNames","fieldMap","oneOfSetter","setOneOf","toJSONOptions","longs","enums","_configure","Buffer_from","encoding","allocUnsafe","Buffer_allocUnsafe","Writer","BufferWriter","noop","State","writer","head","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","create_buffer_setup","create_buffer","create_array","subarray","_push","uint32","write_uint32","int32","write_int32","sint32","write_sint32","uint64","write_uint64","int64","sint64","write_sint64","bool","write_bool","fixed32","write_fixed32","sfixed32","fixed64","write_fixed64","sfixed64","write_float","double","write_double","writeBytes","writeBytes_set","writeBytes_for","write_bytes","write_string","fork","ldelim","BufferWriter_","alloc_buffer","writeBytesBuffer","writeBytesBuffer_set","writeBytesBuffer_copy","copy","writeStringBuffer","write_bytes_buffer","write_string_buffer","byteLength","Reader","BufferReader","indexOutOfRange","reader","writeLength","RangeError","create_typed_array","readLongVarint","readFixed32_end","readFixed64","isBuffer","_slice","read_uint32_setup","read_uint32","read_int32","read_sint32","read_bool","read_fixed32","read_sfixed32","read_float","read_double","read_bytes","read_string","skip","skipType","wireType","BufferReader_","read_int64","read_uint64","read_sint64","read_fixed64","read_sfixed64","read_string_buffer","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","rpcCall","requestCtor","responseCtor","request","rpcCallback","endedByRPC","protobuf","configure","build","rpc","roots","$Reader","$protobuf","$Writer","$util","$root","v1","execution","syft","torch","types","pointers","generic","frameworks","messaging","syft_proto","google","CommunicationAction","kwargs","return_ids","return_placeholder_ids","$oneOfFields","target_id","target_pointer","target_placeholder_id","target_tensor","PointerTensor","PlaceholderId","TorchTensor","Arg","Id","encodeDelimited","tag","decodeDelimited","verify","fromObject","toObject","options","keys2","arrays","defaults","objects","oneofs","toJSON","id","Placeholder","tags","child_tensor","child_parameter","description","expected_shape","Parameter","Shape","child","ComputationAction","Plan","roles","role","include_state","torchscript","input_types","base_framework","Role","NestedTypeWrapper","actions","placeholders","input_placeholder_ids","output_placeholder_ids","tensors","StateTensor","torch_tensor","torch_param","tensor","InputTypeDescriptor","type_name","nested_types","TypeContainer","TypeList","TypeTuple","TypeMap","nested_type","nested_type_list","nested_type_tuple","nested_type_dict","nested_container","Protocol","StorageAction","id_int","id_str","fromValue","dims","end2","arg_bool","arg_int","arg_float","arg_str","arg_shape","arg_tensor","arg_torch_param","arg_pointer_tensor","arg_placeholder","arg_placeholder_id","arg_list","ArgList","valuesById","contents_data","contents_bin","chain","grad_chain","serializer","TensorData","contents","Serializer","contents_uint8","contents_int8","contents_int16","contents_int32","contents_int64","contents_float16","contents_float32","contents_float64","contents_bool","contents_qint8","contents_quint8","contents_qint32","contents_bfloat16","shape","dtype","is_quantized","scale","zero_point","Size","requires_grad","grad","CFunction","Device","TorchDType","torch_type","MemoryFormat","memory_format_type","ScriptFunction","ScriptModule","TracedModule","object_id","location_id","object_id_at_location","point_to_attr","garbage_collect_data","ObjectPointer","PointerDataset","PointerPlan","fl","interpreters","BaseDataset","targets","AdditiveSharingTensor","location_ids","shares","field_int","field_str","crypto_provider_id","field_size","FixedPrecisionTensor","field","base","kappa","precision_fractional","SyftMessage","contents_empty_msg","contents_delete_msg","contents_get_shape_msg","contents_is_none_msg","contents_object_msg","contents_object_request_msg","contents_tensor_cmd_msg","contents_plan_cmd_msg","contents_worker_cmd_msg","contents_search_msg","Empty","ForceObjectDeleteMessage","GetShapeMessage","IsNoneMessage","ObjectMessage","ObjectRequestMessage","TensorCommandMessage","PlanCommandMessage","WorkerCommandMessage","SearchMessage","computation","communication","action","reason","command_name","root","planAssigments","workersResolved","plans","worker","pb","planAssignments","plan_assignments","item","getPbId","workers_resolved","execute","unbufferize","PlanInputSpec","specs","spec","TYPE_VALUE","TYPE_CLIENT_CONFIG_PARAM","PlanOutputSpec","out","ObjectRegistry","gc","tf","dispose","objectRegistry","planScope","load","inputPlaceholders","getInputPlaceholders","outputPlaceholders","getOutputPlaceholders","argsLength","datum","ph","idx","_this3","returnIds","returnPlaceholderIds","resolvedResultingTensors","placeholder","setGc","clear","toTfTensor","tensorsPb","bufferize","placeholdersPb","stateTensor","Message","gradChain","_tfTensor","tensorData","pbTensorData","pbId","SERIALIZER_ALL","flat","flatten","TorchParameter","requiresGrad","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","_toConsumableArray","arrayWithoutHoles","iterableToArray","nonIterableSpread","idAtLocation","locationId","pointToAttr","garbageCollectData","scope","haveValuesForAllArgs","enoughInfo","toTFTensor","getTensorByRef","reference","pullTensorsFromArgs","resolvedArgs","tensorByRef","functionName","split","PB_CLASS_MAP","PB_TO_UNBUFFERIZER","initMappings","reduce","wasm","WebAssembly","Instance","Module","isLong","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","mul","add","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","toUnsigned","shru","shr","shl","max","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","pbObj","includes","unbufferizer","unserialize","bin","serialize","SyftModel","serializedModelParameters","modelParameters","getTfTensors","fromTfTensor","updatedModelParams","paramDiff","createSerializedDiff","Transform","items","applyToItem","Compose","transforms","_data","transform","_toArray","ToTensor","Normalize","dataChannels","dataShape","mean","std","channels","rank","means","stds","OneHot","depth","squeeze","oneHot","Dataset","getItem","getOwnPropertyDescriptor","possibleIdx","Sampler","dataset","SequentialSampler","RandomSampler","indices","BatchSampler","sampler","batchSize","dropLast","batch","BaseDatasetFetcher","collateFn","MapDatasetFetcher","tfjs_collate","elem","dict","DataLoader","shuffle","batchSampler","SimpleDataloaderIterator","indexSampler","BaseDataLoaderIterator","loader","datasetFetcher","PlanTrainer","plan","inputs","outputs","epochs","stepsPerEpoch","clientConfig","checkpoint","events","planInputs","planOutputs","originalModel","currentModel","epoch","batchIdx","stopped","eventName","applyCheckpoint","EVENT_TRAINING_START","EVENT_TRAINING_END","EVENT_TRAINING_STOP","EVENT_EPOCH_START","EVENT_EPOCH_END","EVENT_BATCH_START","EVENT_BATCH_END","resume","startEpoch","startBatch","startModel","modelParams","clone","_isStopped","_nextBatch","argData","TYPE_BATCH_SIZE","TYPE_MODEL_PARAM","TYPE_DATA","TYPE_TARGET","planArgs","planRawOutput","TYPE_LOSS","TYPE_METRIC","metric","dataIterator","numBatches","createCheckpoint","PlanTrainerCheckpoint","toProtobuf","currentModelBase64","Job","gridClient","grid","requires_speed_test","protocols","cycleParams","client_config","getModel","modelData","getPlan","planBinary","_context","protocolName","getProtocol","protocolBinary","authenticate","authResponse","getConnectionSpeed","requestCycle","initCycle","timeout","submitReport","trainingPlan","parameters","trainingParams","batch_size","max_epochs","max_updates","trainer","Syft","peerConfig"],"mappings":"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"}