/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/// <amd-module name="@tensorflow/tfjs-core/dist/ops/ops" />
export { abs } from '@tensorflow/tfjs-core/dist/ops/abs';
export { acos } from '@tensorflow/tfjs-core/dist/ops/acos';
export { acosh } from '@tensorflow/tfjs-core/dist/ops/acosh';
export { add } from '@tensorflow/tfjs-core/dist/ops/add';
export { addN } from '@tensorflow/tfjs-core/dist/ops/add_n';
export { all } from '@tensorflow/tfjs-core/dist/ops/all';
export { any } from '@tensorflow/tfjs-core/dist/ops/any';
export { argMax } from '@tensorflow/tfjs-core/dist/ops/arg_max';
export { argMin } from '@tensorflow/tfjs-core/dist/ops/arg_min';
export { asin } from '@tensorflow/tfjs-core/dist/ops/asin';
export { asinh } from '@tensorflow/tfjs-core/dist/ops/asinh';
export { atan } from '@tensorflow/tfjs-core/dist/ops/atan';
export { atan2 } from '@tensorflow/tfjs-core/dist/ops/atan2';
export { atanh } from '@tensorflow/tfjs-core/dist/ops/atanh';
export { avgPool } from '@tensorflow/tfjs-core/dist/ops/avg_pool';
export { avgPool3d } from '@tensorflow/tfjs-core/dist/ops/avg_pool_3d';
export { basicLSTMCell } from '@tensorflow/tfjs-core/dist/ops/basic_lstm_cell';
export { batchToSpaceND } from '@tensorflow/tfjs-core/dist/ops/batch_to_space_nd';
export { batchNorm } from '@tensorflow/tfjs-core/dist/ops/batchnorm';
export { batchNorm2d } from '@tensorflow/tfjs-core/dist/ops/batchnorm2d';
export { batchNorm3d } from '@tensorflow/tfjs-core/dist/ops/batchnorm3d';
export { batchNorm4d } from '@tensorflow/tfjs-core/dist/ops/batchnorm4d';
export { bincount } from '@tensorflow/tfjs-core/dist/ops/bincount';
export { broadcastArgs } from '@tensorflow/tfjs-core/dist/ops/broadcast_args';
export { broadcastTo } from '@tensorflow/tfjs-core/dist/ops/broadcast_to';
export { buffer } from '@tensorflow/tfjs-core/dist/ops/buffer';
export { cast } from '@tensorflow/tfjs-core/dist/ops/cast';
export { ceil } from '@tensorflow/tfjs-core/dist/ops/ceil';
export { clipByValue } from '@tensorflow/tfjs-core/dist/ops/clip_by_value';
export { clone } from '@tensorflow/tfjs-core/dist/ops/clone';
export { complex } from '@tensorflow/tfjs-core/dist/ops/complex';
export { concat } from '@tensorflow/tfjs-core/dist/ops/concat';
export { concat1d } from '@tensorflow/tfjs-core/dist/ops/concat_1d';
export { concat2d } from '@tensorflow/tfjs-core/dist/ops/concat_2d';
export { concat3d } from '@tensorflow/tfjs-core/dist/ops/concat_3d';
export { concat4d } from '@tensorflow/tfjs-core/dist/ops/concat_4d';
export { conv1d } from '@tensorflow/tfjs-core/dist/ops/conv1d';
export { conv2d } from '@tensorflow/tfjs-core/dist/ops/conv2d';
export { conv2dTranspose } from '@tensorflow/tfjs-core/dist/ops/conv2d_transpose';
export { conv3d } from '@tensorflow/tfjs-core/dist/ops/conv3d';
export { conv3dTranspose } from '@tensorflow/tfjs-core/dist/ops/conv3d_transpose';
export { cos } from '@tensorflow/tfjs-core/dist/ops/cos';
export { cosh } from '@tensorflow/tfjs-core/dist/ops/cosh';
export { cumsum } from '@tensorflow/tfjs-core/dist/ops/cumsum';
export { denseBincount } from '@tensorflow/tfjs-core/dist/ops/dense_bincount';
export { depthToSpace } from '@tensorflow/tfjs-core/dist/ops/depth_to_space';
export { depthwiseConv2d } from '@tensorflow/tfjs-core/dist/ops/depthwise_conv2d';
export { diag } from '@tensorflow/tfjs-core/dist/ops/diag';
export { dilation2d } from '@tensorflow/tfjs-core/dist/ops/dilation2d';
export { div } from '@tensorflow/tfjs-core/dist/ops/div';
export { divNoNan } from '@tensorflow/tfjs-core/dist/ops/div_no_nan';
export { dot } from '@tensorflow/tfjs-core/dist/ops/dot';
export { einsum } from '@tensorflow/tfjs-core/dist/ops/einsum';
export { elu } from '@tensorflow/tfjs-core/dist/ops/elu';
export { equal } from '@tensorflow/tfjs-core/dist/ops/equal';
export { erf } from '@tensorflow/tfjs-core/dist/ops/erf';
export { exp } from '@tensorflow/tfjs-core/dist/ops/exp';
export { expandDims } from '@tensorflow/tfjs-core/dist/ops/expand_dims';
export { expm1 } from '@tensorflow/tfjs-core/dist/ops/expm1';
export { eye } from '@tensorflow/tfjs-core/dist/ops/eye';
export { fill } from '@tensorflow/tfjs-core/dist/ops/fill';
export { floor } from '@tensorflow/tfjs-core/dist/ops/floor';
export { floorDiv } from '@tensorflow/tfjs-core/dist/ops/floorDiv';
export { gather } from '@tensorflow/tfjs-core/dist/ops/gather';
export { greater } from '@tensorflow/tfjs-core/dist/ops/greater';
export { greaterEqual } from '@tensorflow/tfjs-core/dist/ops/greater_equal';
export { imag } from '@tensorflow/tfjs-core/dist/ops/imag';
export { isFinite } from '@tensorflow/tfjs-core/dist/ops/is_finite';
export { isInf } from '@tensorflow/tfjs-core/dist/ops/is_inf';
export { isNaN } from '@tensorflow/tfjs-core/dist/ops/is_nan';
export { leakyRelu } from '@tensorflow/tfjs-core/dist/ops/leaky_relu';
export { less } from '@tensorflow/tfjs-core/dist/ops/less';
export { lessEqual } from '@tensorflow/tfjs-core/dist/ops/less_equal';
export { linspace } from '@tensorflow/tfjs-core/dist/ops/linspace';
export { localResponseNormalization } from '@tensorflow/tfjs-core/dist/ops/local_response_normalization';
export { log } from '@tensorflow/tfjs-core/dist/ops/log';
export { log1p } from '@tensorflow/tfjs-core/dist/ops/log1p';
export { logSigmoid } from '@tensorflow/tfjs-core/dist/ops/log_sigmoid';
export { logSoftmax } from '@tensorflow/tfjs-core/dist/ops/log_softmax';
export { logSumExp } from '@tensorflow/tfjs-core/dist/ops/log_sum_exp';
export { logicalAnd } from '@tensorflow/tfjs-core/dist/ops/logical_and';
export { logicalNot } from '@tensorflow/tfjs-core/dist/ops/logical_not';
export { logicalOr } from '@tensorflow/tfjs-core/dist/ops/logical_or';
export { logicalXor } from '@tensorflow/tfjs-core/dist/ops/logical_xor';
export { matMul } from '@tensorflow/tfjs-core/dist/ops/mat_mul';
export { max } from '@tensorflow/tfjs-core/dist/ops/max';
export { maxPool } from '@tensorflow/tfjs-core/dist/ops/max_pool';
export { maxPool3d } from '@tensorflow/tfjs-core/dist/ops/max_pool_3d';
export { maxPoolWithArgmax } from '@tensorflow/tfjs-core/dist/ops/max_pool_with_argmax';
export { maximum } from '@tensorflow/tfjs-core/dist/ops/maximum';
export { mean } from '@tensorflow/tfjs-core/dist/ops/mean';
export { meshgrid } from '@tensorflow/tfjs-core/dist/ops/meshgrid';
export { min } from '@tensorflow/tfjs-core/dist/ops/min';
export { minimum } from '@tensorflow/tfjs-core/dist/ops/minimum';
export { mirrorPad } from '@tensorflow/tfjs-core/dist/ops/mirror_pad';
export { mod } from '@tensorflow/tfjs-core/dist/ops/mod';
export { moments } from '@tensorflow/tfjs-core/dist/ops/moments';
export { mul } from '@tensorflow/tfjs-core/dist/ops/mul';
export { LSTMCellFunc, multiRNNCell } from '@tensorflow/tfjs-core/dist/ops/multi_rnn_cell';
export { multinomial } from '@tensorflow/tfjs-core/dist/ops/multinomial';
export { neg } from '@tensorflow/tfjs-core/dist/ops/neg';
export { notEqual } from '@tensorflow/tfjs-core/dist/ops/not_equal';
export { oneHot } from '@tensorflow/tfjs-core/dist/ops/one_hot';
export { ones } from '@tensorflow/tfjs-core/dist/ops/ones';
export { onesLike } from '@tensorflow/tfjs-core/dist/ops/ones_like';
export { outerProduct } from '@tensorflow/tfjs-core/dist/ops/outer_product';
export { pad } from '@tensorflow/tfjs-core/dist/ops/pad';
export { pad1d } from '@tensorflow/tfjs-core/dist/ops/pad1d';
export { pad2d } from '@tensorflow/tfjs-core/dist/ops/pad2d';
export { pad3d } from '@tensorflow/tfjs-core/dist/ops/pad3d';
export { pad4d } from '@tensorflow/tfjs-core/dist/ops/pad4d';
export { pool } from '@tensorflow/tfjs-core/dist/ops/pool';
export { pow } from '@tensorflow/tfjs-core/dist/ops/pow';
export { prelu } from '@tensorflow/tfjs-core/dist/ops/prelu';
export { print } from '@tensorflow/tfjs-core/dist/ops/print';
export { prod } from '@tensorflow/tfjs-core/dist/ops/prod';
export { rand } from '@tensorflow/tfjs-core/dist/ops/rand';
export { randomGamma } from '@tensorflow/tfjs-core/dist/ops/random_gamma';
export { randomNormal } from '@tensorflow/tfjs-core/dist/ops/random_normal';
export { randomUniform } from '@tensorflow/tfjs-core/dist/ops/random_uniform';
export { range } from '@tensorflow/tfjs-core/dist/ops/range';
export { real } from '@tensorflow/tfjs-core/dist/ops/real';
export { reciprocal } from '@tensorflow/tfjs-core/dist/ops/reciprocal';
export { relu } from '@tensorflow/tfjs-core/dist/ops/relu';
export { relu6 } from '@tensorflow/tfjs-core/dist/ops/relu6';
export { reshape } from '@tensorflow/tfjs-core/dist/ops/reshape';
export { reverse } from '@tensorflow/tfjs-core/dist/ops/reverse';
export { reverse1d } from '@tensorflow/tfjs-core/dist/ops/reverse_1d';
export { reverse2d } from '@tensorflow/tfjs-core/dist/ops/reverse_2d';
export { reverse3d } from '@tensorflow/tfjs-core/dist/ops/reverse_3d';
export { reverse4d } from '@tensorflow/tfjs-core/dist/ops/reverse_4d';
export { round } from '@tensorflow/tfjs-core/dist/ops/round';
export { rsqrt } from '@tensorflow/tfjs-core/dist/ops/rsqrt';
export { scalar } from '@tensorflow/tfjs-core/dist/ops/scalar';
export { selu } from '@tensorflow/tfjs-core/dist/ops/selu';
export { separableConv2d } from '@tensorflow/tfjs-core/dist/ops/separable_conv2d';
export { setdiff1dAsync } from '@tensorflow/tfjs-core/dist/ops/setdiff1d_async';
export { sigmoid } from '@tensorflow/tfjs-core/dist/ops/sigmoid';
export { sign } from '@tensorflow/tfjs-core/dist/ops/sign';
export { sin } from '@tensorflow/tfjs-core/dist/ops/sin';
export { sinh } from '@tensorflow/tfjs-core/dist/ops/sinh';
export { slice } from '@tensorflow/tfjs-core/dist/ops/slice';
export { slice1d } from '@tensorflow/tfjs-core/dist/ops/slice1d';
export { slice2d } from '@tensorflow/tfjs-core/dist/ops/slice2d';
export { slice3d } from '@tensorflow/tfjs-core/dist/ops/slice3d';
export { slice4d } from '@tensorflow/tfjs-core/dist/ops/slice4d';
export { softmax } from '@tensorflow/tfjs-core/dist/ops/softmax';
export { softplus } from '@tensorflow/tfjs-core/dist/ops/softplus';
export { spaceToBatchND } from '@tensorflow/tfjs-core/dist/ops/space_to_batch_nd';
export { fft } from '@tensorflow/tfjs-core/dist/ops/spectral/fft';
export { ifft } from '@tensorflow/tfjs-core/dist/ops/spectral/ifft';
export { irfft } from '@tensorflow/tfjs-core/dist/ops/spectral/irfft';
export { rfft } from '@tensorflow/tfjs-core/dist/ops/spectral/rfft';
export { split } from '@tensorflow/tfjs-core/dist/ops/split';
export { sqrt } from '@tensorflow/tfjs-core/dist/ops/sqrt';
export { square } from '@tensorflow/tfjs-core/dist/ops/square';
export { squaredDifference } from '@tensorflow/tfjs-core/dist/ops/squared_difference';
export { squeeze } from '@tensorflow/tfjs-core/dist/ops/squeeze';
export { stack } from '@tensorflow/tfjs-core/dist/ops/stack';
export { step } from '@tensorflow/tfjs-core/dist/ops/step';
export { stridedSlice } from '@tensorflow/tfjs-core/dist/ops/strided_slice';
export { sub } from '@tensorflow/tfjs-core/dist/ops/sub';
export { sum } from '@tensorflow/tfjs-core/dist/ops/sum';
export { tan } from '@tensorflow/tfjs-core/dist/ops/tan';
export { tanh } from '@tensorflow/tfjs-core/dist/ops/tanh';
export { tensor } from '@tensorflow/tfjs-core/dist/ops/tensor';
export { tensor1d } from '@tensorflow/tfjs-core/dist/ops/tensor1d';
export { tensor2d } from '@tensorflow/tfjs-core/dist/ops/tensor2d';
export { tensor3d } from '@tensorflow/tfjs-core/dist/ops/tensor3d';
export { tensor4d } from '@tensorflow/tfjs-core/dist/ops/tensor4d';
export { tensor5d } from '@tensorflow/tfjs-core/dist/ops/tensor5d';
export { tensor6d } from '@tensorflow/tfjs-core/dist/ops/tensor6d';
export { tile } from '@tensorflow/tfjs-core/dist/ops/tile';
export { topk } from '@tensorflow/tfjs-core/dist/ops/topk';
export { truncatedNormal } from '@tensorflow/tfjs-core/dist/ops/truncated_normal';
export { unique } from '@tensorflow/tfjs-core/dist/ops/unique';
export { unsortedSegmentSum } from '@tensorflow/tfjs-core/dist/ops/unsorted_segment_sum';
export { unstack } from '@tensorflow/tfjs-core/dist/ops/unstack';
export { variable } from '@tensorflow/tfjs-core/dist/ops/variable';
export { where } from '@tensorflow/tfjs-core/dist/ops/where';
export { whereAsync } from '@tensorflow/tfjs-core/dist/ops/where_async';
export { zeros } from '@tensorflow/tfjs-core/dist/ops/zeros';
export { zerosLike } from '@tensorflow/tfjs-core/dist/ops/zeros_like';
export * from '@tensorflow/tfjs-core/dist/ops/boolean_mask';
export * from '@tensorflow/tfjs-core/dist/ops/transpose';
export * from '@tensorflow/tfjs-core/dist/ops/norm';
export * from '@tensorflow/tfjs-core/dist/ops/moving_average';
export * from '@tensorflow/tfjs-core/dist/ops/scatter_nd';
export * from '@tensorflow/tfjs-core/dist/ops/sparse_to_dense';
export * from '@tensorflow/tfjs-core/dist/ops/gather_nd';
export * from '@tensorflow/tfjs-core/dist/ops/dropout';
export * from '@tensorflow/tfjs-core/dist/ops/signal_ops_util';
export * from '@tensorflow/tfjs-core/dist/ops/in_top_k';
export { op, OP_SCOPE_SUFFIX } from '@tensorflow/tfjs-core/dist/ops/operation';
declare const spectral: {
    fft: (input: import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>) => import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>;
    ifft: (input: import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>) => import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>;
    rfft: (input: import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>, fftLength?: number) => import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>;
    irfft: (input: import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>) => import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>;
};
import * as fused from '@tensorflow/tfjs-core/dist/ops/fused_ops';
declare const signal: {
    hammingWindow: (windowLength: number) => import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>;
    hannWindow: (windowLength: number) => import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>;
    frame: (signal: import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>, frameLength: number, frameStep: number, padEnd?: boolean, padValue?: number) => import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>;
    stft: (signal: import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>, frameLength: number, frameStep: number, fftLength?: number, windowFn?: (length: number) => import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>) => import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>;
};
declare const image: {
    flipLeftRight: (image: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R4>) => import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R4>;
    grayscaleToRGB: <T extends import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R2> | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R3> | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R4> | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R5> | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R6>>(image: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | T) => T;
    resizeNearestNeighbor: <T extends import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R3> | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R4>>(images: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | T, size: [number, number], alignCorners?: boolean, halfPixelCenters?: boolean) => T;
    resizeBilinear: <T extends import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R3> | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R4>>(images: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | T, size: [number, number], alignCorners?: boolean, halfPixelCenters?: boolean) => T;
    rotateWithOffset: (image: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R4>, radians: number, fillValue?: number | [number, number, number], center?: number | [number, number]) => import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R4>;
    cropAndResize: (image: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R4>, boxes: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R2>, boxInd: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>, cropSize: [number, number], method?: "bilinear" | "nearest", extrapolationValue?: number) => import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R4>;
    nonMaxSuppression: (boxes: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R2>, scores: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>, maxOutputSize: number, iouThreshold?: number, scoreThreshold?: number) => import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>;
    nonMaxSuppressionAsync: (boxes: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R2>, scores: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>, maxOutputSize: number, iouThreshold?: number, scoreThreshold?: number) => Promise<import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>>;
    nonMaxSuppressionWithScore: (boxes: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R2>, scores: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>, maxOutputSize: number, iouThreshold?: number, scoreThreshold?: number, softNmsSigma?: number) => import("@tensorflow/tfjs-core/dist/tensor_types").NamedTensorMap;
    nonMaxSuppressionWithScoreAsync: (boxes: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R2>, scores: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>, maxOutputSize: number, iouThreshold?: number, scoreThreshold?: number, softNmsSigma?: number) => Promise<import("@tensorflow/tfjs-core/dist/tensor_types").NamedTensorMap>;
    nonMaxSuppressionPadded: (boxes: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R2>, scores: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>, maxOutputSize: number, iouThreshold?: number, scoreThreshold?: number, padToMaxOutputSize?: boolean) => import("@tensorflow/tfjs-core/dist/tensor_types").NamedTensorMap;
    nonMaxSuppressionPaddedAsync: (boxes: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R2>, scores: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>, maxOutputSize: number, iouThreshold?: number, scoreThreshold?: number, padToMaxOutputSize?: boolean) => Promise<import("@tensorflow/tfjs-core/dist/tensor_types").NamedTensorMap>;
    threshold: (image: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R3>, method?: string, inverted?: boolean, threshValue?: number) => import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R3>;
    transform: (image: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R4>, transforms: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R2>, interpolation?: "bilinear" | "nearest", fillMode?: "reflect" | "nearest" | "constant" | "wrap", fillValue?: number, outputShape?: [number, number]) => import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R4>;
};
declare const linalg: {
    bandPart: <T extends import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>>(a: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | T, numLower: number, numUpper: number) => T;
    gramSchmidt: (xs: import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R2> | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>[]) => import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R2> | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>[];
    qr: (x: import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>, fullMatrices?: boolean) => [import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>, import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>];
};
declare const losses: {
    absoluteDifference: <T extends import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>, O extends import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>>(labels: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | T, predictions: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | T, weights?: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>, reduction?: import("@tensorflow/tfjs-core/dist/base").Reduction) => O;
    computeWeightedLoss: <T extends import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>, O extends import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>>(losses: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | T, weights?: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>, reduction?: import("@tensorflow/tfjs-core/dist/base").Reduction) => O;
    cosineDistance: <T extends import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>, O extends import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>>(labels: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | T, predictions: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | T, axis: number, weights?: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>, reduction?: import("@tensorflow/tfjs-core/dist/base").Reduction) => O;
    hingeLoss: <T extends import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>, O extends import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>>(labels: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | T, predictions: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | T, weights?: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>, reduction?: import("@tensorflow/tfjs-core/dist/base").Reduction) => O;
    huberLoss: <T extends import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>, O extends import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>>(labels: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | T, predictions: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | T, weights?: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>, delta?: number, reduction?: import("@tensorflow/tfjs-core/dist/base").Reduction) => O;
    logLoss: <T extends import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>, O extends import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>>(labels: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | T, predictions: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | T, weights?: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>, epsilon?: number, reduction?: import("@tensorflow/tfjs-core/dist/base").Reduction) => O;
    meanSquaredError: <T extends import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>, O extends import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>>(labels: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | T, predictions: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | T, weights?: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>, reduction?: import("@tensorflow/tfjs-core/dist/base").Reduction) => O;
    sigmoidCrossEntropy: <T extends import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>, O extends import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>>(multiClassLabels: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | T, logits: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | T, weights?: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>, labelSmoothing?: number, reduction?: import("@tensorflow/tfjs-core/dist/base").Reduction) => O;
    softmaxCrossEntropy: <T extends import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>, O extends import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>>(onehotLabels: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | T, logits: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | T, weights?: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>, labelSmoothing?: number, reduction?: import("@tensorflow/tfjs-core/dist/base").Reduction) => O;
};
declare const sparse: {
    sparseFillEmptyRows: (indices: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R2>, values: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>, denseShape: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>, defaultValue: string | number | boolean | Uint8Array | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R0>) => import("@tensorflow/tfjs-core/dist/tensor_types").NamedTensorMap;
    sparseReshape: (inputIndices: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R2>, inputShape: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>, newShape: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>) => import("@tensorflow/tfjs-core/dist/tensor_types").NamedTensorMap;
    sparseSegmentMean: (data: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>, indices: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>, segmentIds: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>) => import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>;
    sparseSegmentSum: (data: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>, indices: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>, segmentIds: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>) => import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>;
};
declare const string: {
    stringNGrams: (data: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>, dataSplits: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>, separator: string, nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number, preserveShortSequences: boolean) => import("@tensorflow/tfjs-core/dist/tensor_types").NamedTensorMap;
    stringSplit: (input: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R1>, delimiter: string | number | boolean | Uint8Array | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank.R0>, skipEmpty?: boolean) => import("@tensorflow/tfjs-core/dist/tensor_types").NamedTensorMap;
    stringToHashBucketFast: (input: string | number | boolean | Float32Array | Int32Array | Uint8Array | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<number | number[] | Float32Array | Int32Array | Uint8Array> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<boolean> | import("@tensorflow/tfjs-core/dist/types").RecursiveArray<string> | Uint8Array[] | import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>, numBuckets: number) => import("@tensorflow/tfjs-core/dist/tensor").Tensor<import("@tensorflow/tfjs-core/dist/types").Rank>;
};
export { image, linalg, losses, spectral, fused, signal, sparse, string };
